<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.ComponentModel;
using System.Linq;
using System.Windows;
using DevExpress.Diagram.Core;
using DevExpress.Mvvm.UI.Native;
using DevExpress.Xpf.Diagram;

namespace DevExpress.Xpf.Reports.UserDesigner.XRDiagram {
<#foreach(var baseName in new string[] { "Item", "Container" }) {#>
    public class XRDiagramText<#=baseName#> : XRDiagram<#=baseName#> {
		protected class XRDiagramText<#=baseName#>Controller : XRDiagram<#=baseName#>Controller {
            readonly IDiagramItem item;
            public XRDiagramText<#=baseName#>Controller(IDiagram<#=baseName#> item) : base(item) {
                this.item = item;
            }
            public override IFontTraits GetFontTraits() {
                return TextProperty == null ? null : new FontTraits(item);
            }
	        public override PropertyDescriptor GetTextProperty() {
		        return DependencyPropertyDescriptor.FromProperty(TextProperty, Item.GetType());
			}
        }
        public static readonly DependencyProperty TextProperty;

        static XRDiagramText<#=baseName#>() {
            DependencyPropertyRegistrator<XRDiagramText<#=baseName#>>.New()
                .Register(d => d.Text, out TextProperty, null)
                .OverrideDefaultStyleKey()
            ;
        }

        protected sealed override XRDiagram<#=baseName#>ControllerBase CreateXR<#=baseName#>Controller() {
            return CreateXRText<#=baseName#>Controller();
        }
		protected virtual XRDiagramText<#=baseName#>Controller CreateXRText<#=baseName#>Controller() {
            return new XRDiagramText<#=baseName#>Controller(this);
        }
        public string Text {
            get { return (string)GetValue(TextProperty); }
            set { SetValue(TextProperty, value); }
        }
    }
<#}#>
}