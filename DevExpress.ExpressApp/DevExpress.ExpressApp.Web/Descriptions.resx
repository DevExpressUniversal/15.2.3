<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WebPropertyEditorSupportInlineEdit" xml:space="preserve">
    <value>Indicates whether the current Property Editor can be displayed in edit mode when its created for inline editing in a Grid List Editor.</value>
  </data>
  <data name="WebPropertyEditorEditor" xml:space="preserve">
    <value>Provides access to the Property Editor's control that is used in edit mode.</value>
  </data>
  <data name="WebPropertyEditorGroupName" xml:space="preserve">
    <value>For internal use only.</value>
  </data>
  <data name="WebPropertyEditorInplaceViewModeEditor" xml:space="preserve">
    <value>Provides access to the Property Editor's control that is used in view mode.</value>
  </data>
  <data name="WebPropertyEditorViewEditMode" xml:space="preserve">
    <value>Specifies the  mode for displaying the Property Editor's control.</value>
  </data>
  <data name="WebPropertyEditorCancelClickEventPropagation" xml:space="preserve">
    <value>Specifies if the click event is processed when the current WebPropertyEditor is displayed within the grid control.</value>
  </data>
  <data name="WebPropertyEditorTestControl" xml:space="preserve">
    <value>For internal use only.</value>
  </data>
  <data name="WebPropertyEditorClientId" xml:space="preserve">
    <value>For internal use.</value>
  </data>
  <data name="WebPropertyEditorTestCaption" xml:space="preserve">
    <value>For internal use only.</value>
  </data>
  <data name="IModelOptionsStateStoreSaveListViewStateInCookies" xml:space="preserve">
    <value>Specifies whether the application can use the browser cookie storage to persist List View settings.</value>
  </data>
  <data name="IModelListViewStateStoreSaveStateInCookies" xml:space="preserve">
    <value>Specifies whether the List View settings are persisted in cookies when the browser cookie storage is enabled.</value>
  </data>
  <data name="IModelListViewWebShowSelectionColumn" xml:space="preserve">
    <value>Specifies whether selection checkboxes are displayed for the records in the ASPxGridListEditor. When selection checkboxes are hidden, the Delete Actions are displayed instead of checkboxes.</value>
  </data>
  <data name="IModelListViewWebInlineEditMode" xml:space="preserve">
    <value>Specifies the way cell values are edited.</value>
  </data>
  <data name="IModelListViewWebPageSize" xml:space="preserve">
    <value>Specifies the number of records displayed on a List Editor page.</value>
  </data>
  <data name="IModelOptionsWebListViewAllowSort" xml:space="preserve">
    <value>Specifies whether end-users can sort data.</value>
  </data>
  <data name="IModelOptionsWebListViewEnablePageSizeChooser" xml:space="preserve">
    <value>Specifies whether the page size chooser is enabled.</value>
  </data>
  <data name="IModelOptionsWebListViewEnableColumnChooser" xml:space="preserve">
    <value>Specifies whether the column chooser is enabled.</value>
  </data>
  <data name="IModelOptionsWebCollectionsEditMode" xml:space="preserve">
    <value>Specifies the application's mode of operation, with respect to the display of nested List Views.</value>
  </data>
  <data name="IModelOptionsWebConfirmUnsavedChanges" xml:space="preserve">
    <value>Specifies whether or not a confirmation dialog is displayed by browser when there are unsaved changes and a user closes the browser tab or clicks an Action whose execution may lead to loss of unsaved data.</value>
  </data>
  <data name="IModelActionWebIsPostBackRequired" xml:space="preserve">
    <value>Specifies whether a postback should be performed when the Action is executed.</value>
  </data>
  <data name="IModelActionWebAdaptivePriority" xml:space="preserve">
    <value>Specifies the Action's priority with regards to the adaptive layout used in the new web UI (see SwitchToNewStyle). Actions with a lower AdaptivePriority value remain visible when the browser window shrinks, while Actions with a higher priority become hidden. </value>
  </data>
  <data name="IModelActionWebConfirmUnsavedChanges" xml:space="preserve">
    <value>Specifies whether or not a confirmation dialog is displayed by a browser when there are unsaved changes and a user executes the current Action.</value>
  </data>
  <data name="WebModificationsControllerEditAction" xml:space="preserve">
    <value>Provides access to the SwitchToEditMode Action.</value>
  </data>
  <data name="WebApplicationRequestManager" xml:space="preserve">
    <value>Gets the HTTP request manager.</value>
  </data>
  <data name="WebApplicationControlsCreating" xml:space="preserve">
    <value>Occurs before creating controls for the Web Forms page.</value>
  </data>
</root>