#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{       eXpressApp Framework                                        }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using DevExpress.ExpressApp.Utils;
using DevExpress.ExpressApp.Utils.Reflection;
namespace DevExpress.ExpressApp.Model.Core {
	[Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
	public static class ModelInterfacesHelper {
		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
		public static bool IsTypeSuitableToGenerateClass(Type type) {
			Guard.ArgumentNotNull(type, "type");
			if(type.IsInterface && !type.IsGenericType) {
				foreach(Type baseInterface in TypeHelper.GetInterfaces(type)) {
					if(baseInterface == typeof(IModelNode)) {
						return true;
					}
				}
			}
			return false;
		}
		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
		public static bool IsGenericListType(Type type) {
			Guard.ArgumentNotNull(type, "type");
			if(type.IsInterface && type.IsGenericType) {
				Type definition = type.GetGenericTypeDefinition();
				return definition == typeof(IModelList<>) || definition == typeof(IList<>) || definition == typeof(ICollection<>);
			}
			return false;
		}
	}
	[Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
	public static class ModelAutoGeneratedRuleNodesHelper {
		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never)]
		public static Type GetAssociatedDomainComponentType(Type ruleNodeType) {
			Guard.ArgumentNotNull(ruleNodeType, "ruleNodeType");
			foreach(Type baseInterface in ruleNodeType.GetInterfaces()) {
				if(baseInterface.GetCustomAttributes(typeof(DevExpress.ExpressApp.DC.DomainComponentAttribute), true).Length > 0) {
					return baseInterface;
				}
			}
			return null;
		}
	}
}
