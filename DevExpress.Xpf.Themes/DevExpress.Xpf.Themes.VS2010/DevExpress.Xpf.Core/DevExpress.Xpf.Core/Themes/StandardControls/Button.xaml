<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" 
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" 
                    xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal">

    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2010.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Themes/StandardControls/Brushes.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.VS2010.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Themes/StandardControls/SharedResources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Visibility x:Key="Visible">Visible</Visibility>
    <dxcn:RenderTemplate x:Key="{dxdst:ButtonThemeKey ResourceKey=RenderTemplate}">
        <dxcn:RenderPanel>
            <dxcn:RenderBorder Name="Outer" BorderBrush="{StaticResource Button.DefaultState.Border1}" BorderThickness="1" CornerRadius="3" Background="{StaticResource Button.DefaultState.Border2}">
                <dxcn:RenderBorder Name="Inner" Background="{StaticResource Button.DefaultState.Border3}" CornerRadius="1" Margin="1"/>
            </dxcn:RenderBorder>
            <dxcn:RenderBorder Name="Focused" BorderBrush="#80FFCC00" BorderThickness="2" CornerRadius="2" Visibility="Collapsed"/>
            <dxcn:RenderPanel Name="RenderPanel" >
                <dxcn:RenderPanel Margin="2" LayoutProvider="{dxcn:DockPanelLayoutProvider LastChildFill=True}">
                    <dxcn:RenderImage Name="Image" Dock="Left" Stretch="None" VerticalAlignment="Center"/>
                    <dxcn:RenderBorder Name="OffsetBorder"/>
                    <dxcn:RenderContentPresenter Name="ContentPresenter" Dock="Right"/>
                </dxcn:RenderPanel>
            </dxcn:RenderPanel>
        </dxcn:RenderPanel>
        <dxcn:RenderTemplate.Triggers>
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.GlyphProperty}" TargetName="Image" TargetProperty="Source"/>
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.GlyphToContentOffsetProperty}" TargetName="OffsetBorder" TargetProperty="Width"/>
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.ContentProperty}" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.ContentTemplateProperty}" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.ContentTemplateSelectorProperty}" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.VerticalContentAlignmentProperty}" TargetProperty="VerticalAlignment" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.HorizontalContentAlignmentProperty}" TargetProperty="HorizontalAlignment" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.PaddingProperty}" TargetProperty="Margin" TargetName="RenderPanel" />
            <dxcn:MultiRenderTrigger>
                <dxcn:MultiRenderTrigger.Conditions>
                    <dxcn:RenderConditionGroup Operator="Or">
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.GlyphProperty}" Value="{x:Null}"/>
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.ContentProperty}" Value="{x:Null}"/>
                    </dxcn:RenderConditionGroup>
                </dxcn:MultiRenderTrigger.Conditions>
                <dxcn:RenderSetter Property="Visibility" TargetName="OffsetBorder" Value="Collapsed"/>
            </dxcn:MultiRenderTrigger>
            <!--mouseover-->
            <dxcn:MultiRenderTrigger>
                <dxcn:MultiRenderTrigger.Conditions>
                    <dxcn:RenderConditionGroup Operator="Or">
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static FrameworkElement.IsMouseOverProperty}" Value="True" />
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static Button.IsDefaultedProperty}" Value="True" FallbackIsValid="True"/>
                    </dxcn:RenderConditionGroup>
                    <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" Value="False" />
                    <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="False" />
                </dxcn:MultiRenderTrigger.Conditions>
                <dxcn:RenderSetter TargetName="Outer" Property="BorderBrush" Value="{StaticResource Button.HoverState.Border1}"/>
                <dxcn:RenderSetter TargetName="Outer" Property="Background" Value="{StaticResource Button.HoverState.Border2}"/>
                <dxcn:RenderSetter TargetName="Inner" Property="Background" Value="{StaticResource Button.HoverState.Border3}"/>
            </dxcn:MultiRenderTrigger>
            <!--pressed-->
            <dxcn:MultiRenderTrigger>
                <dxcn:MultiRenderTrigger.Conditions>
                    <dxcn:RenderConditionGroup Operator="Or">
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" Value="True" />
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True" />
                    </dxcn:RenderConditionGroup>
                </dxcn:MultiRenderTrigger.Conditions>
                <dxcn:RenderSetter TargetName="Outer" Property="BorderBrush" Value="{StaticResource Button.PressedState.Border1}"/>
                <dxcn:RenderSetter TargetName="Outer" Property="Background" Value="{StaticResource Button.PressedState.Border2}"/>
                <dxcn:RenderSetter TargetName="Inner" Property="Background" Value="{StaticResource Button.PressedState.Border3}"/>
                <dxcn:RenderSetter TargetName="Inner" Property="Margin" Value="1,1,1,0"/>
            </dxcn:MultiRenderTrigger>
            <!--focus-->
            <dxcn:MultiRenderTrigger>
                <dxcn:MultiRenderTrigger.Conditions>
                    <dxcn:RenderConditionGroup Operator="Or">
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static FrameworkElement.IsFocusedProperty}" Value="True" />
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static Button.IsDefaultedProperty}" Value="True" FallbackIsValid="True" />
                    </dxcn:RenderConditionGroup>
                </dxcn:MultiRenderTrigger.Conditions>
                <dxcn:RenderSetter Property="Visibility" TargetName="Focused" Value="{StaticResource Visible}" />
            </dxcn:MultiRenderTrigger>            
        </dxcn:RenderTemplate.Triggers>
    </dxcn:RenderTemplate>

    <Style x:Key="ButtonThemeKey_ButtonControlStyle" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{StaticResource Button.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource Button.BorderBrush}" />
        <Setter Property="Foreground" Value="{StaticResource Text.Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="10,1,10,1" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value> 
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <dxcn:Chrome x:Name="Chrome" RenderTemplate="{StaticResource {dxdst:ButtonThemeKey ResourceKey=RenderTemplate}}"/>
                    <ControlTemplate.Triggers>           
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Chrome" Property="Opacity" Value="0.5" />
                        </Trigger>                      
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=System.Windows.Controls.Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonThemeKey_ButtonControlStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=System.Windows.Controls.Primitives.ToggleButton}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ButtonThemeKey_ButtonControlStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=System.Windows.Controls.Primitives.RepeatButton}" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource ButtonThemeKey_ButtonControlStyle}" />
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.SimpleButton}" TargetType="{x:Type dx:SimpleButton}" BasedOn="{StaticResource ButtonThemeKey_ButtonControlStyle}">
        <Setter Property="GlyphToContentOffset" Value="10"/>
    </Style>
</ResourceDictionary>