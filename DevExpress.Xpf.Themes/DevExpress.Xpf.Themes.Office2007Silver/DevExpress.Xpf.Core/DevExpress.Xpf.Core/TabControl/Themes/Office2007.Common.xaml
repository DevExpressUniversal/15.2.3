<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:cs="colorscheme_ignorable_uri" mc:Ignorable="cs">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Generic.xaml" />
        <ResourceDictionary Source="Generic.Window.xaml" />
        <ResourceDictionary Source="Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>
    
    <!--Tab Button Background Templates-->
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonNormalBackground}">
        <Border Background="{StaticResource Button.Normal.Background}"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonHoverBackground}">
        <Border Background="{StaticResource Button.Hover.BorderBrush1}" CornerRadius="2">
            <Border CornerRadius="1" Margin="1" Background="{StaticResource Button.Hover.BorderBrush2}">
                <Border CornerRadius="1" Margin="1" Background="{StaticResource Button.Hover.Background}"/>
            </Border>
        </Border>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonPressedBackground}">
        <Border Background="{StaticResource Button.Pressed.BorderBrush1}" CornerRadius="2">
            <Border CornerRadius="1" Margin="1" Background="{StaticResource Button.Pressed.BorderBrush2}">
                <Border CornerRadius="1" Margin="1" Background="{StaticResource Button.Pressed.Background}"/>
            </Border>
        </Border>
    </DataTemplate>
    <!--Tab Button Styles-->
    <Style x:Key="HeaderPanelButtonStyle" BasedOn="{StaticResource ButtonDefaultStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="2,0,2,0"/>
        <Setter Property="Width" Value="17" />
        <Setter Property="Height" Value="17" />
        <Setter Property="Foreground" Value="{StaticResource ScrollButton.Normal.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ScrollButton.Hover.Foreground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ScrollButton.Pressed.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CloseButtonStyle" BasedOn="{StaticResource ButtonDefaultStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{StaticResource CloseButton.Normal.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CloseButton.Hover.Foreground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource CloseButton.Pressed.Foreground}"/>
            </Trigger>
        </Style.Triggers> 
    </Style>
    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource CloseButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Margin" Value="7,1,-4,0"/>
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
       
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="5,0,4,0"/>
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MainNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PrevButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0, GlyphLeftPadding='0,0,1,0'}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=NextButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0, GlyphRightPadding='1,0,0,0'}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MenuButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <!--TabControl and TabItem Background Templates-->
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=Background}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderBackground="{StaticResource TabControl.Background}" BorderThickness="1" BorderMode="BorderBrush"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=NormalBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderBackground="{StaticResource TabItem.Normal.BorderBrush}" BorderThickness="1,1,1,0" BorderMargin="0,0,-1,0" HoldBorderThickness="1" HoldBorderMargin="0,0,1,1" 
                        BorderMode="BorderBrush" BackgroundMode="BorderBackground" CustomBackgroundBrightness="0.45">
            <dxcn:TabBorder BorderBackground="{StaticResource TabItem.Normal.Background}" BorderMargin="1" BackgroundMode="BorderBackground" CustomBackgroundBrightness="-0.1"/>
        </dxcn:TabBorder>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=HoverBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderBackground="{StaticResource TabItem.Hover.BorderBrush}" BorderThickness="1,1,1,0" BorderMargin="0,0,-1,0" HoldBorderThickness="1" HoldBorderMargin="0,0,1,1" 
                        BorderMode="BorderBrush" BackgroundMode="BorderBackground" CustomBackgroundBrightness="0.45">
            <dxcn:TabBorder BorderBackground="{StaticResource TabItem.Hover.Background}" BorderMargin="1" BackgroundMode="BorderBackground" LeaveOriginBackgroundColor="False" CustomBackgroundBrightness="0.4"/>
        </dxcn:TabBorder>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=SelectedBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderBackground="{StaticResource TabControl.Background}"
                        BorderThickness="1,1,1,0" BorderMargin="0,-2,-1,-1" HoldBorderThickness="1" HoldBorderMargin="0,0,1,1" BorderMode="BorderBrush"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=FocusedBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBackground="{StaticResource TabItem.Focused.Background}"
                        BorderMargin="2,0,1,0" HoldBorderMargin="1,1,2,2" BackgroundMode="BorderBackground" LeaveOriginBackgroundColor="False">
            <dxcn:TabBorder.BorderOpacityMask>
                <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                    <GradientStop Color="Black" Offset="0" />
                    <GradientStop Color="Transparent" Offset="0.95" />
                </LinearGradientBrush>
            </dxcn:TabBorder.BorderOpacityMask>
        </dxcn:TabBorder>
    </DataTemplate>
    <!--TabControl and TabItem Styles-->
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelContainerStyle}" BasedOn="{StaticResource PanelContainerDefaultStyle}" TargetType="{x:Type dxcn:TabPanelContainer}">
        <Setter Property="NormalMargin" Value="4,0,2,-1" />
        <Setter Property="NormalPadding" Value="0,2,1,1" />
        <Setter Property="HoldMargin" Value="-1,0,-1,0" />
        <Setter Property="HoldPadding" Value="1,0,0,0" />
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabControl}" TargetType="{x:Type dx:DXTabControl}" BasedOn="{StaticResource TabControlDefaultStyle}">
        <Setter Property="Padding" Value="12"/>
        <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}"/>
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabItem}" TargetType="{x:Type dx:DXTabItem}" BasedOn="{StaticResource TabItemDefaultStyle}">
        <Setter Property="Padding" Value="9,3,9,3"/>
        <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ViewInfo.IsHeaderOrientationDifferent, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Padding" Value="8,4,8,4"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=SeparatorStyle}" TargetType="{x:Type ContentPresenter}" >
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>


    <!--TabbedWindow-->
    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=HeaderTemplate}">
        <Border x:Name="border" Background="{StaticResource Window.Header.Active.Background}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter TargetName="border" Property="Background" Value="{StaticResource Window.Header.InActive.Background}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=BorderTemplate}">
        <Border x:Name="border" BorderThickness="1" BorderBrush="{StaticResource Window.Border.Active.BorderBrush}" Background="{StaticResource Window.Border.Active.Background}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Window.Border.InActive.BorderBrush}"/>
                <Setter Property="Background" TargetName="border" Value="{StaticResource Window.Border.InActive.Background}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MainContainerStyle}" TargetType="Panel">
        <Setter Property="Margin" Value="1"/>
    </Style>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CaptionPresenterStyle}" TargetType="ContentPresenter">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ContentBorderStyle}" TargetType="Border">
        <Setter Property="Margin" Value="4,0,4,4"/>
    </Style>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}" TargetType="ItemsControl" BasedOn="{StaticResource DefaultButtonContainerStyle}">
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="WindowButtonStyle" TargetType="Button" BasedOn="{StaticResource WindowButtonDefaultStyle}">
        <Setter Property="Width" Value="22"/>
        <Setter Property="Height" Value="22"/>
    </Style>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MinimizeButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=RestoreButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MaximizeButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CloseButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
</ResourceDictionary>