<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:dxeh="http://schemas.devexpress.com/winfx/2008/xaml/editors/internal" xmlns:dxet="http://schemas.devexpress.com/winfx/2008/xaml/editors/themekeys" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:sys="clr-namespace:System;assembly=mscorlib" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">

    <!--BEGIN WPF-->
    <ResourceDictionary.MergedDictionaries>
        <dxtEx:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.LightGray.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/LightGray/Brushes.xaml" />
        <dxtEx:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.LightGray.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Editors/Themes/Generic/CheckEdit.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!--END WPF-->



    <!--BEGIN WPF-->
    <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=NormalCheckEditBoxTemplate}" TargetType="{x:Type dxe:CheckEditBox}">
    <!--END WPF-->
    <!--ONLY SL<ControlTemplate x:Key="CheckEditThemeKey_CheckEditBoxTemplate" TargetType="dxe:CheckEditBox">ONLY SL-->
        <Grid VerticalAlignment="Center" SnapsToDevicePixels="True" Background="Transparent">
            <Grid.Resources>
                <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
                <Visibility x:Key="VisibilityVisible">Visible</Visibility>
                <!--ONLY SL
                <dx:EnumToObjectConverter x:Key="EnumToObjectConverter">
                    <dx:EnumToObjectConverter.Values>
                        <dx:EnumObjectProvider x:Key="LeftToRight" Value="{x:Null}" />
                        <ScaleTransform x:Key="RightToLeft" CenterX="7" CenterY="0" ScaleX="-1" ScaleY="1" />
                    </dx:EnumToObjectConverter.Values>
                </dx:EnumToObjectConverter>
                ONLY SL-->
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="MouseOver">
                        <Storyboard>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFBEDAF9" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFD3E6FB" />
                            </ColorAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Offset)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFBBBDC1" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFE1E2E4" />
                            </ColorAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Offset)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Disabled">
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="CheckElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="CheckElement" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFACAFB4" />
                            </ColorAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="IndeterminateElement" Storyboard.TargetProperty="(UIElement.Opacity)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="IndeterminateElement" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFACAFB4" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFADB0B5" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[3].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFADB0B5" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border1" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFADB0B5" />
                            </ColorAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[1].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFEEEEEE" />
                            </ColorAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Offset)">
                                <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                            </DoubleAnimationUsingKeyFrames>
                            <ColorAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="border" Storyboard.TargetProperty="(Border.Background).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                <SplineColorKeyFrame KeyTime="00:00:00" Value="#FFEDEDED" />
                            </ColorAnimationUsingKeyFrames>
                            <DoubleAnimation Duration="0" Storyboard.TargetName="contentPresenter" Storyboard.TargetProperty="Opacity" To="0.35" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="CheckStates">
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="CheckElement" Storyboard.TargetProperty="Visibility">
                                <ObjectAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VisibilityVisible}" />
                                </ObjectAnimationUsingKeyFrames.KeyFrames>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Unchecked" />
                    <VisualState x:Name="Indeterminate">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="IndeterminateElement" Storyboard.TargetProperty="Visibility">
                                <ObjectAnimationUsingKeyFrames.KeyFrames>
                                    <DiscreteObjectKeyFrame KeyTime="0" Value="{StaticResource VisibilityVisible}" />
                                </ObjectAnimationUsingKeyFrames.KeyFrames>
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="InternalFocusStates">
                    <VisualState x:Name="InternalFocused">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="FocusElement" Storyboard.TargetProperty="Opacity" Duration="0" To="0.75" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="InternalUnfocused" />
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid x:Name="checkbox" Height="19" Width="15">       
                <!--ONLY SL
                <Grid.RenderTransform>
                    <Binding Path="FlowDirection" Converter="{StaticResource EnumToObjectConverter}" RelativeSource="{RelativeSource TemplatedParent}" />
                </Grid.RenderTransform>
                ONLY SL-->
                <Border x:Name="FocusElement" Margin="-2,0" Opacity="0" Background="#FFADCCF7" CornerRadius="3" />
                <Border CornerRadius="2,2,2,2" Width="Auto" Height="Auto" Margin="0,2,0,2" Padding="1" x:Name="border1">
                    <Border.Background>
                        <LinearGradientBrush EndPoint="0.5,1.003" StartPoint="0.5,-0.003">
                            <GradientStop Color="#FF414345" Offset="0" />
                            <GradientStop Color="#FFADB0B5" Offset="1" />
                            <GradientStop Color="#FF424347" Offset="0.178" />
                            <GradientStop Color="#FF7E8288" Offset="0.679" />
                        </LinearGradientBrush>
                    </Border.Background>
                    <Border CornerRadius="1,1,1,1" Padding="0,0,0,0" x:Name="border">
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1.003" StartPoint="0.5,-0.003" MappingMode="RelativeToBoundingBox">
                                <GradientStop Color="#FFD6D6D6" Offset="0" />
                                <GradientStop Color="#FFFFFFFF" Offset="1" />
                            </LinearGradientBrush>
                        </Border.Background>
                    </Border>
                </Border>
                <Rectangle x:Name="IndeterminateElement" Fill="#FF343537" IsHitTestVisible="False" HorizontalAlignment="Center" VerticalAlignment="Center" Width="9" Height="3" Grid.Column="0" Visibility="Collapsed" />
                <Path x:Name="CheckElement" Stretch="Fill" Fill="#FF343537" IsHitTestVisible="False" Data="F1 M 402,283L 401,283C 401,283 397,287 394,293C 393,292 391,290 391,290L 390,290C 390,290 393,294 394,298L 395,298C 396,294 398,288 402,283 Z" Margin="1,-1,0,3" Width="12" Height="15" Visibility="Collapsed" />
            </Grid>            
            <ContentPresenter Name="contentPresenter" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" Visibility="{Binding HasContent, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" RecognizesAccessKey="True">
            </ContentPresenter>
        </Grid> 
        <ControlTemplate.Triggers>
            <Trigger Property="FlowDirection" Value="RightToLeft">
                <Setter Property="LayoutTransform" TargetName="checkbox">
                    <Setter.Value>
                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="-1" ScaleY="1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>    
    <Style BasedOn="{StaticResource BaseCheckEditBoxStyle}" x:Key="{dxet:CheckEditThemeKey ResourceKey=CheckEditBoxStyle}" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="BorderThickness" Value="1,1,1,1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{Binding Path=(dxe:BaseEdit.OwnerEdit).FocusVisualStyle, RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="Template" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxTemplate}}" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style BasedOn="{StaticResource BaseCheckEditBoxInplaceStyle}" x:Key="{dxet:CheckEditThemeKey ResourceKey=CheckEditBoxInplaceStyle}" TargetType="{x:Type dxe:CheckEditBox}">
        <Setter Property="BorderThickness" Value="1" />
		<Setter Property="Margin" Value="0,-2,0,-2" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template" Value="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxTemplate}}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
    </Style>

    <Thickness x:Key="{dxet:CheckEditThemeKey ResourceKey=Padding}">0,1,0,1</Thickness>

    <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=EditTemplate}">
        <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=DisplayInplaceTemplate}">
        <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxInplaceStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=EditInplaceTemplate}">
        <dxe:CheckEditBox x:Name="PART_Editor" Style="{DynamicResource {dxet:CheckEditThemeKey ResourceKey=CheckEditBoxInplaceStyle}}" />
    </ControlTemplate>

    <ControlTemplate x:Key="{dxet:CheckEditThemeKey ResourceKey=Template}" TargetType="{x:Type dxe:CheckEdit}">
        <dxe:EditorControl Grid.Column="0" x:Name="PART_Content" SnapsToDevicePixels="True" Template="{TemplateBinding ActualEditorControlTemplate}">
            <!--ONLY SL
            <dxe:EditorControl.Resources>
                <dx:EnumToObjectConverter x:Key="EnumToObjectConverter">
                    <dx:EnumToObjectConverter.DefaultValue>
                        <HorizontalAlignment>Stretch</HorizontalAlignment>
                    </dx:EnumToObjectConverter.DefaultValue>
                    <dx:EnumToObjectConverter.Values>
                        <dx:EnumObjectProvider x:Key="InpaceActive">
                            <dx:EnumObjectProvider.Value>
                                <HorizontalAlignment>Center</HorizontalAlignment>
                            </dx:EnumObjectProvider.Value>
                        </dx:EnumObjectProvider>
                        <dx:EnumObjectProvider x:Key="InpaceInactive">
                            <dx:EnumObjectProvider.Value>
                                <HorizontalAlignment>Center</HorizontalAlignment>
                            </dx:EnumObjectProvider.Value>
                        </dx:EnumObjectProvider>
                    </dx:EnumToObjectConverter.Values>
                </dx:EnumToObjectConverter>
            </dxe:EditorControl.Resources>
            <dxe:EditorControl.HorizontalAlignment>
                <Binding Path="EditMode" RelativeSource="{RelativeSource TemplatedParent}" Converter="{StaticResource EnumToObjectConverter}"/>
            </dxe:EditorControl.HorizontalAlignment>
            ONLY SL-->
        </dxe:EditorControl>
        <ControlTemplate.Triggers>
            <Trigger Property="EditMode" Value="InplaceInactive">
                <Setter Property="HorizontalAlignment" Value="Center" />
            </Trigger>
            <Trigger Property="EditMode" Value="InplaceActive">
                <Setter Property="HorizontalAlignment" Value="Center" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

</ResourceDictionary>