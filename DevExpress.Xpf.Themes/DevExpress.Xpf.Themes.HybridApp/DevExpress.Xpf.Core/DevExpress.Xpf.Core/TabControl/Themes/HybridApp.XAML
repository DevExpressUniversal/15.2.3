<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
                    xmlns:dxt="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys"
                    xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:cs="colorscheme_ignorable_uri" mc:Ignorable="cs">
    
    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/TabControl/Themes/Generic.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/TabControl/Themes/Generic.Window.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--Tab Button Background Templates-->
    <SolidColorBrush x:Key="Button.Normal.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Button.Hover.Background" Color="#FFE0E5F2"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFE3E3E3"/>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonNormalBackground}">
        <Border Background="{StaticResource Button.Normal.Background}"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonHoverBackground}">
        <Border Background="{StaticResource Button.Hover.Background}"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonPressedBackground}">
        <Border Background="{StaticResource Button.Pressed.Background}"/>
    </DataTemplate>

    <!--Tab Button Styles-->
    <Style x:Key="TabControlGlyphCotnrolStyle" BasedOn="{StaticResource TabControlGlyphDefaultStyle}" TargetType="{x:Type dxcn:GlyphControl}">
        <Setter Property="GlyphCloseTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="dxcn:GlyphControl">
                    <Path x:Name="PART_Path" Stretch="Fill" Height="6" Width="8" Fill="{TemplateBinding Background}" Margin="{TemplateBinding Padding}"
                          Data="F1 M 1220,881L 1222,881L 1218,885L 1222,889L 1220,889L 1217,886L 1214,889L 1212,889L 1216,885L 1212,881L 1214,881L 1217,884L 1220,881 Z "/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="Button.Normal.Foreground" Color="#FF404040"/>
    <SolidColorBrush x:Key="Button.Hover.Foreground" Color="#FF2A8DD4"/>
    <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="#FF2F51A5"/>
    <Style x:Key="ButtonStyle" BasedOn="{StaticResource ButtonDefaultStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{StaticResource Button.Normal.Foreground}"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <dxcn:GlyphControl Style="{StaticResource TabControlGlyphCotnrolStyle}" GlyphViewInfo="{Binding}" Background="{Binding (TextBlock.Foreground), RelativeSource={RelativeSource Self}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Button.Hover.Foreground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Button.Pressed.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HeaderPanelButtonStyle" BasedOn="{StaticResource ButtonStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="2,0,2,0"/>
        <Setter Property="Width" Value="17" />
        <Setter Property="Height" Value="17" />
    </Style>
    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource ButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Margin" Value="7,0,-3,0"/>
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="4,0,4,0"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MainNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PrevButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=NextButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=0}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MenuButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=1}"/>
    </Style>

    <!--TabControl and TabItem Background Templates-->
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=Background}">
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=NormalBackground}">
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=HoverBackground}">
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=SelectedBackground}">
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=FocusedBackground}">
    </DataTemplate>

    <!--TabControl and TabItem Styles-->
    <SolidColorBrush x:Key="TabControl.Foreground" Color="#FF191919"/>
    <SolidColorBrush x:Key="TabItem.Normal.Foreground" Color="#FF666666"/>
    <SolidColorBrush x:Key="TabItem.Focused.Foreground" Color="#FF1B49A5"/>
    <SolidColorBrush x:Key="TabItem.Selected.Foreground" Color="#FF1B49A5"/>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelContainerStyle}" BasedOn="{StaticResource PanelContainerDefaultStyle}" TargetType="{x:Type dxcn:TabPanelContainer}">
        <Setter Property="NormalMargin" Value="8,0,8,0" />
        <Setter Property="NormalPadding" Value="0,0,0,0" />
        <Setter Property="HoldMargin" Value="0,0,0,0" />
        <Setter Property="HoldPadding" Value="0,0,0,0" />
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabControl}" TargetType="{x:Type dx:DXTabControl}" BasedOn="{StaticResource TabControlDefaultStyle}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}"/>
        <Setter Property="dxcn:DXTabControlLastItemBehavior.IsEnabled" Value="True" />
    </Style>
    <Style x:Key="{dxdst:DefaultStyleThemeKey FullName=DevExpress.Xpf.Core.DXTabItem}" TargetType="{x:Type dx:DXTabItem}" BasedOn="{StaticResource TabItemDefaultStyle}">
        <Setter Property="Padding" Value="0,3,9,3"/>
        <Setter Property="FontSize" Value="17"/>
        <Setter Property="Foreground" Value="{StaticResource TabItem.Normal.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource TabItem.Focused.Foreground}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{StaticResource TabItem.Selected.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=SeparatorStyle}" TargetType="{x:Type ContentPresenter}" >
        <Setter Property="Visibility" Value="{Binding Path=(dxcn:DXTabControlLastItemBehavior.IsLastItem), RelativeSource={RelativeSource TemplatedParent}, Converter={dxmvvm:BooleanToVisibilityConverter Inverse=True}}"/>
        <Setter Property="Content" Value="|"/>
        <Setter Property="Margin" Value="9,0,9,0"/>
        <Setter Property="TextBlock.Foreground" Value="{StaticResource TabItem.Normal.Foreground}"/>
    </Style>


    <!--TabbedWindow-->
    <SolidColorBrush x:Key="Window.Header.Active.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Window.Header.InActive.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Window.Border.Active.BorderBrush" Color="#FF3F3F3F"/>
    <SolidColorBrush x:Key="Window.Border.Active.Background" Color="#FF3F3F3F"/>
    <SolidColorBrush x:Key="Window.Border.InActive.BorderBrush" Color="#FF7F7F7F"/>
    <SolidColorBrush x:Key="Window.Border.InActive.Background" Color="#FF3F3F3F"/>

    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=HeaderTemplate}">
        <Border x:Name="border" Background="{StaticResource Window.Header.Active.Background}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter TargetName="border" Property="Background" Value="{StaticResource Window.Header.InActive.Background}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=BorderTemplate}">
        <Border x:Name="border" BorderThickness="1" BorderBrush="{StaticResource Window.Border.Active.BorderBrush}" Background="{StaticResource Window.Border.Active.Background}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Window.Border.InActive.BorderBrush}"/>
                <Setter TargetName="border" Property="Background" Value="{StaticResource Window.Border.InActive.Background}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MainContainerStyle}" TargetType="Panel">
        <Setter Property="Margin" Value="1"/>
    </Style>

    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CaptionPresenterStyle}" TargetType="ContentPresenter">
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="Margin" Value="6,0,6,0"/>
    </Style>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ContentBorderStyle}" TargetType="Border">
        <Setter Property="Margin" Value="5,0,5,5"/>
    </Style>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}" TargetType="ItemsControl" BasedOn="{StaticResource DefaultButtonContainerStyle}">
        <Setter Property="Margin" Value="0,0,3,0"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WindowButtonStyle" TargetType="Button" BasedOn="{StaticResource WindowButtonDefaultStyle}">
        <Setter Property="Width" Value="27"/>
        <Setter Property="Height" Value="26"/>
    </Style>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MinimizeButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=RestoreButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MaximizeButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CloseButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonStyle}"/>
   
</ResourceDictionary>