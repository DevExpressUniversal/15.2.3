<ResourceDictionary mc:Ignorable="cs" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/core" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars" xmlns:dxbt="http://schemas.devexpress.com/winfx/2008/xaml/bars/themekeys" xmlns:dxcn="http://schemas.devexpress.com/winfx/2008/xaml/core/internal" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:cs="colorscheme_ignorable_uri" xmlns:dxdst="http://schemas.devexpress.com/winfx/2008/xaml/core/themekeys">
    <!--BEGIN WPF-->
    <ResourceDictionary.MergedDictionaries>
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarButtonItem.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarCheckItem.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarEditItem.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarItemSeparator.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarSplitButtonItem.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarSplitCheckItem.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarStaticItem.xaml" />
        <dxdst:ResourceDictionaryEx Source="/DevExpress.Xpf.Themes.HybridApp.v15.2;component/DevExpress.Xpf.Core/DevExpress.Xpf.Core/Bars/Themes/HybridApp/BarSubItem.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <!--END WPF-->
    <Thickness x:Key="{dxbt:BarItemThemeKey ResourceKey=Margin}">1</Thickness>
    <Thickness x:Key="{dxbt:BarItemThemeKey ResourceKey=InMenuClientPadding}">0</Thickness>
    <Thickness x:Key="{dxbt:BarItemThemeKey ResourceKey=InMenuContentMargin}">5,3,15,3</Thickness>
    <Thickness x:Key="{dxbt:BarItemThemeKey ResourceKey=InMenuKeyGestureMargin}">5,3,15,3</Thickness>
    <ControlTemplate x:Key="{dxbt:BarItemBorderThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FFE0E5F2" BorderThickness="0,1,0,1"   />
                </Border>
                <Border x:Name="PressedState" Background="#FFE3E3E3" BorderThickness="0,1,0,1" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#7FFFFFFF" BorderBrush="#FFE3E3E3" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom" />
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.5" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked" />
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemBorderInRibbonPageGroupThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FFE0E5F2"   />
                </Border>
                <Border x:Name="PressedState" Background="#FFE3E3E3" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#7FFFFFFF" BorderBrush="#FFE3E3E3" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="0,0,0,1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.5" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemBorderInButtonGroupThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid Margin="-1" SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FFE0E5F2"   />
                </Border>
                <Border x:Name="PressedState" Background="#FFE3E3E3" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#7FFFFFFF" BorderBrush="#FFE3E3E3" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom" />
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.5" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemBorderInMainMenuThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FFE0E5F2"   />
                </Border>
                <Border x:Name="PressedState" Background="#FFE0E5F2" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#7FFFFFFF" BorderBrush="#FFE3E3E3" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom" />
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.9" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemBorderInMenuThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FFE0E5F2"   />
                </Border>
                <Border x:Name="PressedState" Background="#FFE0E5F2" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#7FFFFFFF" BorderBrush="#FFE3E3E3" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom" />
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.9" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FF2A8DD4"   />
                </Border>
                <Border x:Name="PressedState" Background="#FF0067B0" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#FF2A8DD4" BorderBrush="#FF0067B0" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom" />
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.9" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FF2A8DD4"   />
                </Border>
                <Border x:Name="PressedState" Background="#FF0067B0" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#FF2A8DD4" BorderBrush="#FF0067B0" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom" />
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.9" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemBorderInStatusBarThemeKey ResourceKey=Normal}" TargetType="{x:Type dxb:ItemBorderControl}">
        <Grid SnapsToDevicePixels="True">
            <Grid x:Name="States">
                <Border x:Name="HoverState" Opacity="0">
                    <Border x:Name="hover" Background="#FF2A8DD4"   />
                </Border>
                <Border x:Name="PressedState" Background="#FF0067B0" Opacity="0"   />
                <Border x:Name="CustomizationState" Background="#FF2A8DD4" BorderBrush="#FF0067B0" BorderThickness="1" Opacity="0"   />
            </Grid>
            <VisualStateManager.VisualStateGroups>
                <VisualStateGroup x:Name="HideBorderSide">
                    <VisualState x:Name="None" />
                    <VisualState x:Name="Left">
                        <Storyboard>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="States" Storyboard.TargetProperty="(Border.Margin)" dxcn:ValueSetter.Thickness="1,0,0,0" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Right" />
                    <VisualState x:Name="Top" />
                    <VisualState x:Name="Bottom" />
                    <VisualState x:Name="All" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ArrowHideBorderSide">
                    <VisualState x:Name="ArrowNone" />
                    <VisualState x:Name="ArrowLeft" />
                    <VisualState x:Name="ArrowTop" />
                    <VisualState x:Name="ArrowRight" />
                    <VisualState x:Name="ArrowBottom" />
                    <VisualState x:Name="ArrowAll" />
                </VisualStateGroup>
                <VisualStateGroup x:Name="ActiveState">
                    <VisualState x:Name="Active">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Inactive">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="hover" Storyboard.TargetProperty="Opacity" Duration="0" To="0.9" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
                <VisualStateGroup x:Name="State">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Hover">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Pressed">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="PressedState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="Checked">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="HoverState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                    <VisualState x:Name="HoverChecked" />
                    <VisualState x:Name="Focused" />
                    <VisualState x:Name="Customization">
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="CustomizationState" Storyboard.TargetProperty="Opacity" Duration="0" To="1" />
                        </Storyboard>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
        </Grid>
    </ControlTemplate>
    <!--BEGIN WPF-->
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InMenuTemplate}" TargetType="{x:Type Control}">
        <Grid SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Width="{Binding Path=InMenuContentOffset, RelativeSource={RelativeSource TemplatedParent}}" />
            <Border Background="#FFDDDDDD" Height="1" VerticalAlignment="Center" Margin="7,0,2,0" Grid.Column="1" SnapsToDevicePixels="True"   />
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FFDDDDDD" Width="1" Margin="1,5,1,5"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonStatusBarRightPartTemplate}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FF2A8DD4" Width="1" Margin="1,2,1,2"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonStatusBarLeftPartTemplate}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FF2A8DD4" Width="1" Margin="1,2,1,2"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InStatusBarTemplate}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FF2A8DD4" Width="1" Margin="1,2,1,2"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonPageGroupTemplate}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FFDDDDDD" Width="1" Margin="2,5,2,-5"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonPageHeaderTemplate}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FFDDDDDD" Width="1" Margin="2,5,2,5"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonQuickAccessToolbarCommonTemplate}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FFDDDDDD" Width="1" Margin="2,5,2,5"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonQuickAccessToolbarTemplate}" TargetType="{x:Type Control}">
        <ContentControl dxc:FocusHelper2.Focusable="False" Template="{StaticResource {dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonQuickAccessToolbarCommonTemplate}}" />
    </ControlTemplate>
    <ControlTemplate x:Key="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonQuickAccessToolbarFooterTemplate}" TargetType="{x:Type Control}">
        <dxc:PixelSnapper>
            <Border Background="#FFFFFFFF" Width="1" Margin="2,5,2,5"   />
        </dxc:PixelSnapper>
    </ControlTemplate>
    <!--END WPF-->
    <Thickness x:Key="{dxbt:BarEditItemThemeKey ResourceKey=EditContentMargin}">3,1,0,1</Thickness>
    <Thickness x:Key="{dxbt:BarEditItemThemeKey ResourceKey=InRibbonEditContentMargin}">0,2,0,0</Thickness>
    <Thickness x:Key="{dxbt:BarStaticItemThemeKey ResourceKey=BorderPadding}">3,0,3,0</Thickness>
    <Thickness x:Key="{dxbt:BarSubItemThemeKey ResourceKey=ContentMargin}">2,0,1,0</Thickness>
    <Style x:Key="{dxbt:BarSubItemThemeKey ResourceKey=GlyphBorderStyle}" TargetType="{x:Type dxc:MeasurePixelSnapperContentControl}"></Style>
    <Style x:Key="{dxbt:TextSplitterThemeKey ResourceKey=BarSubItem}" TargetType="{x:Type dxb:TextSplitterControl}">
        <Setter Property="FirstStringHorizontalAlignment" Value="Center" />
        <Setter Property="FirstStringMargin" Value="0,0,0,0" />
        <Setter Property="SecondStringHorizontalAlignment" Value="Center" />
        <Setter Property="SecondStringMargin" Value="0,1,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="NormalArrowTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Path Stretch="Fill" Fill="{TemplateBinding Foreground}" Data="F1 M 0,0L 5,0L 5,1L 4,1L 4,2L 3,2L 3,3L 2,3L 2,2L 1,2L 1,1L 0,1L 0,0 Z " Height="3" Width="5" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedArrowTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Path Stretch="Fill" Fill="{TemplateBinding Foreground}" Data="F1 M 0,0L 5,0L 5,1L 4,1L 4,2L 3,2L 3,3L 2,3L 2,2L 1,2L 1,1L 0,1L 0,0 Z " Height="3" Width="5" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="NormalTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="BottomSideArrowContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Margin" Value="0,8,0,0" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="RightSideArrowContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Margin" Value="2,1,0,0" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxbt:TextSplitterThemeKey ResourceKey=BarButtonItem}" TargetType="{x:Type dxb:TextSplitterControl}">
        <Setter Property="FirstStringHorizontalAlignment" Value="Center" />
        <Setter Property="FirstStringMargin" Value="0,0,0,0" />
        <Setter Property="SecondStringHorizontalAlignment" Value="Center" />
        <Setter Property="SecondStringMargin" Value="0,1,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="NormalTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxbt:TextSplitterThemeKey ResourceKey=BarCheckItem}" TargetType="{x:Type dxb:TextSplitterControl}">
        <Setter Property="FirstStringHorizontalAlignment" Value="Center" />
        <Setter Property="SecondStringHorizontalAlignment" Value="Center" />
        <Setter Property="SecondStringMargin" Value="0,1,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="NormalTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{dxbt:TextSplitterThemeKey ResourceKey=BarSplitButtonItem}" TargetType="{x:Type dxb:TextSplitterControl}">
        <Setter Property="FirstStringHorizontalAlignment" Value="Center" />
        <Setter Property="FirstStringMargin" Value="0,0,0,0" />
        <Setter Property="SecondStringHorizontalAlignment" Value="Center" />
        <Setter Property="SecondStringMargin" Value="0,1,0,0" />
        <Setter Property="NormalArrowTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Path Stretch="Fill" Fill="{TemplateBinding Foreground}" Data="F1 M 0,0L 5,0L 5,1L 4,1L 4,2L 3,2L 3,3L 2,3L 2,2L 1,2L 1,1L 0,1L 0,0 Z " Height="3" Width="5" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedArrowTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Path Stretch="Fill" Fill="{TemplateBinding Foreground}" Data="F1 M 0,0L 5,0L 5,1L 4,1L 4,2L 3,2L 3,3L 2,3L 2,2L 1,2L 1,1L 0,1L 0,0 Z " Height="3" Width="5" VerticalAlignment="Center" HorizontalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="NormalTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedTextStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="Foreground" Value="#FF191919"   />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="BottomSideArrowContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='0,8,0,0'}" />
                    <Setter Property="HorizontalAlignment" Value="Center" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="RightSideArrowContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ContentControl}">
                    <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='2,1,0,0'}" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <!--BARBUTTONITEM-->
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,1,0,1'}" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonContentMarginProperty}, Value='3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.LeftCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.LeftCommonContentMarginProperty}, Value='3,3,0,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightCommonContentMarginProperty}, Value='0,3,3,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.TopCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.TopCommonContentMarginProperty}, Value='3,3,3,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomCommonContentMarginProperty}, Value='3,0,3,3'}" />
        <!--ITEMPOSITION-->
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMainMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMainMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMainMenuThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInStatusBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInStatusBarThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInStatusBarThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarLeft}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarLeftThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarRight}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarRightThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,1,0,1'}" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMenuThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonMarginProperty}, Value='0,3,0,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ContentMarginProperty}, Value='6,0,14,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.DescriptionMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.DescriptionMarginProperty}, Value='6,0,14,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.KeyGestureMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.KeyGestureMarginProperty}, Value='6,0,14,0'}" />
        <Setter Property="GlyphMargin" Value="{Binding LinksControl.GlyphPadding, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInApplicationMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInDropDownGallery}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,1,0,1'}" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMenuThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonMarginProperty}, Value='0,3,0,3'}" />
        <Setter Property="GlyphMargin" Value="{Binding LinksControl.GlyphPadding, RelativeSource={RelativeSource TemplatedParent}}" />
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='0,0,0,1'}" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonPageGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonPageGroupThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonContentMarginProperty}, Value='3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.LeftGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.LeftGlyphMarginProperty}, Value='3,3,2,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightGlyphMarginProperty}, Value='2,3,3,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.TopGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.TopGlyphMarginProperty}, Value='3,3,3,2'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomGlyphMarginProperty}, Value='3,2,3,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.LeftCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.LeftCommonContentMarginProperty}, Value='3,3,0,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightCommonContentMarginProperty}, Value='0,3,3,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.TopCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.TopCommonContentMarginProperty}, Value='3,3,3,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomCommonContentMarginProperty}, Value='3,0,3,3'}" />
        <!--BEGIN WPF-->
        <Setter Property="TextSplitterStyleKey" Value="{dxbt:TextSplitterThemeKey ResourceKey=BarButtonItem}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="TextSplitterStyleKey" Value="TextSplitterThemeKey_BarButtonItem"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInButtonGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInButtonGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInButtonGroupThemeKey"/>ONLY SL-->
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,0,1,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInQAT}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInQATFooter}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <!--BARCHECKITEM-->
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInMainMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMainMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMainMenuThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInStatusBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInStatusBarThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInStatusBarThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarLeft}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarLeftThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarRight}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarRightThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="TextSplitterStyleKey" Value="{dxbt:TextSplitterThemeKey ResourceKey=BarCheckItem}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="TextSplitterStyleKey" Value="TextSplitterThemeKey_BarCheckItem"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInButtonGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInButtonGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInButtonGroupThemeKey"/>ONLY SL-->
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,0,1,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInQAT}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInQATFooter}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="GlyphBackgroundTemplate" Value="{StaticResource CheckTriStateTemplate}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphBackgroundThickness" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphBackgroundThicknessProperty}, Value='-1'}" />
    </Style>
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInApplicationMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInDropDownGallery}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="GlyphBackgroundTemplate" Value="{StaticResource CheckTriStateTemplate}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphBackgroundThickness" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphBackgroundThicknessProperty}, Value='-1'}" />
    </Style>
    <!--BARSUBITEM-->
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,1,0,1'}" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ContentAndGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ContentAndGlyphMarginProperty}, Value='3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ArrowMarginProperty}, Value='8,3,8,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.LeftArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.LeftArrowMarginProperty}, Value='3,3,2,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightArrowMarginProperty}, Value='2,3,3,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.TopArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.TopArrowMarginProperty}, Value='3,3,3,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomArrowMarginProperty}, Value='3,0,3,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonContentMarginProperty}, Value='3,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomCommonContentMarginProperty}, Value='3,2,3,0'}" />
        <!--BEGIN WPF-->
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSubItemThemeKey ResourceKey=ArrowTemplate}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSubItemThemeKey_ArrowTemplate"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInMainMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMainMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMainMenuThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInStatusBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInStatusBarThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInStatusBarThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarLeft}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarLeftThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarRight}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarRightThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSubItemThemeKey ResourceKey=ArrowTemplateInMenu}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSubItemThemeKey_ArrowTemplateInMenu"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ArrowMarginProperty}, Value='0,0,2,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.DescriptionMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.DescriptionMarginProperty}, Value='6,0,14,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInApplicationMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInDropDownGallery}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSubItemThemeKey ResourceKey=ArrowTemplate}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSubItemThemeKey_ArrowTemplate"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='0'}" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonPageGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonPageGroupThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.LeftGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.LeftGlyphMarginProperty}, Value='0,0,2,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightGlyphMarginProperty}, Value='2,0,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.TopGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.TopGlyphMarginProperty}, Value='0,0,0,2'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomGlyphMarginProperty}, Value='0,2,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ContentAndGlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ContentAndGlyphMarginProperty}, Value='3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.LeftArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.LeftArrowMarginProperty}, Value='5,3,0,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightArrowMarginProperty}, Value='5,3,5,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.TopArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.TopArrowMarginProperty}, Value='3,3,3,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomArrowMarginProperty}, Value='3,0,3,3'}" />
        <!--BEGIN WPF-->
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSubItemThemeKey ResourceKey=ArrowTemplate}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSubItemThemeKey_ArrowTemplate"/>ONLY SL-->
        <!--BEGIN WPF-->
        <Setter Property="TextSplitterStyleKey" Value="{dxbt:TextSplitterThemeKey ResourceKey=BarSubItem}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="TextSplitterStyleKey" Value="TextSplitterThemeKey_BarSubItem"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInButtonGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInButtonGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInButtonGroupThemeKey"/>ONLY SL-->
        <Setter Property="Margin" Value="1,0,1,0" />
    </Style>
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInQAT}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInQATFooter}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSubItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <!--BARSPLITBUTTONITEM-->
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" />
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSplitButtonItemThemeKey ResourceKey=ArrowTemplate}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSplitButtonItemThemeKey_ArrowTemplate"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInMainMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" />
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMainMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMainMenuThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInStatusBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InStatusBarTemplate}" />
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInStatusBarThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInStatusBarThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonPageHeaderTemplate}" />
        <!--END WPF-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarLeft}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonStatusBarLeftPartTemplate}" />
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarLeftThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarRight}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonStatusBarRightPartTemplate}" />
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarRightThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonPageGroupTemplate}" />
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSplitButtonItemThemeKey ResourceKey=ArrowTemplate}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSplitButtonItemThemeKey_ArrowTemplate"/>ONLY SL-->
        <!--BEGIN WPF-->
        <Setter Property="TextSplitterStyleKey" Value="{dxbt:TextSplitterThemeKey ResourceKey=BarSplitButtonItem}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="TextSplitterStyleKey" Value="TextSplitterThemeKey_BarSplitButtonItem"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInButtonGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" />
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSplitButtonItemThemeKey ResourceKey=ArrowTemplateInBarButtonGroup}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSplitButtonItemThemeKey_ArrowTemplateInBarButtonGroup"/>ONLY SL-->
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInButtonGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInButtonGroupThemeKey"/>ONLY SL-->
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,0,1,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightArrowMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightArrowMarginProperty}, Value='4,0,4,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInQAT}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonQuickAccessToolbarTemplate}" />
        <!--END WPF-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInQATFooter}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=InRibbonQuickAccessToolbarFooterTemplate}" />
        <!--END WPF-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" />
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSplitButtonItemThemeKey ResourceKey=ArrowTemplateInMenu}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSplitButtonItemThemeKey_ArrowTemplateInMenu"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInApplicationMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" />
        <!--END WPF-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInDropDownGallery}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}">
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" />
        <!--END WPF-->
    </Style>
    <Style x:Key="{dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="TouchSplitterThemeKey" Value="{dxbt:BarItemTouchSplitterThemeKey ResourceKey=Template}" />
        <Setter Property="ArrowThemeKey" Value="{dxbt:BarSplitButtonItemThemeKey ResourceKey=ArrowTemplate}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="ArrowThemeKey" Value="BarSplitButtonItemThemeKey_ArrowTemplate"/>ONLY SL-->
    </Style>
    <!--BARSPLITCHECKITEM-->
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInMainMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMainMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMainMenuThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInStatusBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInStatusBarThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInStatusBarThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarLeft}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarLeftThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarRight}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarRightThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInButtonGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInButtonGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInButtonGroupThemeKey"/>ONLY SL-->
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,0,1,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInQAT}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInQATFooter}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInApplicationMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInDropDownGallery}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarSplitCheckItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarSplitButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}}" />
    <!--BAREDITITEM-->
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.AdditionalContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.AdditionalContentMarginProperty}, Value='0,0,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ContentMarginProperty}, Value='0,0,6,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.Content2Margin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.Content2MarginProperty}, Value='6,0,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='0,0,6,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonMarginProperty}, Value='0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonContentMarginProperty}, Value='8,0,8,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInMainMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMainMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMainMenuThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInStatusBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInStatusBarThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInStatusBarThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarLeft}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarLeftThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonMarginProperty}, Value='2,0,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.AdditionalContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.AdditionalContentMarginProperty}, Value='0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ContentMarginProperty}, Value='0,0,4,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.Content2Margin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.Content2MarginProperty}, Value='4,0,0,0'}" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='0'}" />
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarRight}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarRightThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonMarginProperty}, Value='2,0,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.AdditionalContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.AdditionalContentMarginProperty}, Value='0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ContentMarginProperty}, Value='0,0,4,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.Content2Margin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.Content2MarginProperty}, Value='4,0,0,0'}" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='0'}" />
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}">
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonPageGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonPageGroupThemeKey"/>ONLY SL-->
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonMarginProperty}, Value='2,0,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.AdditionalContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.AdditionalContentMarginProperty}, Value='0,0,0,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.ContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.ContentMarginProperty}, Value='0,0,4,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='0,0,4,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.Content2Margin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.Content2MarginProperty}, Value='4,0,0,0'}" />
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,0,0,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInButtonGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInButtonGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInButtonGroupThemeKey"/>ONLY SL-->
        <Setter Property="dx:TouchInfo.Margin" Value="{dx:TouchMarginInfo Value='1,0,1,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInQAT}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInQATFooter}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="CommonMargin" Value="0" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.Content2Margin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.Content2MarginProperty}, Value='4,0,4,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInApplicationMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInDropDownGallery}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarEditItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}}" />
    <!--BARSTATICITEM-->
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.AdditionalContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.AdditionalContentMarginProperty}, Value='6,0,0,0'}" />
        <Setter Property="CommonMargin" Value="0" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonContentMarginProperty}, Value='8,0,8,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInMainMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInMainMenuThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInMainMenuThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInStatusBar}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInStatusBarThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInStatusBarThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInBar}}" />
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarLeft}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarLeftThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarLeftThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInRibbonStatusBarRight}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInRibbonStatusBarRightThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInRibbonStatusBarRightThemeKey"/>ONLY SL-->
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInBar}}">
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.GlyphMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.GlyphMarginProperty}, Value='3,1,2,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonContentMarginProperty}, Value='3,1,2,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.LeftCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.LeftCommonContentMarginProperty}, Value='3,1,0,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.RightCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.RightCommonContentMarginProperty}, Value='0,1,2,3'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.TopCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.TopCommonContentMarginProperty}, Value='3,1,2,0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.BottomCommonContentMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.BottomCommonContentMarginProperty}, Value='3,0,2,3'}" />
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInButtonGroup}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}">
        <!--BEGIN WPF-->
        <Setter Property="BorderThemeKey" Value="{dxbt:BarItemBorderInButtonGroupThemeKey}" />
        <!--END WPF-->
        <!--ONLY SL<Setter Property="BorderThemeKey" Value="BarItemBorderInButtonGroupThemeKey"/>ONLY SL-->
        <Setter Property="Margin" Value="1,0,1,0" />
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInQAT}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInQATFooter}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInRibbonPageGroup}}" />
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}">
        <Setter Property="FirstBorderUseNormalStateOnly" Value="True" />
        <Setter Property="SecondBorderUseNormalStateOnly" Value="True" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.CommonMargin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.CommonMarginProperty}, Value='0'}" />
        <Setter Property="dxb:BarItemLayoutPanelTouchProperties.Content2Margin" Value="{dx:TouchPaddingInfo TargetProperty={x:Static dxb:BarItemLayoutPanel.Content2MarginProperty}, Value='4,0,4,0'}" />
    </Style>
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInApplicationMenu}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInDropDownGallery}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInMenu}}" />
    <Style x:Key="{dxbt:BarStaticItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}" TargetType="{x:Type dxb:BarItemLayoutPanel}" BasedOn="{StaticResource {dxbt:BarButtonItemLayoutPanelThemeKey ResourceKey=StyleInMenuHeader}}" />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettings}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInMainMenu}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInMenu}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInApplicationMenu}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInStatusBar}" Normal="#FFFFFFFF" Hover="#FFFFFFFF" Pressed="#FFFFFFFF" Disabled="#7FFFFFFF"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInRibbonStatusBarLeft}" Normal="#FFFFFFFF" Hover="#FFFFFFFF" Pressed="#FFFFFFFF" Disabled="#7FFFFFFF"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInRibbonStatusBarRight}" Normal="#FFFFFFFF" Hover="#FFFFFFFF" Pressed="#FFFFFFFF" Disabled="#7FFFFFFF"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInRibbonPageGroup}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInRibbonToolbar}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInRibbonToolbarFooter}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInRibbonPageHeader}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemFontSettingsInButtonGroup}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarItemDescriptionStyleInApplicationMenu}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#7F191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarSplitButtonItemTextStyleInTextSplitter}" Normal="#FF191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarSubItemTextStyleInTextSplitter}" Normal="#FF191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarButtonItemTextStyleInTextSplitter}" Normal="#FF191919"   />
    <dxb:FontSettings x:Key="{dxbt:BarItemFontThemeKey ResourceKey=BarCheckItemTextStyleInTextSplitter}" Normal="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=DefaultSettings}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInButtonGroup}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInMainMenu}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInMenu}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInApplicationMenu}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInRibbonPageGroup}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInRibbonStatusBarLeft}" Normal="#FFFFFFFF" Hover="#FFFFFFFF" Pressed="#FFFFFFFF" Disabled="#FFFFFFFF"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInRibbonStatusBarRight}" Normal="#FFFFFFFF" Hover="#FFFFFFFF" Pressed="#FFFFFFFF" Disabled="#FFFFFFFF"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInRibbonToolbar}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInRibbonToolbarFooter}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInRibbonPageHeader}" Normal="#FF191919" Hover="#FF191919" Pressed="#FF191919" Disabled="#FF191919"   />
    <dxb:BarItemImageColorizerSettings x:Key="{dxbt:BarItemImageColorizerSettingsThemeKey ResourceKey=SettingsInStatusBar}" Normal="#FFFFFFFF" Hover="#FFFFFFFF" Pressed="#FFFFFFFF" Disabled="#FFFFFFFF"   />
</ResourceDictionary>