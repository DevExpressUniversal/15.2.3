<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"></xsd:import>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DataAccessLocalizerStringId.CreateDataSourceActionName" xml:space="preserve">
    <value>Data Source Wizard</value>
  </data>
  <data name="DataAccessLocalizerStringId.DataSourceSmartTagActionName" xml:space="preserve">
    <value>Data Source Wizard</value>
  </data>
  <data name="DataAccessLocalizerStringId.DataSourceSmartTagActionNameXAML" xml:space="preserve">
    <value>Items Source Wizard</value>
  </data>
  <data name="DataAccessLocalizerStringId.GenerateDataSourceTransactionName" xml:space="preserve">
    <value>Data Source Generation</value>
  </data>
  <data name="DataAccessLocalizerStringId.GenerateCodeBehindTransactionName" xml:space="preserve">
    <value>Code-Behind Generation</value>
  </data>
  <data name="DataAccessLocalizerStringId.CreateSqlDataSourceTransactionName" xml:space="preserve">
    <value>Creating a new SqlDataSource component</value>
  </data>
  <data name="DataAccessLocalizerStringId.EnumDataAccessTechnologyDescription" xml:space="preserve">
    <value>A data source that is an [Enumeration](http://msdn.microsoft.com/en-us/library/vstudio/cc138362.aspx).</value>
  </data>
  <data name="DataAccessLocalizerStringId.EnumDataAccessTechnologyName" xml:space="preserve">
    <value>Enumeration</value>
  </data>
  <data name="DataAccessLocalizerStringId.XmlDataSetDataAccessTechnologyName" xml:space="preserve">
    <value>XML Data</value>
  </data>
  <data name="DataAccessLocalizerStringId.XmlDataSetDataAccessTechnologyDescription" xml:space="preserve">
    <value>To bind a control to XML data, you need to create a &lt;b&gt;DataSet&lt;/b&gt; object. This object provides methods that let you load XML files, streams containing XML data, etc.&lt;/br&gt;Please refer to the [Loading a DataSet from XML](http://msdn.microsoft.com/en-us/library/fx29c3yd.aspx) article to learn more.</value>
  </data>
  <data name="DataAccessLocalizerStringId.SQLDataSourceDataAccessTechnologyName" xml:space="preserve">
    <value>SQL Data Connection</value>
  </data>
  <data name="DataAccessLocalizerStringId.SQLDataSourceDataAccessTechnologyDescription" xml:space="preserve">
    <value>To create a new SQL data connection, click New Data Source.&lt;/br&gt;The &lt;b&gt;SqlDataSource&lt;/b&gt; component allows you to add multiple queries and specify master-detail relations between them, or combine data records from different tables by using the [INNER JOIN](http://msdn.microsoft.com/en-us/library/bb208854.aspx) operation.</value>
  </data>
  <data name="DataAccessLocalizerStringId.TypedDataSetDataAccessTechnologyName" xml:space="preserve">
    <value>ADO.NET Typed DataSet</value>
  </data>
  <data name="DataAccessLocalizerStringId.TypedDataSetDataAccessTechnologyDescription" xml:space="preserve">
    <value>The [ADO.NET Typed DataSet](http://msdn.microsoft.com/en-us/library/esbykkzb.aspx) is a memory-resident representation of data that provides a consistent relational programming model regardless of the source of the data it contains. A DataSet represents a complete set of data including the tables that contain, order, and constrain the data, as well as the relationships between the tables.</value>
  </data>
  <data name="DataAccessLocalizerStringId.LinqToSqlDataAccessTechnologyName" xml:space="preserve">
    <value>LINQ to SQL</value>
  </data>
  <data name="DataAccessLocalizerStringId.LinqToSqlDataAccessTechnologyDescription" xml:space="preserve">
    <value>[Language-Integrated Query (LINQ) to SQL](http://msdn.microsoft.com/en-us/library/bb425822.aspx) provider is an object-relational mapper that enables managing relational data as objects without losing the ability to query. It does this by translating language-integrated queries into SQL for execution by the database, and then translating the tabular results back into objects you define.</value>
  </data>
  <data name="DataAccessLocalizerStringId.EntityFrameworkDataAccessTechnologyName" xml:space="preserve">
    <value>Entity Framework</value>
  </data>
  <data name="DataAccessLocalizerStringId.EntityFrameworkDataAccessTechnologyDescription" xml:space="preserve">
    <value>[Entity Framework (EF)](http://msdn.microsoft.com/en-US/data/ef) is an object-relational mapper that enables .NET developers to work with relational data using domain-specific objects. It eliminates the need for most of the data-access code that developers usually need to write.</value>
  </data>
  <data name="DataAccessLocalizerStringId.WcfDataAccessTechnologyName" xml:space="preserve">
    <value>WCF Data Services</value>
  </data>
  <data name="DataAccessLocalizerStringId.WcfDataAccessTechnologyDescription" xml:space="preserve">
    <value>[Windows Communication Foundation (WCF)](http://msdn.microsoft.com/en-us/library/dd456779.aspx) is Microsoft’s unified programming model for building service-oriented applications. WCF Data Services allows the use of the Open Data (OData) protocol to query data over the HTTP protocol.</value>
  </data>
  <data name="DataAccessLocalizerStringId.IEnumerableDataAccessTechnologyName" xml:space="preserve">
    <value>IList/IEnumerable</value>
  </data>
  <data name="DataAccessLocalizerStringId.IEnumerableDataAccessTechnologyDescription" xml:space="preserve">
    <value>Any data source implementing the [IList](http://msdn.microsoft.com/en-us/library/system.collections.ilist.aspx) or [IEnumerable](http://msdn.microsoft.com/en-us/library/system.collections.ienumerable.aspx) interface (e.g. List&lt;T&gt;, ObservableCollection&lt;T&gt;, etc.).</value>
  </data>
  <data name="DataAccessLocalizerStringId.RiaDataAccessTechnologyName" xml:space="preserve">
    <value>RIA Services</value>
  </data>
  <data name="DataAccessLocalizerStringId.RiaDataAccessTechnologyDescription" xml:space="preserve">
    <value>[Microsoft WCF RIA Services](http://msdn.microsoft.com/en-us/library/ee707344(v=vs.91).aspx) simplifies the development of Rich Internet Applications (RIA), such as Silverlight applications, by offering framework components, tools and services that provide a comfortable mechanism for data handling. The application logic is stored on the server and RIA Services client applications have access to this logic.</value>
  </data>
  <data name="DataAccessLocalizerStringId.OLAPDataAccessTechnologyName" xml:space="preserve">
    <value>OLAP Cube</value>
  </data>
  <data name="DataAccessLocalizerStringId.OLAPDataAccessTechnologyDescription" xml:space="preserve">
    <value>[Online Analytical Processing (OLAP)](https://technet.microsoft.com/en-us/library/bb522607) is a technology that is used to organize large business databases and support business intelligence. You can establish a connection to a cube on an OLAP server using the OLE DB for OLAP, ADOMD.NET or XMLA data providers.</value>
  </data>
  <data name="DataAccessLocalizerStringId.XPODataAccessTechnologyName" xml:space="preserve">
    <value>DevExpress ORM Tool (XPO)</value>
  </data>
  <data name="DataAccessLocalizerStringId.XPODataAccessTechnologyDescription" xml:space="preserve">
    <value>[XPO (eXpress Persistent Objects)](https://www.devexpress.com/Products/NET/ORM/) bridges the gap between relational databases and object oriented software constructs found in custom software. Using XPO, you can build applications that are compatible with [multiple database systems](https://documentation.devexpress.com/#CoreLibraries/CustomDocument2114) without having to make ANY changes in your code.</value>
  </data>
  <data name="DataAccessLocalizerStringId.TechnologiesCaption" xml:space="preserve">
    <value>Technologies</value>
  </data>
  <data name="DataAccessLocalizerStringId.SourcesCaption" xml:space="preserve">
    <value>Data Sources</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewSourceCaption" xml:space="preserve">
    <value>New Data Source...</value>
  </data>
  <data name="DataAccessLocalizerStringId.NextToProceedText" xml:space="preserve">
    <value>Click Next to proceed to configure the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.NoSourcesAvailableText" xml:space="preserve">
    <value>No available data sources are found in the solution. Please create a new data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewDataSourceMessageFormat" xml:space="preserve">
    <value>After a new data source is created, rebuild the current solution and run the {0} to continue configuring the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewDataSourceMessageFormatSQLDataSource" xml:space="preserve">
    <value>After the control has been assigned the created data source, you can continue configuring the SqlDataSource by using the verbs available in its smart tag.&lt;/br&gt;For example, to add more queries to the data source, click &lt;b&gt;Manage Queries&lt;/b&gt;.</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewDataSourceTitle" xml:space="preserve">
    <value>New Data Source</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewDataSourceTitleSQLDataSource" xml:space="preserve">
    <value>New SQL Data Connection</value>
  </data>
  <data name="DataAccessLocalizerStringId.LoadXmlCaption" xml:space="preserve">
    <value>Load Xml...</value>
  </data>
  <data name="DataAccessLocalizerStringId.RetrieveSchemaCaption" xml:space="preserve">
    <value>Retrieve Schema</value>
  </data>
  <data name="DataAccessLocalizerStringId.TestConnectionCaption" xml:space="preserve">
    <value>Test Connection</value>
  </data>
  <data name="DataAccessLocalizerStringId.ElementTypePrompt" xml:space="preserve">
    <value>Start typing Element Type</value>
  </data>
  <data name="DataAccessLocalizerStringId.ObjectTypePrompt" xml:space="preserve">
    <value>Start typing Object Type</value>
  </data>
  <data name="DataAccessLocalizerStringId.GroupingCaption" xml:space="preserve">
    <value>Group Descriptions</value>
  </data>
  <data name="DataAccessLocalizerStringId.SortingCaption" xml:space="preserve">
    <value>Sort Descriptions</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewDataSourceButtonText" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="DataAccessLocalizerStringId.PrevCaption" xml:space="preserve">
    <value>Back</value>
  </data>
  <data name="DataAccessLocalizerStringId.NextCaption" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="DataAccessLocalizerStringId.FinishCaption" xml:space="preserve">
    <value>Finish</value>
  </data>
  <data name="DataAccessLocalizerStringId.DirectBindingDataProcessingModeName" xml:space="preserve">
    <value>Direct Binding to Data Source</value>
  </data>
  <data name="DataAccessLocalizerStringId.DirectBindingDataProcessingModeDescription" xml:space="preserve">
    <value>Data-aware controls usually provide the &lt;b&gt;DataSource&lt;/b&gt; and &lt;b&gt;DataMember&lt;/b&gt; properties that let you bind them to a data source. In most cases, a control can be bound to a data source using the DataSource property alone (the DataMember property is left set to an empty string).</value>
  </data>
  <data name="DataAccessLocalizerStringId.SimpleBindingDataProcessingModeName" xml:space="preserve">
    <value>Simple Binding</value>
  </data>
  <data name="DataAccessLocalizerStringId.SimpleBindingDataProcessingModeDescription" xml:space="preserve">
    <value>A control will be bound to a plain collection of data objects.</value>
  </data>
  <data name="DataAccessLocalizerStringId.InMemoryBindingSourceDataProcessingModeName" xml:space="preserve">
    <value>Binding via the BindingSource Component</value>
  </data>
  <data name="DataAccessLocalizerStringId.InMemoryBindingSourceDataProcessingModeDescription" xml:space="preserve">
    <value>The [System.Windows.Forms.BindingSource](http://msdn.microsoft.com/en-us/library/system.windows.forms.bindingsource.aspx) component simplifies design-time data binding to a database or any class declared in code. All DevExpress data-aware controls can be bound to data with the help of this component.&lt;/br&gt;For information on this component, please refer to the corresponding topic in MSDN.</value>
  </data>
  <data name="DataAccessLocalizerStringId.InMemoryCollectionViewDataProcessingModeName" xml:space="preserve">
    <value>Manipulating Data via ICollectionView</value>
  </data>
  <data name="DataAccessLocalizerStringId.InMemoryCollectionViewDataProcessingModeDescription" xml:space="preserve">
    <value>Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.&lt;/br&gt;For information on this component, please refer to the [corresponding topic](http://msdn.microsoft.com/en-us/library/system.componentmodel.icollectionview.aspx) in MSDN.</value>
  </data>
  <data name="DataAccessLocalizerStringId.InstantFeedbackDataProcessingModeName" xml:space="preserve">
    <value>Asynchronous Server-Side Data Processing</value>
  </data>
  <data name="DataAccessLocalizerStringId.InstantFeedbackDataProcessingModeDescription" xml:space="preserve">
    <value>Activates [Instant Feedback UI Mode](http://documentation.devexpress.com/#WPF/CustomDocument9565).&lt;/br&gt;You'll no longer experience any UI lock-ups when operating with large volumes of data. All data intensive operations will be delegated to the server and performed asynchronously - in a background thread. This is a read only mode.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ServerModeDataProcessingModeName" xml:space="preserve">
    <value>Server-Side Data Processing</value>
  </data>
  <data name="DataAccessLocalizerStringId.ServerModeDataProcessingModeDescription" xml:space="preserve">
    <value>Activates the [Server Mode](http://documentation.devexpress.com/#WPF/CustomDocument6279) designed to work with extremely large volumes of data.&lt;/br&gt;Bound data is not loaded into memory in its entirety. A control synchronously loads data in small chunks and delegates data processing to the data server. This ensures quick access to data, even if the sorting, grouping, filtering and summary features are used.</value>
  </data>
  <data name="DataAccessLocalizerStringId.PLinqInstantFeedbackDataProcessingModeName" xml:space="preserve">
    <value>Asynchronous Parallel In-Memory DataProcessing</value>
  </data>
  <data name="DataAccessLocalizerStringId.PLinqInstantFeedbackDataProcessingModeDescription" xml:space="preserve">
    <value>[Async Parallel In-Memory Data Processing](http://documentation.devexpress.com/#WPF/CustomDocument10472).&lt;/br&gt;All data-intensive operations (e.g. sorting, grouping, filtering, etc.) on in-memory data are delegated to a parallel implementation of the LINQ to Objects and performed asynchronously - in a background thread, by making full use of all the available processors/cores on the system.</value>
  </data>
  <data name="DataAccessLocalizerStringId.PLinqServerModeDataProcessingModeName" xml:space="preserve">
    <value>Parallel In-Memory Data Processing</value>
  </data>
  <data name="DataAccessLocalizerStringId.PLinqServerModeDataProcessingModeDescription" xml:space="preserve">
    <value>[Parallel In-Memory Data Processing](http://documentation.devexpress.com/#WPF/CustomDocument10472).&lt;/br&gt;All data-intensive operations (e.g. sorting, grouping, filtering, etc.) on in-memory data are delegated to a parallel implementation of the LINQ to Objects by making full use of all the available processors/cores on the system.</value>
  </data>
  <data name="DataAccessLocalizerStringId.XMLtoDataSetDataProcessingModeName" xml:space="preserve">
    <value>Loading a DataSet from XML</value>
  </data>
  <data name="DataAccessLocalizerStringId.XMLtoDataSetDataProcessingModeDescription" xml:space="preserve">
    <value>To fill a DataSet with XML data from a file or stream, use the [ReadXml method](http://msdn.microsoft.com/en-us/library/360dye2a.aspx) of the DataSet object.&lt;/br&gt;The method loads the contents of a XML file or stream and creates a relational schema of the DataSet depending on the XmlReadMode parameter and whether or not the relational schema already exists.</value>
  </data>
  <data name="DataAccessLocalizerStringId.OLEDBforOLAPDataProcessingModeName" xml:space="preserve">
    <value>OLE DB for OLAP</value>
  </data>
  <data name="DataAccessLocalizerStringId.OLEDBforOLAPDataProcessingModeDescription" xml:space="preserve">
    <value>[The Analysis Services OLE DB Provider](http://msdn.microsoft.com/en-us/library/ms146862.aspx) is the primary method for interacting with Analysis Services in order to accomplish such tasks as connecting to a cube or data mining model, querying a cube or data mining model, and retrieving schema information.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ADOMDforOLAPDataProcessingModeName" xml:space="preserve">
    <value>ADOMD.NET</value>
  </data>
  <data name="DataAccessLocalizerStringId.ADOMDforOLAPDataProcessingModeDescription" xml:space="preserve">
    <value>[ADOMD.NET](http://msdn.microsoft.com/en-us/library/ms123483.aspx) is a Microsoft .NET Framework data provider that is designed to communicate with Microsoft SQL Server Analysis Services. ADOMD.NET uses the XML for Analysis protocol to communicate with analytical data sources by using either TCP/IP or HTTP connections to transmit and receive SOAP requests and responses. Analytical data, key performance indicators (KPIs), and mining models can be queried and manipulated by using the ADOMD.NET object model.</value>
  </data>
  <data name="DataAccessLocalizerStringId.XMLAforOLAPDataProcessingModeName" xml:space="preserve">
    <value>XMLA</value>
  </data>
  <data name="DataAccessLocalizerStringId.XMLAforOLAPDataProcessingModeDescription" xml:space="preserve">
    <value>[XML for Analysis (XMLA)](http://msdn.microsoft.com/en-us/library/ms186654.aspx) is a SOAP-based XML protocol, designed specifically for universal data access to any standard multidimensional data source that can be accessed over an HTTP connection.&lt;/br&gt;XMLA allows you to integrate a client application with Analysis Services, without any dependencies on the .NET Framework or COM interfaces.</value>
  </data>
  <data name="DataAccessLocalizerStringId.XPCollectionForXPODataProcessingModeName" xml:space="preserve">
    <value>Binding via the XPCollection Component</value>
  </data>
  <data name="DataAccessLocalizerStringId.XPCollectionForXPODataProcessingModeDescription" xml:space="preserve">
    <value>The [XPCollection](https://documentation.devexpress.com/#CoreLibraries/clsDevExpressXpoXPCollectiontopic) component represent a collection of persistent objects. Can serve as a data source for data-aware controls.</value>
  </data>
  <data name="DataAccessLocalizerStringId.XPViewForXPODataProcessingModeName" xml:space="preserve">
    <value>Binding via the XPView Component</value>
  </data>
  <data name="DataAccessLocalizerStringId.XPViewForXPODataProcessingModeDescription" xml:space="preserve">
    <value>The [XPView](https://documentation.devexpress.com/#CoreLibraries/clsDevExpressXpoXPViewtopic) component represent a view that stores data retrieved from persistent objects. Allows arbitrary combinations of calculated and aggregated values to be retrieved from a data store. Can serve as a data source for data-aware controls.</value>
  </data>
  <data name="DataAccessLocalizerStringId.TablesDataSourcePropertyName" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="DataAccessLocalizerStringId.TablesDataSourcePropertyDescription" xml:space="preserve">
    <value>Select a table from the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ElementTypeDataSourcePropertyName" xml:space="preserve">
    <value>Element Type</value>
  </data>
  <data name="DataAccessLocalizerStringId.ElementTypeDataSourcePropertyDescription" xml:space="preserve">
    <value>Specify the type of objects that will be retrieved from the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ObjectTypeDataSourcePropertyName" xml:space="preserve">
    <value>Object Type</value>
  </data>
  <data name="DataAccessLocalizerStringId.ObjectTypeDataSourcePropertyDescription" xml:space="preserve">
    <value>Specify the type of objects that will be retrieved from the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ServiceRootDataSourcePropertyName" xml:space="preserve">
    <value>Service Root</value>
  </data>
  <data name="DataAccessLocalizerStringId.ServiceRootDataSourcePropertyDescription" xml:space="preserve">
    <value>An absolute URI that identifies the root of a data service.</value>
  </data>
  <data name="DataAccessLocalizerStringId.DefaultSortingDataSourcePropertyName" xml:space="preserve">
    <value>Default Sorting</value>
  </data>
  <data name="DataAccessLocalizerStringId.DefaultSortingDataSourcePropertyDescription" xml:space="preserve">
    <value>Enables you to specify how data source contents are sorted by default, when the sort order is not specified by a control.</value>
  </data>
  <data name="DataAccessLocalizerStringId.SortDescriptionsDataSourcePropertyName" xml:space="preserve">
    <value>Sorting</value>
  </data>
  <data name="DataAccessLocalizerStringId.SortDescriptionsDataSourcePropertyDescription" xml:space="preserve">
    <value>Select the sort order for fields.</value>
  </data>
  <data name="DataAccessLocalizerStringId.FilterDataSourcePropertyName" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="DataAccessLocalizerStringId.FilterDataSourcePropertyDescription" xml:space="preserve">
    <value>Specify the expression used to filter which rows are viewed.</value>
  </data>
  <data name="DataAccessLocalizerStringId.GroupAndSortDescriptionsDataSourcePropertyName" xml:space="preserve">
    <value>Collection View Type</value>
  </data>
  <data name="DataAccessLocalizerStringId.GroupAndSortDescriptionsDataSourcePropertyDescription" xml:space="preserve">
    <value>Specify the group and sort settings for CollectionViews.</value>
  </data>
  <data name="DataAccessLocalizerStringId.CultureDataSourcePropertyName" xml:space="preserve">
    <value>Culture</value>
  </data>
  <data name="DataAccessLocalizerStringId.CultureDataSourcePropertyDescription" xml:space="preserve">
    <value>The preferred culture for your application.</value>
  </data>
  <data name="DataAccessLocalizerStringId.IsSynchronizedWithCurrentItemDataSourcePropertyName" xml:space="preserve">
    <value>Synchronize with Current Item</value>
  </data>
  <data name="DataAccessLocalizerStringId.IsSynchronizedWithCurrentItemDataSourcePropertyDescription" xml:space="preserve">
    <value>Enable this option to keep the focused record synchronized with the current item in the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.KeyExpressionDataSourcePropertyName" xml:space="preserve">
    <value>Key Expression</value>
  </data>
  <data name="DataAccessLocalizerStringId.KeyExpressionDataSourcePropertyDescription" xml:space="preserve">
    <value>Specifies the primary key column in the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.AreSourceRowsThreadSafeDataSourcePropertyName" xml:space="preserve">
    <value>Source Rows are Thread Safe</value>
  </data>
  <data name="DataAccessLocalizerStringId.AreSourceRowsThreadSafeDataSourcePropertyDescription" xml:space="preserve">
    <value>Specifies whether elements retrieved by the DataSource's queryable source are thread-safe.</value>
  </data>
  <data name="DataAccessLocalizerStringId.QueryDataSourcePropertyName" xml:space="preserve">
    <value>Query</value>
  </data>
  <data name="DataAccessLocalizerStringId.QueryDataSourcePropertyDescription" xml:space="preserve">
    <value>Specify the name of Query that will be used to retrieve objects from the data source.</value>
  </data>
  <data name="DataAccessLocalizerStringId.AutoLoadDataSourcePropertyName" xml:space="preserve">
    <value>AutoLoad</value>
  </data>
  <data name="DataAccessLocalizerStringId.AutoLoadDataSourcePropertyDescription" xml:space="preserve">
    <value>AutoLoad Description</value>
  </data>
  <data name="DataAccessLocalizerStringId.LoadDelayDataSourcePropertyName" xml:space="preserve">
    <value>LoadDelay</value>
  </data>
  <data name="DataAccessLocalizerStringId.LoadDelayDataSourcePropertyDescription" xml:space="preserve">
    <value>LoadDelay Description</value>
  </data>
  <data name="DataAccessLocalizerStringId.LoadIntervalDataSourcePropertyName" xml:space="preserve">
    <value>LoadInterval</value>
  </data>
  <data name="DataAccessLocalizerStringId.LoadIntervalDataSourcePropertyDescription" xml:space="preserve">
    <value>LoadInterval Description</value>
  </data>
  <data name="DataAccessLocalizerStringId.LoadSizeDataSourcePropertyName" xml:space="preserve">
    <value>LoadSize</value>
  </data>
  <data name="DataAccessLocalizerStringId.LoadSizeDataSourcePropertyDescription" xml:space="preserve">
    <value>LoadSize Description</value>
  </data>
  <data name="DataAccessLocalizerStringId.RefreshIntervalDataSourcePropertyName" xml:space="preserve">
    <value>RefreshInterval</value>
  </data>
  <data name="DataAccessLocalizerStringId.RefreshIntervalDataSourcePropertyDescription" xml:space="preserve">
    <value>RefreshInterval Description</value>
  </data>
  <data name="DataAccessLocalizerStringId.ProviderDataSourcePropertyName" xml:space="preserve">
    <value>Provider</value>
  </data>
  <data name="DataAccessLocalizerStringId.ProviderDataSourcePropertyDescription" xml:space="preserve">
    <value>The data provider to be used. The “MSOLAP” string identifies the latest version of the OLE DB provider.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ServerDataSourcePropertyName" xml:space="preserve">
    <value>Server Name</value>
  </data>
  <data name="DataAccessLocalizerStringId.ServerDataSourcePropertyDescription" xml:space="preserve">
    <value>The name of a server that runs an instance of Microsoft SQL Server Analysis Services (SSAS) or the path to the data pump.</value>
  </data>
  <data name="DataAccessLocalizerStringId.CatalogDataSourcePropertyName" xml:space="preserve">
    <value>Catalog Name</value>
  </data>
  <data name="DataAccessLocalizerStringId.CatalogDataSourcePropertyDescription" xml:space="preserve">
    <value>The data catalog that contains the required cube.</value>
  </data>
  <data name="DataAccessLocalizerStringId.CubeDataSourcePropertyName" xml:space="preserve">
    <value>Cube Name</value>
  </data>
  <data name="DataAccessLocalizerStringId.CubeDataSourcePropertyDescription" xml:space="preserve">
    <value>The name of a cube that provides OLAP data.</value>
  </data>
  <data name="DataAccessLocalizerStringId.QueryTimeoutDataSourcePropertyName" xml:space="preserve">
    <value>Query Timeout</value>
  </data>
  <data name="DataAccessLocalizerStringId.QueryTimeoutDataSourcePropertyDescription" xml:space="preserve">
    <value>(Optional)&lt;/br&gt;The maximum amount of time, in seconds, allowed for a query to SSAS to complete.&lt;/br&gt;If the parameter is set to 0, each query can last indefinitely.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ConnectionTimeoutDataSourcePropertyName" xml:space="preserve">
    <value>Connection Timeout</value>
  </data>
  <data name="DataAccessLocalizerStringId.ConnectionTimeoutDataSourcePropertyDescription" xml:space="preserve">
    <value>(Optional)&lt;/br&gt;The maximum amount of time, in seconds, allowed for a connection to be established.&lt;/br&gt;If the parameter is set to 0, establishing a connection can last indefinitely.</value>
  </data>
  <data name="DataAccessLocalizerStringId.UserIdDataSourcePropertyName" xml:space="preserve">
    <value>User Id</value>
  </data>
  <data name="DataAccessLocalizerStringId.UserIdDataSourcePropertyDescription" xml:space="preserve">
    <value>(Optional)&lt;/br&gt;The user ID or name that will be used to establish a connection.</value>
  </data>
  <data name="DataAccessLocalizerStringId.PasswordDataSourcePropertyName" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="DataAccessLocalizerStringId.PasswordDataSourcePropertyDescription" xml:space="preserve">
    <value>(Optional)&lt;/br&gt;The password that will be used to establish a connection with the specified user name.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ConnectionStringDataSourcePropertyName" xml:space="preserve">
    <value>Connection String</value>
  </data>
  <data name="DataAccessLocalizerStringId.ConnectionStringDataSourcePropertyDescription" xml:space="preserve">
    <value>The resulting connection string.</value>
  </data>
  <data name="DataAccessLocalizerStringId.XmlPathDataSourcePropertyName" xml:space="preserve">
    <value>Xml Data Path</value>
  </data>
  <data name="DataAccessLocalizerStringId.XmlPathDataSourcePropertyDescription" xml:space="preserve">
    <value>The full name of the file (including the path) that stores data.</value>
  </data>
  <data name="DataAccessLocalizerStringId.XmlPathPrompt" xml:space="preserve">
    <value>Enter the name of the file (including the path) or use Load Xml button</value>
  </data>
  <data name="DataAccessLocalizerStringId.ShowDesignDataDataSourcePropertyName" xml:space="preserve">
    <value>Sample Data at Design-Time</value>
  </data>
  <data name="DataAccessLocalizerStringId.ShowDesignDataDataSourcePropertyDescription" xml:space="preserve">
    <value>Show Sample Data at Design Time</value>
  </data>
  <data name="DataAccessLocalizerStringId.ShowCodeBehindDataSourcePropertyName" xml:space="preserve">
    <value>Show Code-Behind</value>
  </data>
  <data name="DataAccessLocalizerStringId.ShowCodeBehindDataSourcePropertyDescription" xml:space="preserve">
    <value>Show generated code-behind after Wizard is closed</value>
  </data>
  <data name="DataAccessLocalizerStringId.DataSourceConfiguratorTitle" xml:space="preserve">
    <value>Data Source Configuration Wizard</value>
  </data>
  <data name="DataAccessLocalizerStringId.DataSourceConfiguratorTitleXAML" xml:space="preserve">
    <value>Items Source Configuration Wizard</value>
  </data>
  <data name="DataAccessLocalizerStringId.DataSourceConfiguratorSupportMail" xml:space="preserve">
    <value>support@devexpress.com</value>
  </data>
  <data name="DataAccessLocalizerStringId.DataSourceConfiguratorSupportTextLine1" xml:space="preserve">
    <value>If you have questions regarding this wizard or need any assistance</value>
  </data>
  <data name="DataAccessLocalizerStringId.DataSourceConfiguratorSupportTextLine2" xml:space="preserve">
    <value>with using our products, feel free to contact us at</value>
  </data>
  <data name="DataAccessLocalizerStringId.AddSortCaption" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="DataAccessLocalizerStringId.DeleteSortCaption" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DataAccessLocalizerStringId.InvertSortCaption" xml:space="preserve">
    <value>Invert</value>
  </data>
  <data name="DataAccessLocalizerStringId.AddGroupCaption" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="DataAccessLocalizerStringId.DeleteGroupCaption" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DataAccessLocalizerStringId.CollectionViewSourceRestrictions" xml:space="preserve">
    <value>&lt;b&gt;Important note:&lt;/b&gt; The [CollectionView](http://msdn.microsoft.com/en-us/library/system.windows.data.collectionview.aspx) is a base class for all ICollectionView sources, and does not provide grouping and sorting features. You won't be able to sort and group data in data-aware controls, such as the GridControl, if you are using the CollectionView class.&lt;/br&gt;If you need grouping and sorting in your application, consider using the [ListCollectionView](http://msdn.microsoft.com/en-us/library/system.windows.data.listcollectionview.aspx) or [BindingListCollectionView](http://msdn.microsoft.com/en-us/library/system.windows.data.bindinglistcollectionview.aspx) instead.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ExcelDataSourceDataAccessTechnologyName" xml:space="preserve">
    <value>Excel Data Source</value>
  </data>
  <data name="DataAccessLocalizerStringId.ExcelDataSourceDataAccessTechnologyDescription" xml:space="preserve">
    <value>To create a new Excel data source, click New Data Source.&lt;/br&gt;The &lt;b&gt;ExcelDataSource&lt;/b&gt; component provides the capability to select data from Microsoft Excel workbooks (XLS, XLSX or XLSM files) or CSV files. You can select all data from the specified worksheet/CSV file or select a cell range referenced by the specified defined/table name.</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewDataSourceMessageFormatExcelDataSource" xml:space="preserve">
    <value>After the created data source has been assigned to the control, you can continue configuring the ExcelDataSource using the &lt;b&gt;Edit...&lt;/b&gt; task available in its smart tag.</value>
  </data>
  <data name="DataAccessLocalizerStringId.NewDataSourceTitleExcelDataSource" xml:space="preserve">
    <value>New Excel Data Connection</value>
  </data>
  <data name="DataAccessLocalizerStringId.ExcelPathUnspecified" xml:space="preserve">
    <value>A path to a data file is not specified. You can specify it later using the ExcelDataSource component designer.</value>
  </data>
  <data name="DataAccessLocalizerStringId.ExcelPathDataSourcePropertyName" xml:space="preserve">
    <value>Excel File</value>
  </data>
  <data name="DataAccessLocalizerStringId.ExcelPathDataSourcePropertyDescription" xml:space="preserve">
    <value>The full path to the file that contains data.</value>
  </data>
</root>