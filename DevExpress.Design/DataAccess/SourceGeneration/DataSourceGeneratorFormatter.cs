#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

namespace DevExpress.Design.DataAccess {
	static class DataSourceGeneratorFormatter {
		const string AutoGeneratedLine = "This line of code is generated by";
		const string AutoGeneratedEvent = "This event is generated by";
		public static string GetExpressionString(System.Type dataSourceType, object[] parameters, string format = null) {
			if(!dataSourceType.IsGenericTypeDefinition) {
				AssertionException.IsNotNullOrEmpty(format);
				object[] pArray = new object[parameters.Length + 1];
				pArray[0] = GetConstructorExpressionString(dataSourceType);
				System.Array.Copy(parameters, 0, pArray, 1, parameters.Length);
				return string.Format(format, pArray);
			}
			else {
				System.Type parameterType = parameters[0] as System.Type;
				return string.Format(GetGenericBindingFormat(dataSourceType), GetTypeName(parameterType));
			}
		}
		static string GetTypeName(System.Type type) {
			return (type.IsNested) ? type.FullName.Replace('+', '.') : type.FullName;
		}
		static string GetConstructorExpressionString(System.Type dataSourceType) {
			var constructor = dataSourceType.GetConstructor(new System.Type[] { });
			return "new " + GetTypeName(dataSourceType) + ((constructor != null) ? "()" : string.Empty);
		}
		public static string GetAssignmentFormat(string modelName, string parameterName, IModelItemExpression expression, PlatformCodeName platform) {
			return GetAutoGeneratedLineComment(platform) + modelName + "." + parameterName + " = " + expression.ExpressionString + ";";
		}
		public static string GetCodeFormat(IModelItemExpression expression, PlatformCodeName platform) {
			return GetAutoGeneratedLineComment(platform) + expression.ExpressionString + ";";
		}
		public static string GetUsingFormat(string namespaceString) {
			return "using " + namespaceString + ";";
		}
		public static string GetAutoGeneratedLineComment(PlatformCodeName platform) {
			return "// " + AutoGeneratedLine + " " + GetConfiguratorTitle(platform) + System.Environment.NewLine;
		}
		public static string GetAutoGeneratedEventComment(PlatformCodeName platform) {
			return AutoGeneratedEvent + " " + GetConfiguratorTitle(platform);
		}
		public static string GetConfiguratorTitle(PlatformCodeName platform) {
			DataAccessLocalizerStringId titleId = (platform == PlatformCodeName.Wpf || platform == PlatformCodeName.Silverlight) ?
				DataAccessLocalizerStringId.DataSourceConfiguratorTitleXAML : DataAccessLocalizerStringId.DataSourceConfiguratorTitle;
			return DataAccessLocalizer.GetString(titleId);
		}
		public static string GetGenericBindingFormat(System.Type type) {
			string nonGenericName = type.FullName.Substring(0, type.FullName.Length - 2);
			if(!type.IsInterface)
				return "new " + nonGenericName + "<{0}>()";
			else
				return "(" + nonGenericName + "<{0}>)null /* TODO: Assign the real " + nonGenericName + " source here.*/";
		}
		public static string GetQueryableEventFormat(string constructorParameters, string sourceParameter, string sourceName, string dismissQueryableEventName = "DismissQueryable") {
			return "// Instantiate a new DataContext" + System.Environment.NewLine +
				   "{0} dataContext = new {0}(" + constructorParameters + @");" + System.Environment.NewLine +
				   "// Assign a queryable source to the " + sourceName + System.Environment.NewLine +
				   "e." + sourceParameter + @" = dataContext.{1};" + System.Environment.NewLine +
				   "// Assign the DataContext to the Tag property," + System.Environment.NewLine +
				   "// to dispose of it in the " + dismissQueryableEventName + " event handler" + System.Environment.NewLine +
				   "e.Tag = dataContext;";
		}
		public static string DismissQueryableEventFormat() {
			return "// Dispose of the DataContext" + System.Environment.NewLine +
				   "(({0})e.Tag).Dispose();";
		}
		public static string GetEnumerableEventFormat() {
			return "//Handle this event to supply an enumerable source to the PLinqInstantFeedbackSource" + System.Environment.NewLine +
				"e.Source = " + GetGenericBindingFormat(typeof(System.Collections.Generic.IEnumerable<>)) + ";";
		}
		public static string DismissEnumerableEventFormat() {
			return "// Here you can dismiss the objects you have assigned to the GetEnumerableEventArgs.Tag and GetEnumerableEventArgs.Source properties in the GetEnumerable event handler.";
		}
		public static string GetSourceEventFormat(string constructorParameters, string sourceParameter, string sourceName) {
			return "// Instantiate a new DataContext" + System.Environment.NewLine +
				   "{0} dataContext = new {0}(" + constructorParameters + @");" + System.Environment.NewLine +
				   "// Assign a query to the " + sourceName + System.Environment.NewLine +
				   "e." + sourceParameter + @" = dataContext.{1};" + System.Environment.NewLine +
				   "// Assign the DataContext to the Tag property," + System.Environment.NewLine +
				   "// to dismiss it in the DismissSource event handler" + System.Environment.NewLine +
				   "e.Tag = dataContext;";
		}
		public static string DismissSourceEventFormat() {
			return "// Here you can dismiss the objects you have assigned to the GetSourceEventArgs.Tag and GetSourceEventArgs.Query properties in the GetSource event handler." + System.Environment.NewLine +
				   "{0} dataContext = (({0})e.Tag);";
		}
		public static string ResolveSessionEventFormat() {
			return "// Assign a session to the Session property," + System.Environment.NewLine +
				   "e.Session = new {0}();";
		}
		public static string DismissSessionEventFormat() {
			return "// Here you can dismiss the session instance you have assigned to the ResolveSessionEventArgs.Session property in the ResolveSession event handler." + System.Environment.NewLine +
				   "IDisposable session = e.Session as IDisposable;" + System.Environment.NewLine +
				   "if (session != null) session.Dispose();";
		}
		public static string GetReadXmlFormat() {
			return "// Create a new DataSet" + System.Environment.NewLine +
				   "System.Data.DataSet xmlDataSet = new System.Data.DataSet(\"XML DataSet\");" + System.Environment.NewLine +
				   "// Load the XML document to the DataSet" + System.Environment.NewLine +
				   "xmlDataSet.ReadXml(@\"{0}\")";
		}
		public static string GetDBContextLoadFormat() {
			return "// Instantiate a new DBContext" + System.Environment.NewLine +
				   "{0} dbContext = new {0}();" + System.Environment.NewLine +
				   "// Call the Load method to get the data for the given DbSet from the database." + System.Environment.NewLine +
				   "dbContext.{1}.Load()";
		}
		public static string GetDBContextBindingFormat() {
			return "dbContext.{1}.Local.ToBindingList()";
		}
		public static string GetSqlDataSourceFillFormat() {
			return "// Fill a SqlDataSource" + System.Environment.NewLine +
				   "{0}.Fill()";
		}
		public static string GetExcelDataSourceFillFormat() {
			return "// Fill a ExcelDataSource" + System.Environment.NewLine +
				   "{0}.Fill()";
		}
	}
}
