#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class WilliamsRCalculator {
		const int DesignTimePointsCount = 3;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public WilliamsRCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
		}
		void FindMinMax(IList<RefinedPoint> refinedPoints, int currentIndex, int usingPointsCount, out double maxHigh, out double minLow) {
			IFinancialPoint currFinPoint = refinedPoints[currentIndex];
			maxHigh = currFinPoint.High;
			minLow = currFinPoint.Low;
			for (int i = currentIndex-1; i > currentIndex-usingPointsCount; i--) {
				IFinancialPoint financialPoint = refinedPoints[i];
				if (maxHigh < financialPoint.High)
					maxHigh = financialPoint.High;
				if (minLow > financialPoint.Low)
					minLow = financialPoint.Low;
			}
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int pointsCount) {
			return
				refinedSeries != null &&
				refinedSeries.Points != null &&
				pointsCount > 0 &&
				refinedSeries.Points.Count >= pointsCount &&
				refinedSeries.SeriesView is IFinancialSeriesView;
		}
		public List<GRealPoint2D> Calculate(IRefinedSeries refinedSeries, int pointCount) {
			Calculated = false;
			int actualPointsCount = pointCount;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated)
				actualPointsCount = DesignTimePointsCount;
			if (!IsParametersCorrect(refinedSeries, actualPointsCount))
				return new List<GRealPoint2D>(0);
			IList<RefinedPoint> refinedPoints = refinedSeries.Points;
			IFinancialPoint firstFinancialPoint = refinedPoints[0];
			double r0 = (firstFinancialPoint.Close - firstFinancialPoint.High) / (firstFinancialPoint.High - firstFinancialPoint.Low) * 100;
			double maxIndicatorValue = r0;
			double minIndicatorValue = r0;
			var indicatorPoints = new List<GRealPoint2D>();
			indicatorPoints.Add(new GRealPoint2D(firstFinancialPoint.Argument, r0));
			double maxHigh0 = firstFinancialPoint.High;
			double minLow0 = firstFinancialPoint.Low;
			for (int i = 1; i < actualPointsCount; i++) {
				IFinancialPoint financialPoint = refinedPoints[i];
				if (maxHigh0 < financialPoint.High)
					maxHigh0 = financialPoint.High;
				if (minLow0 > financialPoint.Low)
					minLow0 = financialPoint.Low;
				double r = (financialPoint.Close - maxHigh0) / (maxHigh0 - minLow0) * 100;
				if (r > maxIndicatorValue)
					maxIndicatorValue = r;
				if (r < minIndicatorValue) 
					minIndicatorValue = r;
				indicatorPoints.Add(new GRealPoint2D(financialPoint.Argument, r));
			}
			for (int i = actualPointsCount; i < refinedPoints.Count; i++) {
				double maxHigh = double.NaN;
				double minLow = double.NaN;
				FindMinMax(refinedPoints, i, actualPointsCount, out maxHigh, out minLow);
				IFinancialPoint financialPoint = refinedPoints[i];
				double r = (financialPoint.Close - maxHigh) / (maxHigh - minLow) * 100;
				if (r > maxIndicatorValue)
					maxIndicatorValue = r;
				if (r < minIndicatorValue)
					minIndicatorValue = r;
				indicatorPoints.Add(new GRealPoint2D(financialPoint.Argument, r));
			}
			Calculated = true;
			MaxY = maxIndicatorValue;
			MinY = minIndicatorValue;
			return indicatorPoints;
		}
	}
}
