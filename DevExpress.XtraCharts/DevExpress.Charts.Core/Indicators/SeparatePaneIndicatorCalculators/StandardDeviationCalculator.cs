#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class StandardDeviationCalculator {
		const int DesignTimePointsCount = 3;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public StandardDeviationCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int pointCount, ValueLevelInternal valueLevel) {
			return
				refinedSeries != null &&
				refinedSeries.SeriesView != null &&
				refinedSeries.Points != null &&
				refinedSeries.Points.Count > 2 * pointCount - 1 &&
				pointCount > 0 &&
				refinedSeries.SeriesView.IsCorrectValueLevel(valueLevel);
		}
		double CalculateNextSma(double value, double preSma, int actualPointsCount, double firstInPeriodValue) {
			return preSma - firstInPeriodValue / actualPointsCount + value / actualPointsCount;
		}
		double CalculateStandardDeviation(IList<RefinedPoint> refinedPoints, int actualPointsCount, ValueLevelInternal valueLevel, double sma, int currentRefinedPointIndex) {
			double sum = 0;
			for (int j = currentRefinedPointIndex - actualPointsCount + 1; j < currentRefinedPointIndex + 1; j++) {
				double historicalValue = refinedPoints[j].GetValue(valueLevel);
				sum += (historicalValue - sma) * (historicalValue - sma);
			}
			return Math.Sqrt(sum / actualPointsCount);
		}
		public List<GRealPoint2D> Calculate(IRefinedSeries refinedSeries, int pointCount, ValueLevelInternal valueLevel) { 
			Calculated = false;
			int actualPointsCount = pointCount;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated)
				actualPointsCount = DesignTimePointsCount;
			if (!IsParametersCorrect(refinedSeries, actualPointsCount, valueLevel))
				return new List<GRealPoint2D>(0);
			IList<RefinedPoint> refinedPoints = refinedSeries.Points;
			var indicatorPoints = new List<GRealPoint2D>(refinedPoints.Count);
			var valueQueue = new Queue<double>(actualPointsCount);
			double smaSum = 0.0;
			for (int i = 0; i < actualPointsCount; i++) {
				double value = refinedPoints[i].GetValue(valueLevel);
				valueQueue.Enqueue(value);
				smaSum += value;
			}
			double sma = smaSum / actualPointsCount;
			for (int i = actualPointsCount; i < 2* actualPointsCount - 1; i++) {
				double value = refinedPoints[i].GetValue(valueLevel);
				double firstInPeriodValue = valueQueue.Dequeue();
				sma = CalculateNextSma(value, sma, actualPointsCount, firstInPeriodValue);
				valueQueue.Enqueue(value);
			}
			double preSum = 0;
			for (int j = actualPointsCount - 1; j < 2 * actualPointsCount - 1; j++) {
				double historicalValue = refinedPoints[j].GetValue(valueLevel);
				preSum += (historicalValue - sma) * (historicalValue - sma);
			}
			double stdDev0 = Math.Sqrt(preSum / actualPointsCount);
			double minIndicatorValue = stdDev0;
			double maxIndicatorValue = stdDev0;
			double firstIndicatorPointArg = refinedPoints[2 * actualPointsCount - 2].Argument;
			indicatorPoints.Add(new GRealPoint2D(firstIndicatorPointArg, stdDev0));
			for (int i = 2 * actualPointsCount - 1; i < refinedPoints.Count; i++) {
				double value = refinedPoints[i].GetValue(valueLevel);
				double firstInPeriodValue = valueQueue.Dequeue();
				sma = CalculateNextSma(value, sma, actualPointsCount, firstInPeriodValue);
				valueQueue.Enqueue(value);
				double stdDev = CalculateStandardDeviation(refinedPoints, actualPointsCount, valueLevel, sma, i);
				indicatorPoints.Add(new GRealPoint2D(refinedPoints[i].Argument, stdDev));
				if (stdDev > maxIndicatorValue)
					maxIndicatorValue = stdDev;
				if (stdDev < minIndicatorValue) {
					minIndicatorValue = stdDev;
				}
			}
			Calculated = true;
			MaxY = maxIndicatorValue;
			MinY = minIndicatorValue;
			return indicatorPoints;
		}
	}
}
