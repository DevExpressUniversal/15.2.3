#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class MassIndexCalculator {
		const int DesignTimeMaPointsCountCount = 3;
		const int DesignTimeSumPointsCount = 4;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public MassIndexCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int movingAveragePointsCount, int sumPointsCount) {
			return
				refinedSeries != null &&
				refinedSeries.Points != null &&
				movingAveragePointsCount > 1 &&
				sumPointsCount > 0 &&
				refinedSeries.Points.Count >= sumPointsCount + 2 * movingAveragePointsCount - 3 &&
				refinedSeries.SeriesView is IFinancialSeriesView;
		}
		double CalcNextEma(double value, double preEma, double smoothingFactor) {
			return smoothingFactor * value + (1 - smoothingFactor) * preEma;
		}
		public List<GRealPoint2D> Calculate(IRefinedSeries refinedSeries, int movingAveragePointsCount, int sumPointsCount) { 
			Calculated = false;
			int actualMaPointsCount = movingAveragePointsCount;
			int actualSumPointsCount = sumPointsCount;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated) {
				actualMaPointsCount = DesignTimeMaPointsCountCount;
				actualSumPointsCount = DesignTimeSumPointsCount;
			}
			if (!IsParametersCorrect(refinedSeries, movingAveragePointsCount, sumPointsCount))
				return new List<GRealPoint2D>(0);
			IList<RefinedPoint> refinedPoints = refinedSeries.Points;
			double smoothingFactor = 2.0 / (movingAveragePointsCount + 1);
			IFinancialPoint firstFinancialPoint = refinedPoints[0];
			double ema = firstFinancialPoint.High - firstFinancialPoint.Low;
			var emaList = new List<double>(refinedPoints.Count);
			emaList.Add(ema);
			for (int i = 1; i < refinedPoints.Count; i++) {
				IFinancialPoint financialPoint = refinedPoints[i];
				double spread = financialPoint.High - financialPoint.Low;
				ema = CalcNextEma(spread, ema, smoothingFactor);
				emaList.Add(ema);
			}
			double dma = emaList[movingAveragePointsCount - 1];
			for (int i = movingAveragePointsCount; i < 2 * movingAveragePointsCount - 2; i++) {
				dma = CalcNextEma(emaList[i], dma, smoothingFactor);
			}
			double sum = 0;		
			var ratioQueue = new Queue<double>();
			for (int i = 2 * movingAveragePointsCount - 2; i < sumPointsCount + 2 * movingAveragePointsCount - 3 + 1; i++) {
				dma = CalcNextEma(emaList[i], dma, smoothingFactor);
				double ratio = emaList[i] / dma;
				sum += ratio;
				ratioQueue.Enqueue(ratio);
			}
			double minIndicatorValue = sum;
			double maxIndicatorValue = sum;
			var indicatorPoints = new List<GRealPoint2D>();
			indicatorPoints.Add(new GRealPoint2D(refinedPoints[sumPointsCount + 2 * movingAveragePointsCount - 3].Argument, sum));
			for (int i = sumPointsCount + 2 * movingAveragePointsCount - 3 + 1; i < refinedPoints.Count; i++) {
				dma = CalcNextEma(emaList[i], dma, smoothingFactor);
				double ratio = emaList[i] / dma;
				sum = sum - ratioQueue.Dequeue() + ratio;
				ratioQueue.Enqueue(ratio);
				indicatorPoints.Add(new GRealPoint2D(refinedPoints[i].Argument, sum));
				if (sum > maxIndicatorValue)
					maxIndicatorValue = sum;
				if (sum < minIndicatorValue) {
					minIndicatorValue = sum;
				}
			}
			Calculated = true;
			MaxY = maxIndicatorValue;
			MinY = minIndicatorValue;
			return indicatorPoints;
		}
	}
}
