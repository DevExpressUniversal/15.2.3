#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class CommodityChannelIndexCalculator {
		const int DesignTimePointsCount = 3;
		const double ReductionFactor = 100.0 * 2.0 / 3.0;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public CommodityChannelIndexCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
		}
		double CalculateTypicalPrice(IFinancialPoint refinedPoint) {
			return (refinedPoint.High + refinedPoint.Low + refinedPoint.Close) / 3.0;
		}
		double CalculateMad(Queue<double> typicalPriceQueue, double tpma) {
			double sum = 0.0;
			foreach (double typicalPrice in typicalPriceQueue) {
				sum += Math.Abs(typicalPrice - tpma);
			}
			return sum / typicalPriceQueue.Count;
		}
		double CalculateCCI(double typicalPrice, double tpma, double mad) {
			return ReductionFactor * ((typicalPrice - tpma) / mad);
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int pointsCount) {
			return
				refinedSeries != null &&
				refinedSeries.Points != null &&
				pointsCount > 1 &&
				refinedSeries.Points.Count > pointsCount &&
				refinedSeries.SeriesView is IFinancialSeriesView;
		}
		public List<GRealPoint2D> Calculate(IRefinedSeries refinedSeries, int pointsCount) {
			Calculated = false;		   
			IList<RefinedPoint> refinedPoints = refinedSeries.Points;
			int actualPointsCount = pointsCount;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated)
				actualPointsCount = DesignTimePointsCount;
			if (!IsParametersCorrect(refinedSeries, actualPointsCount))
				return new List<GRealPoint2D>(0);
			IFinancialPoint firstFinancialPoint = refinedSeries.Points[0];
			double adderTP = 0; 
			var typicalPriceQueue = new Queue<double>(actualPointsCount);
			double typicalPrice = double.NaN;
			for (int i = 0; i < actualPointsCount; i++) {
				typicalPrice = CalculateTypicalPrice(refinedPoints[i]);
				typicalPriceQueue.Enqueue(typicalPrice);
				adderTP += typicalPrice;
			}
			double tpma = adderTP / actualPointsCount; 
			double mad = CalculateMad(typicalPriceQueue, tpma); 
			double cci = CalculateCCI(typicalPrice, tpma, mad);
			var indicatorPoints = new List<GRealPoint2D>(refinedPoints.Count);
			indicatorPoints.Add(new GRealPoint2D(refinedPoints[actualPointsCount - 1].Argument, cci));
			double minIndicatorValue = cci;
			double maxIndicatorValue = cci;
			for (int i = actualPointsCount; i < refinedPoints.Count; i++) {
				RefinedPoint refinedPoint = refinedPoints[i];
				typicalPrice = CalculateTypicalPrice(refinedPoint);
				tpma = tpma - typicalPriceQueue.Dequeue() / actualPointsCount + typicalPrice / actualPointsCount;
				typicalPriceQueue.Enqueue(tpma);
				mad = CalculateMad(typicalPriceQueue, tpma);
				cci = CalculateCCI(typicalPrice, tpma, mad);
				indicatorPoints.Add(new GRealPoint2D(refinedPoint.Argument, cci));
				if (cci > maxIndicatorValue)
					maxIndicatorValue = cci;
				if (cci < minIndicatorValue) {
					minIndicatorValue = cci;
				}
			}
			Calculated = true;
			MaxY = maxIndicatorValue;
			MinY = minIndicatorValue;
			return indicatorPoints;
		}
	}
}
