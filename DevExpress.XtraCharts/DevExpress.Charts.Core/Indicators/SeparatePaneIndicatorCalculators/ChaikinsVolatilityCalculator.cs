#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class ChaikinsVolatilityCalculator {
		const int DesignTimePointsCount = 3;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public ChaikinsVolatilityCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
		}
		double CalcChv(double ema, double oldEma) {
			return (ema - oldEma) / oldEma * 100;
		}
		double CalcNextEma(IFinancialPoint point, double preEma, double smoothingFactor) {
			return smoothingFactor * (point.High - point.Low) + (1 - smoothingFactor) * preEma;
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int pointsCount) {
			return
				refinedSeries != null &&
				refinedSeries.Points != null &&
				pointsCount > 0 &&
				refinedSeries.Points.Count > pointsCount + 1 &&
				refinedSeries.SeriesView is IFinancialSeriesView;
		}
		public List<GRealPoint2D> Calculate(IRefinedSeries refinedSeries, int pointsCount) { 
			Calculated = false;
			int actualPointsCount = pointsCount;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated)
				actualPointsCount = DesignTimePointsCount;
			if (!IsParametersCorrect(refinedSeries, actualPointsCount))
				return new List<GRealPoint2D>(0);
			IList<RefinedPoint> refinedPoints = refinedSeries.Points;
			IFinancialPoint firstFinancialPoint = refinedPoints[0];
			double ema = firstFinancialPoint.High - firstFinancialPoint.Low;
			double smoothingFactor = 1.0;
			var emaQueue = new Queue<double>(actualPointsCount);
			emaQueue.Enqueue(ema);
			for (int i = 1; i < actualPointsCount; i++) {
				IFinancialPoint financialPoint = refinedPoints[i];
				smoothingFactor = 2.0 / (i + 1.0);
				ema = CalcNextEma(financialPoint, ema, smoothingFactor);
				emaQueue.Enqueue(ema);
			}
			IFinancialPoint financialPointN = refinedPoints[actualPointsCount];
			double emaN = CalcNextEma(financialPointN, ema, smoothingFactor);
			double chvN = CalcChv(emaN, emaQueue.Dequeue());
			emaQueue.Enqueue(emaN);
			double minIndicatorValue = chvN;
			double maxIndicatorValue = chvN;
			var indicatorPoints = new List<GRealPoint2D>(refinedPoints.Count - actualPointsCount);
			indicatorPoints.Add(new GRealPoint2D(financialPointN.Argument, chvN));
			for (int i = actualPointsCount + 1; i < refinedPoints.Count; i++) {
				IFinancialPoint financialPoint = refinedPoints[i];
				double diff = financialPoint.High - financialPoint.Low;
				ema = CalcNextEma(financialPoint, ema, smoothingFactor);
				double chv = CalcChv(ema, emaQueue.Dequeue());
				emaQueue.Enqueue(ema);
				indicatorPoints.Add(new GRealPoint2D(financialPoint.Argument, chv));
				if (chv > maxIndicatorValue)
					maxIndicatorValue = chv;
				if (chv < minIndicatorValue) {
					minIndicatorValue = chv;
				}
			}
			Calculated = true;
			MaxY = maxIndicatorValue;
			MinY = minIndicatorValue;
			return indicatorPoints;
		}
	}
}
