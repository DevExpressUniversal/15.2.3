#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class TripleExponentialMovingAverageTrixCalculator {
		const int DesignTimePointsCount = 3;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public TripleExponentialMovingAverageTrixCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
		}
		double CalcTrix(double tma, double tmaPre) {
			return (tma - tmaPre) / tmaPre * 100;
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int smoothingPointCount, ValueLevelInternal valueLevel) {
			return
				refinedSeries != null &&
				refinedSeries.Points != null &&
				refinedSeries.SeriesView != null &&
				refinedSeries.Points.Count > 3 * smoothingPointCount - 2 &&
				smoothingPointCount > 1 &&
				refinedSeries.Points.Count > 1 &&
				refinedSeries.SeriesView.IsCorrectValueLevel(valueLevel);
		}
		public List<GRealPoint2D> Calculate(IRefinedSeries refinedSeries, int smoothingPointCount, ValueLevelInternal valueLevel) {
			Calculated = false;
			int actualPointsCount = smoothingPointCount;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated)
				actualPointsCount = DesignTimePointsCount;
			if (!IsParametersCorrect(refinedSeries, actualPointsCount, valueLevel))
				return new List<GRealPoint2D>();
			var indicatorPoints = new List<GRealPoint2D>(refinedSeries.Points.Count - 1);
			var temaCalculator = new TripleExponentialMovingAverageCalculator();
			temaCalculator.Calculate(refinedSeries, actualPointsCount, valueLevel, MovingAverageKindInternal.MovingAverage, 0.0);
			List<GRealPoint2D> tmaList = temaCalculator.MovingAverageData;
			int firstPointIndex = 3 * actualPointsCount - 2;
			double trix1 = CalcTrix(tmaList[firstPointIndex].Y, tmaList[firstPointIndex - 1].Y);
			indicatorPoints.Add(new GRealPoint2D(tmaList[firstPointIndex].X, trix1));
			double min = trix1;
			double max = trix1;
			for (int i = 3 * actualPointsCount - 1; i < tmaList.Count; i++) {
				double trix = CalcTrix(tmaList[i].Y, tmaList[i - 1].Y);
				indicatorPoints.Add(new GRealPoint2D(tmaList[i].X, trix));
				if (trix > max)
					max = trix;
				if (trix < min)
					min = trix;
			}
			MinY = min;
			MaxY = max;
			Calculated = true;
			return indicatorPoints;
		}
	}
}
