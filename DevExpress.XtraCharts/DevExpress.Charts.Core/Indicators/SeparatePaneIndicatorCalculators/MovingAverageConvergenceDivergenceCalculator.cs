#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class MovingAverageConvergenceDivergenceCalculator {
		const int DesignTimeShortPeriod = 2;
		const int DesignTimeLongPeriod = 4;
		const int DesignTimeSmoothingPeriod = 2;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public List<GRealPoint2D> MacdPoints { get; private set; }
		public List<GRealPoint2D> SignalPoints { get; private set; }
		public MovingAverageConvergenceDivergenceCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
			MacdPoints = new List<GRealPoint2D>();
			SignalPoints = new List<GRealPoint2D>();
		}
		double CalculateNextEma(double value, double preEma, double smoothingFactor) {
			return smoothingFactor * value + (1 - smoothingFactor) * preEma;
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int shortPeriod, int longPeriod, int smoothingPeriod, ValueLevelInternal valueLevel) {
			return
				refinedSeries != null &&
				refinedSeries.Points != null &&
				shortPeriod > 0 &&
				longPeriod > shortPeriod &&
				smoothingPeriod > 0 && 
				refinedSeries.Points.Count > longPeriod + smoothingPeriod &&
				refinedSeries.SeriesView.IsCorrectValueLevel(valueLevel);
		}
		public void Calculate(IRefinedSeries refinedSeries, int shortPeriod, int longPeriod, int smoothingPeriod, ValueLevelInternal valueLevel) { 
			Calculated = false;
			MacdPoints.Clear();
			SignalPoints.Clear();
			int actualShortPeriod = shortPeriod;
			int actualLongPeriod = longPeriod;
			int actualSmoothingPeriod = smoothingPeriod;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated) {
				actualShortPeriod = DesignTimeShortPeriod;
				actualLongPeriod = DesignTimeLongPeriod;
				actualSmoothingPeriod = DesignTimeSmoothingPeriod;
			}
			if (!IsParametersCorrect(refinedSeries, actualShortPeriod, actualLongPeriod, actualSmoothingPeriod, valueLevel))
				return;
			IList<RefinedPoint> refinedPoints = refinedSeries.Points;
			double shortEma = refinedPoints[0].GetValue(valueLevel);
			double shortSmoothingFactor = 1.0;
			for (int i = 1; i < actualShortPeriod; i++) {
				shortSmoothingFactor = 2.0 / (i + 2.0);
				double value = refinedPoints[i].GetValue(valueLevel);
				shortEma = CalculateNextEma(value, shortEma, shortSmoothingFactor);
			}
			double longEma = shortEma;
			double longSmoothingFactor = shortSmoothingFactor;
			for (int i = actualShortPeriod; i < actualLongPeriod; i++) {
				longSmoothingFactor = 2.0 / (i + 2.0);
				double value = refinedPoints[i].GetValue(valueLevel);
				shortEma = CalculateNextEma(value, shortEma, shortSmoothingFactor);
				longEma = CalculateNextEma(value, longEma, longSmoothingFactor);
			}
			double macd = shortEma - longEma;
			double minIndicatorValue = macd;
			double maxIndicatorValue = macd;
			MacdPoints.Add(new GRealPoint2D(refinedPoints[actualLongPeriod - 1].Argument, macd));
			double emaOfMacd = macd;
			double signalSmoothingFactor = double.NaN;
			for (int i = actualLongPeriod, j=0; i < actualLongPeriod + actualSmoothingPeriod; i++, j++) {
				double value = refinedPoints[i].GetValue(valueLevel);
				shortEma = CalculateNextEma(value, shortEma, shortSmoothingFactor); 
				longEma = CalculateNextEma(value, longEma, longSmoothingFactor); 
				macd = shortEma - longEma;
				signalSmoothingFactor = 2.0 / (j + 2.0);
				emaOfMacd = CalculateNextEma(macd, emaOfMacd, signalSmoothingFactor);
				if (macd > maxIndicatorValue)
					maxIndicatorValue = macd;
				if (macd < minIndicatorValue)
					minIndicatorValue = macd;
				MacdPoints.Add(new GRealPoint2D(refinedPoints[i].Argument, macd));
			}
			if (emaOfMacd > maxIndicatorValue)
				maxIndicatorValue = emaOfMacd;
			if (emaOfMacd < minIndicatorValue)
				minIndicatorValue = emaOfMacd;
			SignalPoints.Add(new GRealPoint2D(refinedPoints[actualLongPeriod + actualSmoothingPeriod - 1].Argument, emaOfMacd));
			for (int i = actualLongPeriod + actualSmoothingPeriod; i < refinedPoints.Count; i++) {
				double value = refinedPoints[i].GetValue(valueLevel);
				shortEma = CalculateNextEma(value, shortEma, shortSmoothingFactor);
				longEma = CalculateNextEma(value, longEma, longSmoothingFactor);
				macd = shortEma - longEma;
				if (macd > maxIndicatorValue)
					maxIndicatorValue = macd;
				if (macd < minIndicatorValue)
					minIndicatorValue = macd;
				emaOfMacd = CalculateNextEma(macd, emaOfMacd, signalSmoothingFactor);
				if (emaOfMacd > maxIndicatorValue)
					maxIndicatorValue = emaOfMacd;
				if (emaOfMacd < minIndicatorValue)
					minIndicatorValue = emaOfMacd;
				MacdPoints.Add(new GRealPoint2D(refinedPoints[i].Argument, macd));
				SignalPoints.Add(new GRealPoint2D(refinedPoints[i].Argument, emaOfMacd));
			}
			Calculated = true;
			MaxY = maxIndicatorValue;
			MinY = minIndicatorValue;
		}
	}
}
