#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public class BollingerBandsCalculator {
		const int DesignTimePointsCount = 3;
		public bool Calculated { get; private set; }
		public double MinY { get; private set; }
		public double MaxY { get; private set; }
		public List<GRealPoint2D> MovingAveragePoints { get; private set; }
		public List<GRealPoint2D> UpperBandPoints { get; private set; }
		public List<GRealPoint2D> LowerBandPoints { get; private set; }
		public BollingerBandsCalculator() {
			Calculated = false;
			MinY = 0.0;
			MaxY = 1.0;
			MovingAveragePoints = new List<GRealPoint2D>();
			UpperBandPoints = new List<GRealPoint2D>();
			LowerBandPoints = new List<GRealPoint2D>();
		}
		double CalcEma(double value, double preEma, double smoothingFactor) {
			return smoothingFactor * value + (1 - smoothingFactor) * preEma;
		}
		bool IsParametersCorrect(IRefinedSeries refinedSeries, int pointsCount, double deviationMultiplier, ValueLevelInternal valueLevel) {
			return
				refinedSeries != null &&
				refinedSeries.Points != null &&
				refinedSeries.SeriesView != null &&
				refinedSeries.Points.Count > 1 &&
				refinedSeries.Points.Count > pointsCount &&
				refinedSeries.SeriesView.IsCorrectValueLevel(valueLevel) &&
				pointsCount > 1 &&
				!double.IsNaN(deviationMultiplier) && 
				!double.IsInfinity(deviationMultiplier);
		}
		double CalcStdDeviation(IList<RefinedPoint> refinedPoints, double sma, int index, int pointsCount, ValueLevelInternal valueLevel) {
			double amount = 0.0;
			for (int j = index - pointsCount + 1; j < index + 1; j++) {
				double valueJ = refinedPoints[j].GetValue(valueLevel);
				amount += (valueJ - sma) * (valueJ - sma);
			}
			return Math.Sqrt(amount / pointsCount);
		}
		public void Calculate(IRefinedSeries refinedSeries, int pointsCount, double deviationMultiplier, ValueLevelInternal valueLevel) {
			Calculated = false;
			MovingAveragePoints.Clear();
			UpperBandPoints.Clear();
			LowerBandPoints.Clear();
			int actualPointsCount = pointsCount;
			if (refinedSeries != null && refinedSeries.IsPointsAutoGenerated)
				actualPointsCount = DesignTimePointsCount;
			if (!IsParametersCorrect(refinedSeries, actualPointsCount, deviationMultiplier, valueLevel))
				return;
			IList<RefinedPoint> refinedPoints = refinedSeries.Points;
			double smaSum = 0;
			var valuesQueue = new Queue<double>(actualPointsCount);
			for (int i = 0; i < actualPointsCount; i++) {
				double value = refinedPoints[i].GetValue(valueLevel);
				smaSum += value;
				valuesQueue.Enqueue(value);
			}
			double sma = smaSum / actualPointsCount;
			double argument0 = refinedPoints[actualPointsCount - 1].Argument;
			double stdDeviation0 =CalcStdDeviation(refinedPoints, sma, actualPointsCount - 1, actualPointsCount, valueLevel);
			double upperBandValue0 = sma + deviationMultiplier * stdDeviation0;
			double lowerBandValue0 = sma - deviationMultiplier * stdDeviation0;
			MovingAveragePoints.Add(new GRealPoint2D(argument0, sma));
			UpperBandPoints.Add(new GRealPoint2D(argument0, upperBandValue0));
			LowerBandPoints.Add(new GRealPoint2D(argument0, lowerBandValue0));
			double minIndicatorValue = upperBandValue0;
			double maxIndicatorValue = lowerBandValue0;
			for (int i = actualPointsCount; i < refinedPoints.Count; i++) {
				double valueI = refinedPoints[i].GetValue(valueLevel);
				sma = sma - valuesQueue.Dequeue() / actualPointsCount + valueI / actualPointsCount;
				valuesQueue.Enqueue(valueI);
				double stdDeviation = CalcStdDeviation(refinedPoints, sma, i, actualPointsCount, valueLevel);
				double argument = refinedPoints[i].Argument;
				double upperBandValue = sma + deviationMultiplier * stdDeviation;
				double lowerBandValue = sma - deviationMultiplier * stdDeviation;
				MovingAveragePoints.Add(new GRealPoint2D(argument, sma));
				UpperBandPoints.Add(new GRealPoint2D(argument, upperBandValue));
				LowerBandPoints.Add(new GRealPoint2D(argument, lowerBandValue));
				if (lowerBandValue < minIndicatorValue)
					minIndicatorValue = lowerBandValue;
				if (upperBandValue > maxIndicatorValue)
					maxIndicatorValue = upperBandValue;
			}
			Calculated = true;
			MaxY = maxIndicatorValue;
			MinY = minIndicatorValue;
		}
	}
}
