#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections;
using System.Collections.Generic;
namespace DevExpress.Charts.Native {
	public struct AxisGridItem : IComparable {
		double value;
		bool isAutogenerated;
		bool visible;
		public double Value { get { return value; } set { this.value = value; } }
		public bool IsAutogenerated { get { return isAutogenerated; } set { isAutogenerated = value; } }
		public bool Visible { get { return visible; } set { this.visible = value; } }
		#region IComparable Members
		int IComparable.CompareTo(object obj) {
			if (obj is AxisGridItem)
				return SortingUtils.CompareDoubles(value, ((AxisGridItem)obj).value);
			return 1;
		}
		#endregion
	}
	public class AxisGridItemList : IEnumerable<AxisGridItem> {
		readonly List<AxisGridItem> innerItems = new List<AxisGridItem>();
		double minVisibleValue = double.PositiveInfinity;
		double maxVisibleValue = double.NegativeInfinity;
		int visibleItemsCount;
		int invisibleItemsCount;
		List<double> visibleValues;
		public List<double> VisibleValues {
			get {
				if (visibleValues == null)
					visibleValues = CreateVisibleValues();
				return visibleValues;
			}
		}
		public int VisibleItemsCount { get { return visibleItemsCount; } }
		public int InvisibleItemsCount { get { return invisibleItemsCount; } }
		public double MinVisibleValue { get { return minVisibleValue; } }
		public double MaxVisibleValue { get { return maxVisibleValue; } }
		public AxisGridItem this[int index] {
			get { return innerItems[index]; }
			set {
				RemoveItem(innerItems[index]);
				innerItems[index] = value;
				UpdateValues(value);
			}
		}
		public int Count { get { return innerItems.Count; } }
		public AxisGridItem First { get { return innerItems[0]; } }
		public AxisGridItem Last { get { return innerItems[Count - 1]; } }
		#region IEnumerable<AxisGridItem> Members
		IEnumerator<AxisGridItem> IEnumerable<AxisGridItem>.GetEnumerator() {
			return innerItems.GetEnumerator();
		}
		#endregion
		#region IEnumerable Members
		IEnumerator IEnumerable.GetEnumerator() {
			return innerItems.GetEnumerator();
		}
		#endregion
		void UpdateValues(AxisGridItem newItem) {
			if (newItem.Visible) {
				minVisibleValue = Math.Min(newItem.Value, minVisibleValue);
				maxVisibleValue = Math.Max(newItem.Value, maxVisibleValue);
				visibleItemsCount++;
			}
			else
				invisibleItemsCount++;
			visibleValues = null;
		}
		void RemoveItem(AxisGridItem item) {
			if (item.Visible)
				visibleItemsCount--;
			else
				invisibleItemsCount--;
			visibleValues = null;
		}
		List<double> CreateVisibleValues() {
			List<double> visibleValues = new List<double>();
			foreach (AxisGridItem gridItem in innerItems) {
				if (gridItem.Visible)
					visibleValues.Add(gridItem.Value);
			}
			return visibleValues;
		}
		void Add(AxisGridItem item) {
			innerItems.Add(item);
			UpdateValues(item);
		}
		void Insert(int index, AxisGridItem item) {
			innerItems.Insert(index, item);
			UpdateValues(item);
		}
		public void AddUniqueValue(AxisGridItem value) {
			if (Count != 0) {
				double lastValue = Last.Value;
				double firstValue = First.Value;
				if (lastValue == value.Value)
					return;
				if (firstValue == value.Value)
					return;
				if (lastValue < value.Value)
					Add(value);
				else if (firstValue > value.Value)
					Insert(0, value);
				else {
					int index = innerItems.BinarySearch(value);
					if (index < 0)
						Insert(~index, value);
				}
			}
			else
				Add(value);
		}
	}
}
