#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Linq;
using System.Web.UI.Design;
using System.Web.UI.WebControls;
using System.Windows.Forms;
using System.Windows.Forms.Design;
using DevExpress.Utils;
using DevExpress.Web.Internal;
using DevExpress.XtraPrinting.Native;
namespace DevExpress.Web.Design {
	public abstract class GridDesignerBase : ASPxDataWebControlDesigner {
		[DefaultValue(false)]
		public bool DataSourceForceStandardPaging {
			get { return Grid.DataSourceForceStandardPaging; }
			set {
				if(DataSourceForceStandardPaging == value)
					return;
				Grid.DataSourceForceStandardPaging = value;
				if(value)
					MessageBox.Show("Activating 'DataSourceForceStandardPaging' automatically disables built-in unbound columns, grouping, summaries and filtering support.", 
						"Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
			}
		}
		[DefaultValue(true)]
		public bool AutoGenerateColumns {
			get { return Grid.AutoGenerateColumns; }
			set {
				if(AutoGenerateColumns == value)
					return;
				Grid.AutoGenerateColumns = value;
				OnAutoGenerateColumnsChanged();
			}
		}
		protected new abstract TemplateGroupCollection TemplateGroups { get; }
		public abstract ASPxWebControlDesignerActionList ActionList { get; }
		public abstract GridDesignerHelperBase BaseHelper { get; }
		void OnAutoGenerateColumnsChanged() {
			if(!AutoGenerateColumns)
				return;
			var allColumns = Grid.ColumnHelper.AllColumns;
			foreach(var column in allColumns) {
				var dataColumn = column as IWebGridDataColumn;
				if(dataColumn != null)
					dataColumn.Adapter.AutoGenerated = true;
			}
			TypeDescriptor.Refresh(Grid);
			ComponentChanged();
		}
		protected override void OnSchemaRefreshed() {
			base.OnSchemaRefreshed();
			BaseHelper.OnSchemaRefreshed();
		}
		protected override void DataBind(ASPxDataWebControlBase dataControl) {
			BaseHelper.DataBind(dataControl);
			base.DataBind(dataControl);
		}
		public override void Initialize(IComponent component) {
			base.Initialize(component);
			SetViewFlags(ViewFlags.TemplateEditing, true);
			RegisterTagPrefix(typeof(ASPxEditBase));
		}
		protected override void FillPropertyNameToCaptionMap(Dictionary<string, string> propertyNameToCaptionMap) {
			base.FillPropertyNameToCaptionMap(propertyNameToCaptionMap);
			propertyNameToCaptionMap.Add("GroupSummary", "Groups Summary");
			propertyNameToCaptionMap.Add("TotalSummary", "Totals Summary");
		}
		public override void EnsureControlReferences() {
			base.EnsureControlReferences();
		}
		protected internal ASPxGridBase Grid { get { return Component as ASPxGridBase; } }
		protected override void PreFilterProperties(System.Collections.IDictionary properties) {
			base.PreFilterProperties(properties);
			var autog = (PropertyDescriptor)properties["AutoGenerateColumns"];
			properties["AutoGenerateColumns"] = TypeDescriptor.CreateProperty(typeof(GridDesignerBase), autog);
			if(Grid.AutoGenerateColumns) {
				PropertyDescriptor oldPropertyDescriptor = (PropertyDescriptor)properties["Columns"];
				if(oldPropertyDescriptor != null) {
					Attribute[] attributes = new Attribute[] { new BrowsableAttribute(false) };
					properties["Columns"] = TypeDescriptor.CreateProperty(typeof(GridDesignerBase), oldPropertyDescriptor, attributes);
				}
			}
			PropertyDescriptor dsForceStdPaging = (PropertyDescriptor)properties["DataSourceForceStandardPaging"];
			properties["DataSourceForceStandardPaging"] = TypeDescriptor.CreateProperty(typeof(GridDesignerBase), dsForceStdPaging);
			PerformPrefilterProperty(properties, "DataSourceID", typeof(GridDataSourceIDConverter));
		}
		public GridColumnCollection Columns { get { return Grid == null ? null : Grid.Columns; } }
		protected override TemplateGroupCollection CreateTemplateGroups() {
			var templateGroups = base.CreateTemplateGroups();
			templateGroups.AddRange(TemplateGroups);
			return templateGroups;
		}
		protected override bool IsControlRequireHttpHandlerRegistration() {
			return Columns != null && Columns.OfType<WebColumnBase>().Any(x => ColumnTypesRequireHttpHandlerRegistration.Any(t => x.GetType().IsAssignableFrom(t)));
		}
		protected override ASPxWebControlDesignerActionList CreateCommonActionList() {
			return ActionList;
		}
		public override void ShowAbout() {
			GridViewAboutDialogHelper.ShowAbout(Component.Site);
		}
	}
	public abstract class GridViewDesignerActionListBase : ASPxWebControlDesignerActionList {
		const string AllowModifyCategoryName = "AllowModify";
		public const string EditingCategoryName = "Editing";
		ASPxWebControlDesigner designer = null;
		List<DesignerActionItem> propertyActionItems;
		public GridViewDesignerActionListBase(ASPxWebControlDesigner designer)
			: base(designer) {
			this.designer = designer;
		}
		protected new ASPxWebControlDesigner Designer {
			get { return designer; }
		}
		internal List<DesignerActionItem> PropertyActionItems {
			get {
				if(propertyActionItems == null)
					propertyActionItems = new List<DesignerActionItem>();
				return propertyActionItems;
			}
		}
		protected abstract ASPxGridBase Grid { get; }
		public override DesignerActionItemCollection GetSortedActionItems() {
			if(Grid.SettingsPager.Mode == GridViewPagerMode.ShowPager) {
				PropertyActionItems.Add(new DesignerActionPropertyItem("ShowPager",
					StringResources.GridViewActionList_ShowPager,
					StringResources.GridViewActionList_ChecksCategory,
					StringResources.GridViewActionList_ShowPagerDescription));
			}
			PropertyActionItems.Add(new DesignerActionPropertyItem("ShowSearchPanel",
				StringResources.GridViewActionList_ShowSearchPanel,
				StringResources.GridViewActionList_ChecksCategory,
				StringResources.GridViewActionList_ShowSearchPanelDescription));
			PropertyActionItems.Add(new DesignerActionPropertyItem("ShowSelectCheckBox",
				StringResources.GridViewActionList_ShowSelectCheckBox,
				StringResources.GridViewActionList_ChecksCategory,
				StringResources.GridViewActionList_ShowSelectCheckBoxDescription));
			PropertyActionItems.Add(new DesignerActionPropertyItem("ShowEditButton",
				StringResources.GridViewActionList_ShowEditButton,
				EditingCategoryName,
				StringResources.GridViewActionList_ShowEditButtonDescription));
			PropertyActionItems.Add(new DesignerActionPropertyItem("ShowNewButton",
					StringResources.GridViewActionList_ShowNewButton,
					EditingCategoryName,
					StringResources.GridViewActionList_ShowNewButtonDescription));
			PropertyActionItems.Add(new DesignerActionPropertyItem("ShowDeleteButton",
				StringResources.GridViewActionList_ShowDeleteButton,
				EditingCategoryName,
				StringResources.GridViewActionList_ShowDeleteButtonDescription));
			PropertyActionItems.Add(new DesignerActionPropertyItem("AllowEdit",
				StringResources.DataEditingActionList_AllowEdit,
				AllowModifyCategoryName,
				StringResources.DataEditingActionList_AllowEdit)); 
			PropertyActionItems.Add(new DesignerActionPropertyItem("AllowInsert",
				StringResources.DataEditingActionList_AllowInsert,
				AllowModifyCategoryName,
				StringResources.DataEditingActionList_AllowInsert)); 
			PropertyActionItems.Add(new DesignerActionPropertyItem("AllowDelete",
				StringResources.DataEditingActionList_AllowDelete,
				AllowModifyCategoryName,
				StringResources.DataEditingActionList_AllowDelete)); 
			var result = base.GetSortedActionItems();
			PropertyActionItems.ForEach(i => result.Add(i));			
			return result;
		}
		public bool ShowPager {
			get { return Grid.SettingsPager.Visible; }
			set {
				EditorContextHelper.SetPropertyValue(Designer, Grid.SettingsPager, "Visible", value, null);
				EditorContextHelper.FireChanged(Designer, Grid, "SettingsPager");
				EditorContextHelper.RefreshSmartPanel(Component);
			}
		}
		public abstract bool ShowSelectCheckBox { get; set; }
		public abstract bool ShowDeleteButton { get; set; }
		public abstract bool ShowEditButton { get; set; }
		public abstract bool ShowNewButton { get; set; }
		public bool AllowEdit {
			get { return Grid.SettingsDataSecurity.AllowEdit; }
			set {
				Grid.SettingsDataSecurity.AllowEdit = value;
				Designer.FireControlPropertyChanged("Settings");
			}
		}
		public bool AllowInsert {
			get { return Grid.SettingsDataSecurity.AllowInsert; }
			set {
				Grid.SettingsDataSecurity.AllowInsert = value;
				Designer.FireControlPropertyChanged("Settings");
			}
		}
		public bool AllowDelete {
			get { return Grid.SettingsDataSecurity.AllowDelete; }
			set {
				Grid.SettingsDataSecurity.AllowDelete = value;
				Designer.FireControlPropertyChanged("Settings");
			}
		}
		public bool ShowSearchPanel {
			get { return Grid.SettingsSearchPanel.Visible; }
			set {
				Grid.SettingsSearchPanel.Visible = value;
				Designer.FireControlPropertyChanged("SettingsSearchPanel");
			}
		}
	}
	public abstract class GridDesignerHelperBase {
		string columnTemplateName = "Columns[{0}].{1}";
		Dictionary<char, Type[]> TemplatePrefixColumnTypes = new Dictionary<char, Type[]>() { 
			{ '$', new Type[] { typeof(GridViewDataColumn) } },
			{ '!', new Type[] { typeof(GridViewDataColumn), typeof(GridViewBandColumn) } }
		};
		string editFormLayoutTemplateGroupNamePrefix = "EditFormLayout.";
		string editFormLayoutTemplateGroupNamePart = "Items[{0}].";
		public ASPxGridBase grid;
		public GridDesignerHelperBase(ASPxDataWebControlDesigner designer) {
			Designer = designer;
		}
		public TemplateGroupCollection TemplateGroups { get { return CreateTemplateGroups(); } }
		public ASPxDataWebControlDesigner Designer { get; private set; }
		public IDataSourceViewSchema DataSourceSchema {
			get {
				var designerView = Designer.DesignerView;
				if(designerView != null) {
					try {
						return designerView.Schema;
					} catch {
					}
				}
				return null;
			}
		}
		public ASPxGridBase GridBase {
			get {
				if(grid == null) {
					var component = Designer.Component;
					if(component is ASPxGridLookup)
						grid = ((ASPxGridLookup)component).Properties.GridView;
					else
						grid = component as ASPxGridBase;
				}
				return grid;
			}
		}
		protected abstract PropertiesBase GridTemplates { get; }
		protected abstract string GridPlaceholderName { get; }
		protected virtual List<string> GetControlTemplateNames(){
			return new List<string>() { "Header", "DataItem", "EditForm", "StatusBar", "TitlePanel", "PagerBar" };
		}
		protected virtual List<string> GetColumnTemplateNames() {
			return new List<string>() { "HeaderTemplate", "$DataItemTemplate", "$EditItemTemplate" };
		}
		public void OnSchemaRefreshed() {
			Cursor current = Cursor.Current;
			try {
				Cursor.Current = Cursors.WaitCursor;
				System.Web.UI.Design.ControlDesigner.InvokeTransactedChange(Designer.Component, new TransactedChangeCallback(OnSchemaRefreshedCallback), null, "SchemaRefreshed");
				Designer.UpdateDesignTimeHtml();
			} finally {
				Cursor.Current = current;
			}
		}
		public void DataBind(ASPxDataWebControlBase dataControl) {
			var viewControl = GridViewFieldConverterHelper.GetGridByContextInstance(dataControl);
			if(DataSourceSchema != null) {
				IDataSourceFieldSchema[] fields = DataSourceSchema.GetFields();
				if(fields == null || fields.Length == 0)
					viewControl.KeyFieldName = string.Empty;
			}
			if(viewControl.Columns.Count == 0)
				viewControl.AutoGenerateColumns = true;
			TypeDescriptor.Refresh(Designer.Component);
		}
		TemplateGroupCollection CreateTemplateGroups() {
			var result = new TemplateGroupCollection();
			var allColumns = GridBase.ColumnHelper.AllColumns;
			foreach(var column in allColumns) {
				var groupName = string.Format(columnTemplateName, GridBase.GetColumnGlobalIndex(column), column);
				var group = new TemplateGroup(groupName);
				foreach(var templateName in GetColumnTemplateNames()) {
					var name = DetermineTemplateNameByColumn(templateName, column);
					if(!string.IsNullOrEmpty(name))
						group.AddTemplateDefinition(CreateTemplate(name, column));
				}
				result.Add(group);
			}
			AddEditFormLayoutTemplateGroups(result);
			foreach(string name in GetControlTemplateNames()) {
				var group = new TemplateGroup(name);
				group.AddTemplateDefinition(CreateTemplate(name, GridTemplates));
				result.Add(group);
			}
			return result;
		}
		string DetermineTemplateNameByColumn(string templateName, IWebGridColumn webColumn) {
			if(string.IsNullOrEmpty(templateName))
				return string.Empty;
			var prefix = templateName[0];
			var webColumnType = webColumn.GetType();
			if(TemplatePrefixColumnTypes.ContainsKey(prefix)) {
				foreach(var type in TemplatePrefixColumnTypes[prefix])
					if(type.IsAssignableFrom(webColumnType))
						return templateName.Substring(1);
				return string.Empty;
			}
			return templateName;
		}
		void AddEditFormLayoutTemplateGroups(TemplateGroupCollection collection) {
			GridBase.EditFormLayoutProperties.ForEach(delegate(LayoutItemBase item) {
				var layoutItem = item as ColumnLayoutItem;
				if(layoutItem != null) {
					var templateGroupName = GetEditFormLayoutTemplateGroupName(layoutItem);
					var group = new TemplateGroup(templateGroupName);
					group.AddTemplateDefinition(CreateTemplate("Template", layoutItem));
					collection.Add(group);
				}
			});
		}
		string GetEditFormLayoutTemplateGroupName(ColumnLayoutItem layoutItem) {
			var result = editFormLayoutTemplateGroupNamePrefix;
			var itemPathIndices = layoutItem.GetPathIndices();
			foreach(string pathIndex in itemPathIndices)
				result += string.Format(editFormLayoutTemplateGroupNamePart, pathIndex);
			if(!string.IsNullOrEmpty(layoutItem.ColumnName))
				result += layoutItem.ColumnName;
			else
				result = result.Remove(result.Length - 1);
			return result;
		}
		TemplateDefinition CreateTemplate(string name, object templateObject) {
			return new TemplateDefinition(Designer, name, templateObject, name, GetTemplateStyle()) {
				SupportsDataBinding = true
			};
		}
		Style GetTemplateStyle() {
			return GridBase.ControlStyle;
		}
		protected bool OnSchemaRefreshedCallback(object context) {
			bool isDataSettingExits = GridBase.Columns.Count > 0 || !string.IsNullOrEmpty(GridBase.KeyFieldName);
			if(GridBase.DataSourceID.Length > 0 && DataSourceSchema != null) {
				if(isDataSettingExits) {
					if(ShowMessage(GridBase.Site, string.Format("Would you like to regenerate the {0} column fields and data keys using the selected data source schema?  Warning: this will delete all existing column fields.", GridPlaceholderName),
						string.Format("Refresh Fields and Keys for '{0}'", Designer.ID), MessageBoxButtons.YesNo) == DialogResult.Yes) {
							RegenerateColumns(GridBase, DataSourceSchema);
					}
				} else
					AddKeysAndBoundFields(GridBase, DataSourceSchema);
				return true;
			}
			if(isDataSettingExits && ShowMessage(Designer.Component.Site, string.Format("Would you like to clear the {0} column fields and data keys?  Warning: this will delete all existing column fields.", GridPlaceholderName),
				string.Format("Refresh Fields and Keys for '{0}'", Designer.ID), MessageBoxButtons.YesNo) == DialogResult.Yes) {
				GridBase.KeyFieldName = string.Empty;
				GridBase.Columns.Clear();
			}
			return true;
		}
		protected virtual void RegenerateColumns(ASPxGridBase grid, IDataSourceViewSchema schema) {
			grid.KeyFieldName = string.Empty;
			grid.Columns.Clear();
			AddKeysAndBoundFields(grid, schema);
		}
		public static DialogResult ShowMessage(IServiceProvider serviceProvider, string message, string caption, MessageBoxButtons buttons) {
			if(serviceProvider != null) {
				IUIService service = (IUIService)serviceProvider.GetService(typeof(IUIService));
				if(service != null)
					return service.ShowMessage(message, caption, buttons);
			}
			return MessageBox.Show(message, caption, buttons);
		}
		public void AddKeysAndBoundFields(ASPxGridBase grid, IDataSourceViewSchema schema) {
			AddKeysAndBoundFields(grid, schema, true);
		}
		void AddKeysAndBoundFields(ASPxGridBase grid, IDataSourceViewSchema schema, bool addKeys) {
			if(schema == null)
				return;
			IDataSourceFieldSchema[] fields = schema.GetFields();
			if(fields == null || fields.Length == 0)
				return;
			var keys = new List<string>();
			foreach(IDataSourceFieldSchema field in fields) {
				var dataColumn = CreateDataColumn(keys, field);
				if(dataColumn != null)
					grid.Columns.Add(dataColumn);
			}
			grid.AutoGenerateColumns = false;
			if(keys.Count > 0 && addKeys)
				grid.KeyFieldName = keys[0];
		}
		protected IWebGridDataColumn CreateDataColumn(List<string> keys, IDataSourceFieldSchema field) {
			if(!IsBindableType(field.DataType))
				return null;
			var column = CreateDataColumnCore(field.DataType);
			var name = field.Name;
			if(field.PrimaryKey)
				keys.Add(name);
			column.FieldName = name;
			column.ReadOnly = field.PrimaryKey || field.IsReadOnly;
			if(field.Identity)
				ProcessIdentityColumn(column);
			return column;
		}
		protected virtual void ProcessIdentityColumn(IWebGridDataColumn column) { }
		protected abstract IWebGridDataColumn CreateDataColumnCore(Type dataType);
		public static bool IsBindableType(Type type) {
			if((!type.IsPrimitive && type != typeof(string)) && type != typeof(DateTime) && type != typeof(decimal)) {
				return (type == typeof(Guid));
			}
			return true;
		}
	}
	public class FakeWebSite : ISite {
		IComponent component;
		IContainer container;
		IComponent ISite.Component { get { return component; } }
		IContainer ISite.Container { get { return container; } }
		bool ISite.DesignMode { get { return true; } }
		string ISite.Name { get { return component.GetType().FullName; } set { } }
		public FakeWebSite(IComponent component, IContainer container) {
			this.component = component;
			this.container = container;
		}
		object IServiceProvider.GetService(Type type) {
			return null;
		}
	}
	[ToolboxItem(false)]
	public class FakeWebComponent : ICustomTypeDescriptor {
		object obj;
		EventHandler onChangedMethod;
		public object Object { get { return obj; } }
		public FakeWebComponent(object selectedObject, EventHandler onChangedMethod)
			: base() {
			this.onChangedMethod = onChangedMethod;
			this.obj = selectedObject;
		}
		System.ComponentModel.AttributeCollection ICustomTypeDescriptor.GetAttributes() {
			return TypeDescriptor.GetAttributes(obj.GetType());
		}
		string ICustomTypeDescriptor.GetClassName() {
			return obj.GetType().Name;
		}
		string ICustomTypeDescriptor.GetComponentName() {
			return obj.GetType().FullName;
		}
		TypeConverter ICustomTypeDescriptor.GetConverter() {
			return TypeDescriptor.GetConverter(obj);
		}
		EventDescriptor ICustomTypeDescriptor.GetDefaultEvent() {
			return TypeDescriptor.GetDefaultEvent(obj);
		}
		PropertyDescriptor ICustomTypeDescriptor.GetDefaultProperty() {
			return TypeDescriptor.GetDefaultProperty(obj);
		}
		object ICustomTypeDescriptor.GetEditor(Type editorBaseType) {
			return TypeDescriptor.GetEditor(typeof(Object), editorBaseType);
		}
		EventDescriptorCollection ICustomTypeDescriptor.GetEvents() {
			return EventDescriptorCollection.Empty;
		}
		EventDescriptorCollection ICustomTypeDescriptor.GetEvents(Attribute[] attribute) {
			return EventDescriptorCollection.Empty;
		}
		PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties() {
			PropertyDescriptorCollection list = TypeDescriptor.GetProperties(obj);
			PropertyDescriptor[] res = new PropertyDescriptor[list.Count];
			for(int n = 0; n < list.Count; n++) {
				PropertyDescriptor pd = list[n];
				if(!(pd is FakeWebComponentProperty)) pd = new FakeWebComponentProperty(pd, onChangedMethod);
				res[n] = pd;
			}
			return new PropertyDescriptorCollection(res);
		}
		PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties(Attribute[] attributes) {
			return ((ICustomTypeDescriptor)this).GetProperties();
		}
		object ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd) {
			return obj;
		}
	}
	public class FakeWebComponentProperty : PropertyDescriptor {
		PropertyDescriptor source;
		EventHandler onChangedMethod;
		public FakeWebComponentProperty(PropertyDescriptor source, EventHandler onChangedMethod)
			: base(source) {
			this.source = source;
			this.onChangedMethod = onChangedMethod;
		}
		public override Type ComponentType { get { return source.ComponentType; } }
		public override Type PropertyType { get { return source.PropertyType; } }
		public override string Name { get { return source.Name; } }
		public override bool CanResetValue(object component) { return source.CanResetValue(component); }
		public override object GetValue(object component) { return source.GetValue(component); }
		public override void SetValue(object component, object value) {
			source.SetValue(component, value);
		}
		public override bool IsReadOnly { get { return source.IsReadOnly; } }
		public override bool ShouldSerializeValue(object component) { return source.ShouldSerializeValue(component); }
		public override void ResetValue(object component) { source.ResetValue(component); }
		internal void NotifyChanged(object component) {
			if(onChangedMethod != null) onChangedMethod(component, EventArgs.Empty);
		}
	}
}
