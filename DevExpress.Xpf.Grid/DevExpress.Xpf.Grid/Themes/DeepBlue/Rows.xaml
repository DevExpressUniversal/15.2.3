<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"        
    xmlns:dxgcore="http://schemas.devexpress.com/winfx/2008/xaml/grid" 
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxg="clr-namespace:DevExpress.Xpf.Grid"        
    xmlns:dxgt="clr-namespace:DevExpress.Xpf.Grid.Themes">

    <!--BEGIN WPF-->
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{dx:GridResource themes/DeepBlue/Constants.xaml}"/>
    </ResourceDictionary.MergedDictionaries>
    <!--END WPF-->

    <dxg:DetailLevelToObjectConverter x:Key="DetailLevelToWidthConverter" DetailValue="1" NotDetailValue="0" />

    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <Border BorderThickness="0,0,0,1" BorderBrush="#FFCBE2FF">
                <ContentPresenter/>
            </Border>
            <Border BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}" BorderThickness="0,0,0,1" Margin="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowOffsetThickness}}"/>
            <Border BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}" BorderThickness="0,0,0,1">
                <Border.Visibility>
                    <Binding Path="IsRowExpanded">
                        <Binding.Converter>
                            <dx:BoolToVisibilityInverseConverter/>
                        </Binding.Converter>
                    </Binding>
                </Border.Visibility>
            </Border>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Border x:Name="ContentBorder" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}">
            <!--BEGIN WPF-->
            <TextBlock.Foreground>
                <SolidColorBrush Color="#FF476797" />
            </TextBlock.Foreground>
            <!--END WPF-->
            <ContentPresenter/>
        </Border>
    </ControlTemplate>
    <Style x:Key="{dxgt:GroupRowThemeKey ResourceKey=GroupRowPresenterStyle}" TargetType="{x:Type dxg:GroupGridRowPresenter}">
    </Style>
    <!--BEGIN WPF-->
	
	<ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Border SnapsToDevicePixels="True">
            <ContentPresenter />
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{dxgt:CardViewThemeKey ResourceKey=GroupRowControlHeaderContentTemplate}" TargetType="{x:Type ContentControl}">
        <Grid x:Name="gridContent" >           
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
            </Grid.RowDefinitions>
            <Border x:Name="ContentBorderTop" Grid.Row="0" DockPanel.Dock="Top" TextBlock.Foreground="#FF476797" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}" BorderThickness="0,1,0,0" />
            <Border x:Name="ContentBorder" Grid.Row="1" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}" BorderThickness="0,0,0,0" >
                <ContentPresenter />
            </Border>
            <Border x:Name="groupBorderMargin" Grid.RowSpan="2" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}" Margin="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=RowOffsetThickness}}" BorderThickness="0,0,0,1" >
                <Border.Visibility>
                    <Binding Path="IsRowExpanded">
                        <Binding.Converter>
                            <dx:BoolToVisibilityConverter/>
                        </Binding.Converter>
                    </Binding>
                </Border.Visibility>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsRowExpanded}" Value="true">
                <Setter Property="Margin" TargetName="ContentBorder" Value="0,0,0,1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=RowPosition}" Value="Top">
                <Setter Property="BorderThickness" TargetName="ContentBorderTop" Value="0,0,0,0" />
            </DataTrigger>            
            <DataTrigger Binding="{Binding Path=RowPosition}" Value="Single">
                <Setter Property="BorderThickness" TargetName="ContentBorderTop" Value="0,0,0,0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsLastHierarchicalRow}" Value="True">
                <Setter Property="BorderThickness" TargetName="ContentBorder" Value="0,0,0,1" />
            </DataTrigger>        
            <DataTrigger Binding="{Binding Path=IsRowVisible}" Value="false">
                <Setter Property="Visibility" TargetName="gridContent" Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=(dxg:GridControl.ActiveView).Orientation, RelativeSource={RelativeSource TemplatedParent}}" Value="Horizontal">
                <Setter TargetName="gridContent" Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="-90" />
                    </Setter.Value>
                </Setter>
                <Setter Property="DockPanel.Dock" Value="Left" TargetName="ContentBorder" />
                <Setter Property="VerticalAlignment" Value="Stretch" TargetName="ContentBorder" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--END WPF-->

    <ControlTemplate x:Key="{dxgt:GridRowThemeKey ResourceKey=RowControlContainerTemplate}" TargetType="{x:Type ContentControl}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <!--ONLY SL<Grid.Background>
                <Binding Path="(dxe:BaseEdit.HasValidationError)">
                    <Binding.Converter>
                        <dx:BoolToObjectConverter TrueValue="#FFFFD9D9" FalseValue="Transparent"/>
                    </Binding.Converter>
                </Binding>
            </Grid.Background>ONLY SL-->
            <!--ONLY SL<Grid x:Name="AlternateRowElement" Background="{Binding Path=View.ActualAlternateRowBackground}" dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}" dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}">
                <Grid.Visibility>
                    <Binding Path="AlternateRow">
                        <Binding.Converter>
                            <dx:BoolToVisibilityConverter />
                        </Binding.Converter>
                    </Binding>
                </Grid.Visibility>
            </Grid>ONLY SL-->
            <Border x:Name="RowContentBorder" dxg:FadeSelectionHelper.IsKeyboardFocusWithinView="{Binding Path=(dxg:GridControl.ActiveView).IsKeyboardFocusWithin, RelativeSource={RelativeSource Mode=Self}}" dxg:FadeSelectionHelper.FadeSelectionOnLostFocus="{Binding Path=View.ActualFadeSelectionOnLostFocus}">
                <!--BEGIN WPF-->
                <Border.Background>
                    <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                </Border.Background>
                <!--END WPF-->
                <!--ONLY SL<Border.Background>
                <Binding Path="SelectionState">
                    <Binding.Converter>
                        <dx:EnumToObjectConverter>
                            <dx:EnumToObjectConverter.Values>
                                <dx:EnumObjectProvider x:Key="None" Value="Transparent"/>
                                <dx:EnumObjectProvider x:Key="Selected" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderSelectedBrush}}"/>
                                <dx:EnumObjectProvider x:Key="Focused" Value="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderFocusedBrush}}"/>
                            </dx:EnumToObjectConverter.Values>
                        </dx:EnumToObjectConverter>
                    </Binding.Converter>
                </Binding>
            </Border.Background>ONLY SL-->
            </Border>
            <Border x:Name="RowBottomLine" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" Grid.Row="1">
                <Border.BorderThickness>
                    <Binding Path="View.ShowHorizontalLines">
                        <Binding.Converter>
                            <dx:BoolToObjectConverter TrueValue="0,0,0,1" FalseValue="0" />
                        </Binding.Converter>
                    </Binding>
                </Border.BorderThickness>
            </Border>
            <Border x:Name="BottomRowBorder" BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=BorderBrush}}" Grid.Row="1"/>
            <ContentPresenter Grid.RowSpan="2"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=ShowBottomLine}" Value="True">
                <Setter Property="BorderThickness" TargetName="BottomRowBorder" Value="0,0,0,1" />
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxgcore:RowData.CurrentRowData).(dxe:BaseEdit.HasValidationError), RelativeSource={RelativeSource TemplatedParent}}" Value="True" />
                    <Condition Binding="{Binding Path=(dxgcore:RowData.CurrentRowData).IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Value="False" />
                </MultiDataTrigger.Conditions>
                <Setter TargetName="RowContentBorder" Property="Background" Value="{StaticResource {dxgt:GridRowThemeKey ResourceKey=ValidationErrorBrush}}" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style TargetType="{x:Type dxg:FixedGroupsAdorner}">
        <Setter Property="DrawAdornerUnderWholeGroup" Value="false" />
        <Setter Property="AdornerHeight" Value="20" />
        <Setter Property="AdornerBrush">
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#14000000" Offset="0.35"/>
                    <GradientStop Color="#00000000" Offset="1"/>
                    <GradientStop Color="#33000000"/>
                    <GradientStop Color="#1E000000" Offset="0.15"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ContentPresenter IsHitTestVisible="false" Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type dxg:RowIndicatorControl}">
        <Setter Property="Foreground" Value="{StaticResource ResourceKey={dxgt:RowIndicatorThemeKey ResourceKey=ForegroundBrush}}"/>
    </Style>
    <Style x:Key="{dxgt:GridRowThemeKey ResourceKey=DetailTotalSummaryIndentBorderStyle}" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="#FF8AA8CE"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
    </Style>
    <Style TargetType="{x:Type dxg:GridDetailExpandButtonContainer}">
        <Setter Property="IsMasterRowExpanded" Value="{Binding IsMasterRowExpanded}"/>
        <Setter Property="RowPosition" Value="{Binding RowPosition}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dxg:GridDetailExpandButtonContainer">
                    <dxg:GridDetailExpandButton 
                        Name="PART_ExpandButton" 
                        Command="{Binding View.Commands.ChangeMasterRowExpanded}" 
                        CommandParameter="{Binding Path=RowHandle.Value}" 
                        IsChecked="{Binding Path=IsRowExpanded, Mode=OneWay}"
                        dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible="{Binding Path=(dxg:GridDetailExpandButtonContainer.IsDetailButtonVisible), RelativeSource={RelativeSource TemplatedParent}}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type dxg:DetailRowsIndentControl}">
        <Setter Property="dxg:DetailSummaryControlBase.SummaryDetailLevel" Value="{Binding Path=(dxg:DetailSummaryControlBase.SummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <dxg:BackgroundBorderControl Width="{Binding Path=Width}"
                                                     ItemLevel="{Binding Path=Level}"
                                                     RowLevel="{Binding Path=(dx:DataObjectBase.DataObject).DetailLevel, RelativeSource={RelativeSource TemplatedParent}}"
                                                     LineLevel="{Binding Path=(dx:DataObjectBase.DataObject).LineLevel, RelativeSource={RelativeSource TemplatedParent}}"
                                                     IsMasterRowExpanded="{Binding Path=(dx:DataObjectBase.DataObject).IsMasterRowExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Border x:Name="detailLeftLine" 
                            dxg:DetailRowsIndentControl.IsSummaryDetailLevel="{Binding Path=(dxg:DetailRowsIndentControl.IsSummaryDetailLevel), RelativeSource={RelativeSource TemplatedParent}}" 
                            BorderThickness="1,0,0,0" 
                            HorizontalAlignment="Right" 
                            Width="{Binding Level, Converter={StaticResource DetailLevelToWidthConverter}}" 
                            BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type dxg:DetailRowsIndentRightControl}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <dxg:BackgroundBorderControl Width="{Binding Path=WidthRight}"/>
                        <Border x:Name="detailLeftLine"
                            BorderThickness="1,0,0,0" 
                            HorizontalAlignment="Left" 
                            Width="{Binding Level, Converter={StaticResource DetailLevelToWidthConverter}}" 
                            BorderBrush="{DynamicResource {dxgt:GridRowThemeKey ResourceKey=GridDataRowDelimiterBrush}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <ItemsPresenter/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>