<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SpreadsheetControlColumnsRemoved" xml:space="preserve">
    <value>Occurs after columns have been deleted from a worksheet via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlColumnsInserted" xml:space="preserve">
    <value>Occurs after new columns have been added to a worksheet via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlCellValueChanged" xml:space="preserve">
    <value>Occurs after the cell content has been changed via the SpreadsheetControl UI.</value>
  </data>
  <data name="SpreadsheetControlCellEndEdit" xml:space="preserve">
    <value>Occurs before the cell editor is closed and the entered value is committed.</value>
  </data>
  <data name="SpreadsheetControlCellCancelEdit" xml:space="preserve">
    <value>Occurs before the cell editor is closed and the entered value is rolled back.</value>
  </data>
  <data name="SpreadsheetControlCellBeginEdit" xml:space="preserve">
    <value>Occurs before the cell editor is opened.</value>
  </data>
  <data name="SpreadsheetControlBorderStyle" xml:space="preserve">
    <value>Gets or sets the SpreadsheetControl's border style.</value>
  </data>
  <data name="SpreadsheetControlBeforePrintSheet" xml:space="preserve">
    <value>Provides the capability to prevent printing of the required worksheets in a workbook. </value>
  </data>
  <data name="SpreadsheetControlBeforeImport" xml:space="preserve">
    <value>Occurs before a document is loaded (imported from an external source).</value>
  </data>
  <data name="SpreadsheetControlBeforeExport" xml:space="preserve">
    <value>Occurs before the document is saved (exported to a certain format).</value>
  </data>
  <data name="SpreadsheetControlBeforeDispose" xml:space="preserve">
    <value>Occurs before the SpreadsheetControl control is released from memory.</value>
  </data>
  <data name="SpreadsheetControlAllowDrop" xml:space="preserve">
    <value>Overrides the System.Windows.Forms.Control.AllowDrop property.</value>
  </data>
  <data name="SpreadsheetControlActiveSheetChanging" xml:space="preserve">
    <value>Occurs when an active worksheet is about to be changed via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlActiveSheetChanged" xml:space="preserve">
    <value>Occurs after an active worksheet has been changed via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlAcceptsTab" xml:space="preserve">
    <value>Gets or sets a value indicating whether pressing the TAB key is processed by the SpreadsheetControl instead of moving the focus to the next control in the tab order.</value>
  </data>
  <data name="SpreadsheetControlAcceptsReturn" xml:space="preserve">
    <value>Gets or sets a value indicating whether pressing the RETURN key is processed by the SpreadsheetControl.</value>
  </data>
  <data name="SpreadsheetControlAcceptsEscape" xml:space="preserve">
    <value>Gets or sets a value indicating whether pressing the ESC key is processed by the SpreadsheetControl.</value>
  </data>
  <data name="CustomDrawObjectEventsArgsHandled" xml:space="preserve">
    <value>Gets or sets whether an event was handled. If it was handled, the default actions are not required.</value>
  </data>
  <data name="CustomDrawObjectEventsArgsGraphics" xml:space="preserve">
    <value>Gets an object used for painting.</value>
  </data>
  <data name="CustomDrawObjectEventsArgsCache" xml:space="preserve">
    <value>Gets an object which specifies the storage for the pens, fonts and brushes.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseText" xml:space="preserve">
    <value>Gets the text of the header caption.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseIsSelected" xml:space="preserve">
    <value>Gets whether the current column contains selected cell(s).</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseIsHovered" xml:space="preserve">
    <value>Gets whether a mouse is currently over the worksheet header.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseForeColor" xml:space="preserve">
    <value>Gets the color used to paint the header caption text.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseFont" xml:space="preserve">
    <value>Gets the font used to paint the header caption.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseControl" xml:space="preserve">
    <value>Provides access to the SpreadsheetControl that raised the event.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseBounds" xml:space="preserve">
    <value>Gets the header's bound rectangle.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseBackColor" xml:space="preserve">
    <value> Gets the background color of the header.</value>
  </data>
  <data name="CustomDrawHeaderEventArgsBaseAppearance" xml:space="preserve">
    <value>Provides access to the properties that control the appearance of a worksheet header.</value>
  </data>
  <data name="CustomDrawCellEventArgsBaseFillBounds" xml:space="preserve">
    <value>Returns the bounding rectangle of the drawing area for painting the cell background.</value>
  </data>
  <data name="CustomDrawCellEventArgsBaseCell" xml:space="preserve">
    <value>Gets the worksheet cell being painted.</value>
  </data>
  <data name="CustomDrawCellEventArgsBaseBounds" xml:space="preserve">
    <value>Returns the bounding rectangle of the drawing area.</value>
  </data>
  <data name="SpreadsheetControlCustomDrawFrozenPaneBorder" xml:space="preserve">
    <value>Enables frozen pane borders to be painted manually. </value>
  </data>
  <data name="SpreadsheetControlCustomDrawColumnHeaderBackground" xml:space="preserve">
    <value>Enables the column header background to be painted manually.</value>
  </data>
  <data name="SpreadsheetControlCustomDrawColumnHeader" xml:space="preserve">
    <value>Enables the column header to be painted manually.</value>
  </data>
  <data name="SpreadsheetControlCustomDrawCellBackground" xml:space="preserve">
    <value>Provides the capability to perform custom painting of the cell background.</value>
  </data>
  <data name="SpreadsheetControlCustomDrawCell" xml:space="preserve">
    <value>Provides the capability to perform custom painting of cell content.</value>
  </data>
  <data name="SpreadsheetControlContentChanged" xml:space="preserve">
    <value>Occurs when the document content is changed.</value>
  </data>
  <data name="SpreadsheetControlCustomDrawRowHeader" xml:space="preserve">
    <value>Enables the row header to be painted manually.</value>
  </data>
  <data name="SpreadsheetControlCustomDrawRowHeaderBackground" xml:space="preserve">
    <value>Enables the row header background to be painted manually.</value>
  </data>
  <data name="SpreadsheetControlDefinedNameDeleting" xml:space="preserve">
    <value>Occurs before a Defined Name is deleted.</value>
  </data>
  <data name="SpreadsheetControlDefinedNameEditing" xml:space="preserve">
    <value>Occurs before a Defined Name is being edited.</value>
  </data>
  <data name="SpreadsheetControlDefinedNameValidating" xml:space="preserve">
    <value>Occurs when a new  Defined Name is created before it is added to a collection.</value>
  </data>
  <data name="SpreadsheetControlDocumentClosing" xml:space="preserve">
    <value>Occurs when a document that has not yet been saved is about to be closed.</value>
  </data>
  <data name="SpreadsheetControlDocumentLoaded" xml:space="preserve">
    <value>Occurs after a document is loaded into the SpreadsheetControl.</value>
  </data>
  <data name="SpreadsheetControlDocumentPropertiesChanged" xml:space="preserve">
    <value>Occurs after one of the DocumentProperties is changed.</value>
  </data>
  <data name="SpreadsheetControlEmptyDocumentCreated" xml:space="preserve">
    <value>Occurs when a new document is created in the SpreadsheetControl.</value>
  </data>
  <data name="SpreadsheetControlHyperlinkClick" xml:space="preserve">
    <value>Occurs when an end-user activates the hyperlink before navigating to the referenced location.</value>
  </data>
  <data name="SpreadsheetControlInitializeDocument" xml:space="preserve">
    <value>Occurs before a document is loaded. Handle this event to set the initial document settings.</value>
  </data>
  <data name="SpreadsheetControlInvalidFormatException" xml:space="preserve">
    <value>Fires when the supplied data could not be recognized as data in the assumed format for import.</value>
  </data>
  <data name="SpreadsheetControlLayoutUnit" xml:space="preserve">
    <value>Gets or sets a unit of measure used for a document layout.</value>
  </data>
  <data name="SpreadsheetControlLookAndFeel" xml:space="preserve">
    <value>Provides access to the control's look and feel settings.</value>
  </data>
  <data name="SpreadsheetControlMenuManager" xml:space="preserve">
    <value>Gets or sets the menu manager which controls the look and feel of context menus.</value>
  </data>
  <data name="SpreadsheetControlModifiedChanged" xml:space="preserve">
    <value>Occurs when the value of the SpreadsheetControl.Modified property is changed.</value>
  </data>
  <data name="SpreadsheetControlOptions" xml:space="preserve">
    <value>Provides access to the variety of options which can be specified for the document loaded into the SpreadsheetControl and the control itself.</value>
  </data>
  <data name="SpreadsheetControlOptionsBehavior" xml:space="preserve">
    <value>Provides access to an object that enables you to apply restrictions to different spreadsheet operations.</value>
  </data>
  <data name="SpreadsheetControlOptionsHorizontalScrollbar" xml:space="preserve">
    <value>Provides access to the options specific to the horizontal scrollbar of the SpreadsheetControl.</value>
  </data>
  <data name="SpreadsheetControlOptionsPrint" xml:space="preserve">
    <value>Provides access to options used to generate and preview a printed document in the SpreadsheetControl.</value>
  </data>
  <data name="SpreadsheetControlOptionsTabSelector" xml:space="preserve">
    <value>Provides access to the options specific to the Sheet Tab Selector of the SpreadsheetControl. </value>
  </data>
  <data name="SpreadsheetControlOptionsVerticalScrollbar" xml:space="preserve">
    <value>Provides access to the options specific to the vertical scrollbar of the SpreadsheetControl.</value>
  </data>
  <data name="SpreadsheetControlOptionsView" xml:space="preserve">
    <value>Gets the SpreadsheetControl's view options. </value>
  </data>
  <data name="SpreadsheetControlPanesFrozen" xml:space="preserve">
    <value>Occurs after a worksheet area has been frozen via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlPanesUnfrozen" xml:space="preserve">
    <value>Occurs after a frozen worksheet area has been unlocked via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlPopupMenuShowing" xml:space="preserve">
    <value>Occurs when a popup menu is about to be displayed for the SpreadsheetControl's visual elements.</value>
  </data>
  <data name="SpreadsheetControlPropertyChanged" xml:space="preserve">
    <value>Occurs every time any of the SpreadsheetControl class properties has changed its value.</value>
  </data>
  <data name="SpreadsheetControlProtectionWarning" xml:space="preserve">
    <value>Occurs when attempting to edit a locked cell in a protected worksheet.</value>
  </data>
  <data name="SpreadsheetControlReadOnly" xml:space="preserve">
    <value>Gets or sets whether document modifications are prohibited.</value>
  </data>
  <data name="SpreadsheetControlReadOnlyChanged" xml:space="preserve">
    <value>Occurs when the SpreadsheetControl's read-only state is changed.</value>
  </data>
  <data name="SpreadsheetControlRowsInserted" xml:space="preserve">
    <value>Occurs after new rows have been added to a worksheet via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlRowsRemoved" xml:space="preserve">
    <value>Occurs after rows have been deleted from a worksheet via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlScrollPositionChanged" xml:space="preserve">
    <value>Occurs when a worksheet is being scrolled in the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlSelectionChanged" xml:space="preserve">
    <value>Fires in response to changing cell selection in an active worksheet.</value>
  </data>
  <data name="SpreadsheetControlSheetInserted" xml:space="preserve">
    <value>Occurs after a new worksheet has been added into a workbook via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlSheetRemoved" xml:space="preserve">
    <value>Occurs after a worksheet has been removed from a workbook via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlSheetRenamed" xml:space="preserve">
    <value>Occurs after a worksheet has been renamed via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlSheetRenaming" xml:space="preserve">
    <value>Occurs when a worksheet is about to be renamed via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetControlToolTipController" xml:space="preserve">
    <value>Gets or sets the tooltip controller component that controls the appearance, position and the content of the hints displayed by the SpreadsheetControl.</value>
  </data>
  <data name="SpreadsheetControlUnhandledException" xml:space="preserve">
    <value>This event is raised when an exception, unhandled by the SpreadsheetControl, occurs.</value>
  </data>
  <data name="SpreadsheetControlUnit" xml:space="preserve">
    <value>Gets or sets a unit of measure used in the workbook. </value>
  </data>
  <data name="SpreadsheetControlUnitChanged" xml:space="preserve">
    <value>Fires after a unit of measurement used in the workbook is changed.</value>
  </data>
  <data name="SpreadsheetControlUnitChanging" xml:space="preserve">
    <value>Fires before a unit of measurement used within the workbook is changed.</value>
  </data>
  <data name="SpreadsheetControlUpdateUI" xml:space="preserve">
    <value>Raised when changes occur which may affect the control's UI.</value>
  </data>
  <data name="SpreadsheetControlZoomChanged" xml:space="preserve">
    <value>Occurs when the current zoom level of the active worksheet has been changed via the SpreadsheetControl's UI.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlBeforeDispose" xml:space="preserve">
    <value>Occurs before the SpreadsheetFormulaBarControl control is released from memory.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlBeforeEnter" xml:space="preserve">
    <value>Occurs before the SpreadsheetFormulaBarControl is entered.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlCancelButtonClick" xml:space="preserve">
    <value>Occurs when the Cancel button on the Formula Bar has been clicked.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlController" xml:space="preserve">
    <value>This member supports the internal infrastructure and is not intended to be used directly from your code.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlExpanded" xml:space="preserve">
    <value>Gets or sets whether the Formula Bar is expanded or collapsed.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlInsertFunctionButtonClick" xml:space="preserve">
    <value>Occurs when the Insert Function button on the Formula Bar has been clicked.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlKeyDown" xml:space="preserve">
    <value>Occurs when a key is pressed while the SpreadsheetFormulaBarControl has focus.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlOkButtonClick" xml:space="preserve">
    <value>Occurs when the Enter button on the Formula Bar has been clicked.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlRollback" xml:space="preserve">
    <value>Occurs before the user input is canceled and the modified value is replaced with a value before modification.</value>
  </data>
  <data name="SpreadsheetFormulaBarControlSpreadsheetControl" xml:space="preserve">
    <value>Gets or sets the SpreadsheetControl to which the Formula Bar is bound.</value>
  </data>
  <data name="SpreadsheetNameBoxControlBeforeDispose" xml:space="preserve">
    <value>Occurs before the SpreadsheetNameBoxControl control is released from memory.</value>
  </data>
  <data name="SpreadsheetNameBoxControlEditorTypeName" xml:space="preserve">
    <value>Gets the class name of the editor.</value>
  </data>
  <data name="SpreadsheetNameBoxControlProperties" xml:space="preserve">
    <value>Gets an object that contains settings specific to the SpreadsheetNameBoxControl control.</value>
  </data>
  <data name="SpreadsheetNameBoxControlReadOnlyChanged" xml:space="preserve">
    <value>Occurs when the value of the SpreadsheetNameBoxControl.ReadOnly property has changed.</value>
  </data>
  <data name="SpreadsheetNameBoxControlSpreadsheetControl" xml:space="preserve">
    <value>Gets or sets the SpreadsheetControl to which the Name Box is bound.</value>
  </data>
  <data name="SpreadsheetScrollbarOptionsVisibility" xml:space="preserve">
    <value>Gets or sets a value that indicates whether the SpreadsheetControl's scrollbar should be displayed or hidden.</value>
  </data>
  <data name="SpreadsheetTabSelectorOptionsVisibility" xml:space="preserve">
    <value>Gets or sets a value that indicates whether the Sheet Tab Selector of the SpreadsheetControl should be displayed or hidden. </value>
  </data>
</root>