#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Web;
using DevExpress.Web.Design;
using DevExpress.Web.Internal;
namespace DevExpress.Web {
	public enum ActiveItemChangeAction { Click, Hover }
	public enum NavigationButtonVisibilityMode { Auto, Always }
	[DXWebToolboxItem(true), DevExpress.Utils.Design.DXClientDocumentationProviderWeb("ASPxImageZoomNavigator"),
	Designer("DevExpress.Web.Design.ASPxImageZoomNavigatorDesigner, " + AssemblyInfo.SRAssemblyWebDesignFull), DefaultProperty("Items"),
	DevExpress.Utils.ToolboxTabName(AssemblyInfo.DXTabNavigation), System.Drawing.ToolboxBitmap(typeof(ToolboxBitmapAccess), ToolboxBitmapAccess.BitmapPath + "ASPxImageSlider.bmp"),
	ToolboxData(@"<{0}:ASPxImageZoomNavigator runat=""server""><SettingsAutoGeneratedImages ImageCacheFolder=""~\Thumb\"" /></{0}:ASPxImageZoomNavigator>")]
	public class ASPxImageZoomNavigator : ASPxImageSliderBase, IControlDesigner {
		private static readonly object EventItemDataBound = new object();
		public ASPxImageZoomNavigator()
			: base() {
		}
		public ASPxImageZoomNavigator(ASPxWebControl ownerControl)
			: base(ownerControl) {
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorItems"),
#endif
		PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		MergableProperty(false), AutoFormatDisable,
		Editor("DevExpress.Web.Design.CommonDesignerEditor, " + AssemblyInfo.SRAssemblyWebDesignFull, typeof(System.Drawing.Design.UITypeEditor))]
		public ImageZoomNavigatorItemCollection Items {
			get { return ItemsInternal as ImageZoomNavigatorItemCollection; }
		}
		protected override ImageSliderItemCollectionBase CreateItemsInternal() {
			return new ImageZoomNavigatorItemCollection(this);
		}
		protected internal override ImageSliderItemBase CreateItem() {
			return new ImageZoomNavigatorItem();
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorSettingsAutoGeneratedImages"),
#endif
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		PersistenceMode(PersistenceMode.InnerProperty), AutoFormatEnable]
		public ImageZoomNavigatorAutoGeneratedImagesSettings SettingsAutoGeneratedImages {
			get { return SettingsAutoGeneratedImagesInternal as ImageZoomNavigatorAutoGeneratedImagesSettings; }
		}
		protected override AutoGeneratedImagesSettingsBase CreateAutoGeneratedImagesSettings() {
			return new ImageZoomNavigatorAutoGeneratedImagesSettings(this);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorStyles"),
#endif
		Category("Styles"), AutoFormatEnable, PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ImageZoomNavigatorStyles Styles {
			get { return StylesInternal as ImageZoomNavigatorStyles; }
		}
		protected override StylesBase CreateStyles() {
			return new ImageZoomNavigatorStyles(this);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorImages"),
#endif
		Category("Images"), AutoFormatEnable, PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ImageZoomNavigatorImages Images {
			get { return ImagesInternal as ImageZoomNavigatorImages; }
		}
		protected override ImagesBase CreateImages() {
			return new ImageZoomNavigatorImages(this);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorActiveItemChangeAction"),
#endif
		Category("Behavior"), DefaultValue(ActiveItemChangeAction.Click), AutoFormatEnable]
		public ActiveItemChangeAction ActiveItemChangeAction {
			get { return (ActiveItemChangeAction)GetEnumProperty("ActiveItemChangeAction", ActiveItemChangeAction.Click); }
			set { SetEnumProperty("ActiveItemChangeAction", ActiveItemChangeAction.Click, value); }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorAccessibilityCompliant"),
#endif
		Category("Accessibility"), DefaultValue(false), AutoFormatDisable]
		public bool AccessibilityCompliant {
			get { return AccessibilityCompliantInternal; }
			set { AccessibilityCompliantInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorOrientation"),
#endif
		Category("Layout"), DefaultValue(Orientation.Horizontal), AutoFormatEnable]
		public Orientation Orientation {
			get { return SettingsNavigationBarInternal.Position == NavigationBarPosition.Bottom ? Orientation.Horizontal : Orientation.Vertical; }
			set { SettingsNavigationBarInternal.Position = value == Orientation.Horizontal ? NavigationBarPosition.Bottom : NavigationBarPosition.Left; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorNavigationButtonVisibility"),
#endif
		Category("Layout"), DefaultValue(NavigationButtonVisibilityMode.Auto), AutoFormatEnable]
		public NavigationButtonVisibilityMode NavigationButtonVisibility {
			get { return (NavigationButtonVisibilityMode)GetEnumProperty("NavigationButtonVisibility", NavigationButtonVisibilityMode.Auto); }
			set { SetEnumProperty("NavigationButtonVisibility", NavigationButtonVisibilityMode.Auto, value); }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorItemSpacing"),
#endif
		Category("Layout"), DefaultValue(typeof(Unit), ImageSliderNavigationBarSettings.DefaultItemSpacing), AutoFormatEnable]
		public Unit ItemSpacing {
			get { return SettingsNavigationBarInternal.ItemSpacing; }
			set { SettingsNavigationBarInternal.ItemSpacing = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorPagingMode"),
#endif
		Category("Layout"), DefaultValue(NavigationBarPagingMode.Page), AutoFormatEnable]
		public NavigationBarPagingMode PagingMode {
			get { return SettingsNavigationBarInternal.PagingMode; }
			set { SettingsNavigationBarInternal.PagingMode = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorVisibleItemCount"),
#endif
		Category("Layout"), DefaultValue(ImageSliderNavigationBarSettings.DefaultVisibleItemsCount), AutoFormatEnable]
		public int VisibleItemCount {
			get { return SettingsNavigationBarInternal.VisibleItemsCount; }
			set { SettingsNavigationBarInternal.VisibleItemsCount = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorImageContentBytesField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ImageContentBytesField {
			get { return ImageContentBytesFieldInternal; }
			set { ImageContentBytesFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorImageUrlField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ImageUrlField {
			get { return ImageUrlFieldInternal; }
			set { ImageUrlFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorThumbnailUrlField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ThumbnailUrlField {
			get { return ThumbnailUrlFieldInternal; }
			set { ThumbnailUrlFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorLargeImageUrlField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string LargeImageUrlField {
			get { return GetStringProperty("LargeImageUrlField", ""); }
			set {
				SetStringProperty("LargeImageUrlField", "", value);
				OnDataFieldChanged();
			}
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorZoomWindowTextField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ZoomWindowTextField {
			get { return GetStringProperty("ZoomWindowTextField", ""); }
			set {
				SetStringProperty("ZoomWindowTextField", "", value);
				OnDataFieldChanged();
			}
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorExpandWindowTextField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ExpandWindowTextField {
			get { return GetStringProperty("ExpandWindowTextField", ""); }
			set {
				SetStringProperty("ExpandWindowTextField", "", value);
				OnDataFieldChanged();
			}
		}
		protected override Dictionary<string, string> GetFieldNameDictionary() {
			Dictionary<string, string> dictionary = base.GetFieldNameDictionary();
			dictionary["LargeImageUrl"] = GetFieldName(LargeImageUrlField, "LargeImageUrl");
			dictionary["ZoomWindowText"] = GetFieldName(ZoomWindowTextField, "ZoomWindowText");
			dictionary["ExpandWindowText"] = GetFieldName(ExpandWindowTextField, "ExpandWindowText");
			return dictionary;
		}
		protected override void DataBindItemProperties(ImageSliderItemBase item, object obj, Dictionary<string, string> fieldNames) {
			ImageZoomNavigatorItem iznItem = item as ImageZoomNavigatorItem;
			iznItem.LargeImageUrl = GetFieldValue(obj, fieldNames["LargeImageUrl"], false, string.Empty).ToString();
			iznItem.ZoomWindowText = GetFieldValue(obj, fieldNames["ZoomWindowText"], false, string.Empty).ToString();
			iznItem.ExpandWindowText = GetFieldValue(obj, fieldNames["ExpandWindowText"], false, string.Empty).ToString();
			base.DataBindItemProperties(iznItem, obj, fieldNames);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorClientSideEvents"),
#endif
		Category("Client-Side"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		MergableProperty(false), AutoFormatDisable]
		public ClientSideEvents ClientSideEvents {
			get { return (ClientSideEvents)base.ClientSideEventsInternal; }
		}
		protected override ClientSideEventsBase CreateClientSideEvents() {
			return new ClientSideEvents();
		}
		protected override string GetClientObjectClassName() {
			return "ASPxClientImageZoomNavigator";
		}
		protected override void GetCreateClientObjectScript(StringBuilder stb, string localVarName, string clientName) {
			base.GetCreateClientObjectScript(stb, localVarName, clientName);
			if(!RenderUtils.Browser.Platform.IsTouchUI && ActiveItemChangeAction == ActiveItemChangeAction.Hover)
				stb.AppendFormat("{0}.changeAction = {1};\n", localVarName, (int)ActiveItemChangeAction);
			if(NavigationButtonVisibility == NavigationButtonVisibilityMode.Always)
				stb.AppendFormat("{0}.buttonVisibilityMode = {1};\n", localVarName, (int)NavigationButtonVisibilityMode.Always);
		}
		protected override Dictionary<string, string> CreateFullClientItem(ImageSliderItemBase item) {
			Dictionary<string, string> clientItem = base.CreateFullClientItem(item);
			ImageZoomNavigatorItem iznItem = item as ImageZoomNavigatorItem;
			string largeUrl = DataHelper.GetLargeImageUrl(iznItem);
			if(!string.IsNullOrEmpty(largeUrl))
				clientItem.Add("liu", largeUrl);
			if(!string.IsNullOrEmpty(iznItem.ZoomWindowText))
				clientItem.Add("zt", iznItem.ZoomWindowText);
			if(!string.IsNullOrEmpty(iznItem.ExpandWindowText))
				clientItem.Add("et", iznItem.ExpandWindowText);
			return clientItem;
		}
		protected override void CreateControlHierarchy() {
			base.CreateControlHierarchy();
			ShowImageAreaInternal = false;
			SettingsNavigationBarInternal.ThumbnailsNavigationButtonPosition = ThumbnailNavigationBarButtonPosition.Outside;
		}
		protected override string GetImageCacheFolder() {
			return SettingsAutoGeneratedImages.ImageCacheFolder;
		}
		protected override string GetImageCacheFolderPropertyName() {
			return "ImageZoomNavigatorAutoGeneratedImagesSettings.ImageCacheFolder";
		}
		protected override IEnumerable<AutogeneratedImageInfo> GetOutpuImagesInfoInternal() {
			return new AutogeneratedImageInfo[] { GetImageInfo(), GetThumbnailImageInfo(), GetLargeImageInfo() };
		}
		protected override CustomImageProcessingMethod GetCustomImageProcessingMethodInternal(AutogeneratedImageInfo info) {
			return null;
		}
		protected override void BeginItemsCreateInternal() {
			Items.Clear();
		}
		protected override void CreateAndInitializeItemInternal(AutogeneratedImageUrls images) {
			ImageZoomNavigatorItem item = new ImageZoomNavigatorItem();
			item.ImageUrl = images[GetImageInfo()];
			item.ThumbnailUrl = images[GetThumbnailImageInfo()];
			item.LargeImageUrl = images[GetLargeImageInfo()];
			Items.Add(item);
			RaiseItemDataBound(item);
		}
		protected override void CompleteItemsCreateInternal() {
			RaiseDataBound();
		}
		protected AutogeneratedImageInfo GetLargeImageInfo() {
			Size size = new Size((int)SettingsAutoGeneratedImages.LargeImageWidth.Value,
				(int)SettingsAutoGeneratedImages.LargeImageHeight.Value);
			return new AutogeneratedImageInfo(size, ImageSizeMode.ActualSizeOrFit);
		}
		protected AutogeneratedImageInfo GetImageInfo() {
			Size size = new Size((int)SettingsAutoGeneratedImages.ImageWidth.Value,
				(int)SettingsAutoGeneratedImages.ImageHeight.Value);
			return new AutogeneratedImageInfo(size, ImageSizeMode.ActualSizeOrFit);
		}
		protected AutogeneratedImageInfo GetThumbnailImageInfo() {
			Size size = new Size((int)SettingsAutoGeneratedImages.ThumbnailWidth.Value,
					(int)SettingsAutoGeneratedImages.ThumbnailHeight.Value);
			return new AutogeneratedImageInfo(size, ImageSizeMode.FillAndCrop);
		}
		protected internal override void CreateBinaryImages(ImageSliderItemBase baseItem) {
			ImageZoomNavigatorItem item = baseItem as ImageZoomNavigatorItem;
			if(item != null && item.ImageContentBytesInternal != null &&
				(string.IsNullOrEmpty(item.BinaryImageUrlInternal) || string.IsNullOrEmpty(item.BinaryLargeImageUrlInternal) || string.IsNullOrEmpty(item.BinaryThumbnailUrlInternal))) {
				AutogeneratedImageUrls images = FolderBindingHelper.CreateThumbnails(item.ImageContentBytesInternal);
				item.BinaryLargeImageUrlInternal = images[GetLargeImageInfo()];
				item.BinaryImageUrlInternal = images[GetImageInfo()];
				item.BinaryThumbnailUrlInternal = images[GetThumbnailImageInfo()];
			}
		}
		string IControlDesigner.DesignerType { get { return "DevExpress.Web.Design.ImageZoomNavigatorItemsOwner"; } }
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageZoomNavigatorItemDataBound"),
#endif
 Category("Data")]
		public event ImageZoomNavigatorItemEventHandler ItemDataBound {
			add { Events.AddHandler(EventItemDataBound, value); }
			remove { Events.RemoveHandler(EventItemDataBound, value); }
		}
		protected internal override void RaiseItemDataBound(ImageSliderItemBase item) {
			ImageZoomNavigatorItemEventHandler handler = Events[EventItemDataBound] as ImageZoomNavigatorItemEventHandler;
			if(handler != null)
				handler(this, new ImageZoomNavigatorItemEventArgs(item as ImageZoomNavigatorItem));
		}
	}
}
