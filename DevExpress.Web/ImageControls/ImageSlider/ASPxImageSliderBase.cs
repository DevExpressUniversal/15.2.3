#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Text;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Web.Internal;
namespace DevExpress.Web {
	public enum ImageLoadMode { AllImages = 0, DynamicLoadAndCache = 1, DynamicLoad = 2, Auto = 3 }
	public enum NavigationDirection { Horizontal = 0, Vertical = 1 }
	public enum NavigationBarMode { Thumbnails = 0, Dots = 1 }
	public enum NavigationBarPosition { Bottom = 0, Top = 1, Left = 2, Right = 3 }
	public enum NavigationBarPagingMode { Page = 0, Single = 1 }
	public enum ExtremeItemClickMode { SelectAndSlide = 0, Select = 1 }
	public enum ThumbnailNavigationBarButtonPosition { Inside = 0, Outside = 1 }
	public abstract class ASPxImageSliderBase : ASPxDataWebControl, IRequiresLoadPostDataControl, ISupportsFolderBinding {
		protected internal const string ScriptResourceName = WebScriptsResourcePath + "ImageSlider.js";
		const string NavigationButtonBackwardID = "nbb",
					 NavigationButtonForwardID = "nbf",
					 NavigationThumbnailButtonBackwardID = "ntbb",
					 NavigationThumbnailButtonForwardID = "ntbf";
		#region fields
		private ImageSliderImageAreaSettings settingsImageArea = null;
		private ImageSliderNavigationBarSettings settingsNavigationBar = null;
		private ImageSliderBehaviorSettings settingsBehavior = null;
		private ImageSliderSlideShowSettings settingsSlideShow = null;
		private ImageSliderDataHelper dataHelper = null;
		private ImageSliderTemplateHelper templateHelper = null;
		private FolderBindingHelper folderBindingHelper = null;
		private ITemplate itemTemplate = null;
		private ITemplate itemTextTemplate = null;
		private ITemplate itemThumbnailTemplate = null;
		private ImageSliderItemCollectionBase itemsinternal = null;
		#endregion
		private int NavigationBarOffset { get; set; }		
		public ASPxImageSliderBase()
			: base() {
		}
		public ASPxImageSliderBase(ASPxWebControl ownerControl)
			: base(ownerControl) {
		}
		private AutoGeneratedImagesSettingsBase settingsAutoGeneratedImagesInternal = null;
		protected AutoGeneratedImagesSettingsBase SettingsAutoGeneratedImagesInternal {
			get {
				if(settingsAutoGeneratedImagesInternal == null)
					settingsAutoGeneratedImagesInternal = CreateAutoGeneratedImagesSettings();
				return settingsAutoGeneratedImagesInternal;
			}
		}
		protected virtual AutoGeneratedImagesSettingsBase CreateAutoGeneratedImagesSettings() {
			throw new Exception("The method or operation is not implemented.");
		}
		#region properties
		protected virtual ImageSliderTemplateHelper TemplateHelper {
			get {
				if(templateHelper == null)
					templateHelper = new ImageSliderTemplateHelper(this);
				return templateHelper;
			}
		}
		protected internal virtual ImageSliderDataHelper DataHelper {
			get {
				if(dataHelper == null)
					dataHelper = new ImageSliderDataHelper(this);
				return dataHelper;
			}
		}
		protected virtual FolderBindingHelper FolderBindingHelper {
			get {
				if(folderBindingHelper == null)
					folderBindingHelper = new FolderBindingHelper(this);
				return folderBindingHelper;
			}
		}
		protected virtual bool HasTemplates {
			get { return TemplateHelper.HasTemplates(); }
		}
		protected internal ITemplate ItemTemplateInternal {
			get { return itemTemplate; }
			set {
				itemTemplate = value;
				TemplatesChanged();
			}
		}
		protected internal virtual ITemplate ItemTextTemplateInternal {
			get { return itemTextTemplate; }
			set {
				itemTextTemplate = value;
				TemplatesChanged();
			}
		}
		protected internal virtual ITemplate ItemThumbnailTemplateInternal {
			get { return itemThumbnailTemplate; }
			set {
				itemThumbnailTemplate = value;
				TemplatesChanged();
			}
		}
		protected internal virtual ImageSliderItemTemplateContainerBase CreateItemTemplateContainer(ImageSliderItemBase item) {
			return new ImageSliderItemTemplateContainerBase(item);
		}
		protected internal ImageSliderImageAreaSettings SettingsImageAreaInternal {
			get {
				if(settingsImageArea == null)
					settingsImageArea = new ImageSliderImageAreaSettings(this);
				return settingsImageArea;
			}
		}
		protected internal ImageSliderNavigationBarSettings SettingsNavigationBarInternal {
			get {
				if(settingsNavigationBar == null)
					settingsNavigationBar = new ImageSliderNavigationBarSettings(this);
				return settingsNavigationBar;
			}
		}
		protected internal ImageSliderBehaviorSettings SettingsBehaviorInternal {
			get {
				if(settingsBehavior == null)
					settingsBehavior = new ImageSliderBehaviorSettings(this);
				return settingsBehavior;
			}
		}
		protected internal ImageSliderSlideShowSettings SettingsSlideShowInternal {
			get {
				if(settingsSlideShow == null)
					settingsSlideShow = new ImageSliderSlideShowSettings(this);
				return settingsSlideShow;
			}
		}
		protected internal bool ShowImageAreaInternal {
			get { return GetBoolProperty("ShowImageAreaInternal", true); }
			set { SetBoolProperty("ShowImageAreaInternal", true, value); }
		}
		protected internal bool ShowNavigationBarInternal {
			get { return GetBoolProperty("ShowNavigationBarInternal", true); }
			set { SetBoolProperty("ShowNavigationBarInternal", true, value); }
		}
		protected internal bool KeyboardSupportInternal {
			get { return GetBoolProperty("KeyboardSupportInternal", true); }
			set {
				SetBoolProperty("KeyboardSupportInternal", true, value);
				LayoutChanged();
			}
		}
		protected internal string TargetInternal {
			get { return GetStringProperty("TargetInternal", ""); }
			set { SetStringProperty("TargetInternal", "", value); }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderBaseImageSourceFolder"),
#endif
		Category("Misc"), DefaultValue(""), Localizable(false), AutoFormatDisable]
		public virtual string ImageSourceFolder {
			get { return GetStringProperty("ImageSourceFolder", ""); }
			set {
				SetStringProperty("ImageSourceFolder", "", value);
				LayoutChanged();
			}
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderBaseActiveItemIndex"),
#endif
		Category("Behavior"), DefaultValue(0), Bindable(true), AutoFormatDisable]
		public int ActiveItemIndex {
			get { return GetIntProperty("ActiveItemIndex", 0); }
			set {
				CommonUtils.CheckNegativeValue(value, "ActiveItemIndex");
				if(ActiveItemIndex != value)
					SetIntProperty("ActiveItemIndex", 0, value);
			}
		}
		protected internal bool SeoFriendlyInternal {
			get { return GetBoolProperty("SeoFriendlyInternal", false); }
			set {
				SetEnumProperty("SeoFriendlyInternal", false, value);
				LayoutChanged();
			}
		}
		protected internal virtual ImageSliderItemCollectionBase ItemsInternal {
			get {
				if(itemsinternal == null)
					itemsinternal = CreateItemsInternal();
				return itemsinternal;
			}
		}
		protected virtual ImageSliderItemCollectionBase CreateItemsInternal() {
			return new ImageSliderItemCollectionBase(this);
		}
		#endregion
		protected internal void ItemsChanged() {
			if(!IsLoading())
				ResetControlHierarchy();
		}
		protected internal string NavigateUrlFormatStringInternal {
			get { return GetStringProperty("NavigateUrlFormatStringInternal", "{0}"); }
			set { SetStringProperty("NavigateUrlFormatStringInternal", "{0}", value); }
		}
		protected internal string ImageUrlFormatStringInternal {
			get { return GetStringProperty("ImageUrlFormatStringInternal", "{0}"); }
			set { SetStringProperty("ImageUrlFormatStringInternal", "{0}", value); }
		}
		protected internal string ThumbnailUrlFormatStringInternal {
			get { return GetStringProperty("ThumbnailUrlFormatStringInternal", "{0}"); }
			set { SetStringProperty("ThumbnailUrlFormatStringInternal", "{0}", value); }
		}
		protected internal string ImageContentBytesFieldInternal {
			get { return GetStringProperty("ImageContentBytesFieldInternal", ""); }
			set {
				SetStringProperty("ImageContentBytesFieldInternal", "", value);
				OnDataFieldChanged();
			}
		}
		protected internal string ThumbnailContentBytesFieldInternal {
			get { return GetStringProperty("ThumbnailContentBytesFieldInternal", ""); }
			set {
				SetStringProperty("ThumbnailContentBytesFieldInternal", "", value);
				OnDataFieldChanged();
			}
		}
		protected internal string ImageUrlFieldInternal {
			get { return GetStringProperty("ImageUrlFieldInternal", ""); }
			set {
				SetStringProperty("ImageUrlFieldInternal", "", value);
				OnDataFieldChanged();
			}
		}
		protected internal string ThumbnailUrlFieldInternal {
			get { return GetStringProperty("ThumbnailUrlFieldInternal", ""); }
			set {
				SetStringProperty("ThumbnailUrlFieldInternal", "", value);
				OnDataFieldChanged();
			}
		}
		protected internal string NavigateUrlFieldInternal {
			get { return GetStringProperty("NavigateUrlFieldInternal", ""); }
			set {
				SetStringProperty("NavigateUrlFieldInternal", "", value);
				OnDataFieldChanged();
			}
		}
		protected internal string TextFieldInternal {
			get { return GetStringProperty("TextFieldInternal", ""); }
			set {
				SetStringProperty("TextFieldInternal", "", value);
				OnDataFieldChanged();
			}
		}
		protected internal string NameFieldInternal {
			get { return GetStringProperty("NameFieldInternal", ""); }
			set {
				SetStringProperty("NameFieldInternal", "", value);
				OnDataFieldChanged();
			}
		}
		protected internal override void PerformDataBinding(string dataHelperName, IEnumerable data) {
			if(!string.IsNullOrEmpty(DataSourceID) || (DataSource != null)) {
				DataBindItems(data);
				ResetControlHierarchy();
			}
		}
		protected void DataBindItems(IEnumerable data) {
			ItemsInternal.Clear();
			Dictionary<string, string> filedNames = GetFieldNameDictionary();
			foreach(object obj in data) {
				ImageSliderItemBase item = CreateItem();
				ItemsInternal.Add(item);
				DataBindItemProperties(item, obj, filedNames);
				RaiseItemDataBound(item);
			}
		}
		protected internal virtual ImageSliderItemBase CreateItem() {
			return new ImageSliderItemBase();
		}
		protected virtual Dictionary<string, string> GetFieldNameDictionary() {
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary["ImageUrl"] = GetFieldName(ImageUrlFieldInternal, "ImageUrl");
			dictionary["ThumbnailUrl"] = GetFieldName(ThumbnailUrlFieldInternal, "ThumbnailUrl");
			dictionary["NavigateUrl"] = GetFieldName(NavigateUrlFieldInternal, "NavigateUrl");
			dictionary["Text"] = GetFieldName(TextFieldInternal, "Text");
			dictionary["Name"] = GetFieldName(NameFieldInternal, "Name");
			dictionary["ImageContentBytes"] = GetFieldName(ImageContentBytesFieldInternal, "ImageContentBytes");
			dictionary["ThumbnailImageContentBytes"] = GetFieldName(ThumbnailContentBytesFieldInternal, "ThumbnailImageContentBytes");
			return dictionary;
		}
		protected string GetFieldName(string fieldName, string defaultFieldName) {
			return string.IsNullOrEmpty(fieldName) ? defaultFieldName : fieldName;
		}
		protected virtual void DataBindItemProperties(ImageSliderItemBase item, object obj, Dictionary<string, string> fieldNames) {
			item.DataItem = obj;
			item.ImageUrlInternal = GetFieldValue(obj, fieldNames["ImageUrl"], false, string.Empty).ToString();
			item.ThumbnailUrlInternal = GetFieldValue(obj, fieldNames["ThumbnailUrl"], false, string.Empty).ToString();
			item.NavigateUrlInternal = GetFieldValue(obj, fieldNames["NavigateUrl"], false, string.Empty).ToString();
			item.TextInternal = GetFieldValue(obj, fieldNames["Text"], false, string.Empty).ToString();
			item.NameInternal = GetFieldValue(obj, fieldNames["Name"], false, string.Empty).ToString();
			item.ImageContentBytesInternal = (byte[])GetFieldValue(obj, fieldNames["ImageContentBytes"], false, null);
			item.ThumbnailContentBytesInternal = (byte[])GetFieldValue(obj, fieldNames["ThumbnailImageContentBytes"], false, null);
			CreateBinaryImages(item);
		}
		protected internal abstract void CreateBinaryImages(ImageSliderItemBase item);
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderBaseClientInstanceName"),
#endif
		Category("Client-Side"), DefaultValue(""), Localizable(false), AutoFormatDisable]
		public string ClientInstanceName {
			get { return base.ClientInstanceNameInternal; }
			set { base.ClientInstanceNameInternal = value; }
		}
		protected override bool IsScriptEnabled() {
			return true;
		}
		protected override bool HasFunctionalityScripts() {
			return true;
		}
		protected override bool IsAnimationScriptNeeded() {
			return true;
		}
		protected override void RegisterIncludeScripts() {
			base.RegisterIncludeScripts();
			RegisterImageControlUtilsScript();
			RegisterIncludeScript(typeof(ASPxImageSlider), ScriptResourceName);
		}
		protected override string GetClientObjectClassName() {
			return "ASPxClientImageSlider";
		}
		protected override bool HasHoverScripts() {
			return true;
		}
		protected override bool HasPressedScripts() {
			return true;
		}
		protected override bool HasSelectedScripts() {
			return true;
		}
		protected override bool HasDisabledScripts() {
			return true;
		}
		protected override bool HasSpriteCssFile() {
			return true;
		}
		protected override StylesBase CreateStyles() {
			return new ImageSliderStylesBase(this);
		}
		protected internal ImageSliderStylesBase GetStylesInternal() {
			return StylesInternal as ImageSliderStylesBase;
		}
		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override DisabledStyle DisabledStyle {
			get { return base.DisabledStyle; }
		}
		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override string CssPostfix {
			get { return base.CssPostfix; }
			set { base.CssPostfix = value; }
		}
		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), UrlProperty,
		DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override string CssFilePath {
			get { return base.CssFilePath; }
			set { base.CssFilePath = value; }
		}
		protected internal virtual ImageSliderStyle GetPlayPauseButtonStyle() {
			return GetCompositeStyle<ImageSliderStyle>(GetStylesInternal().GetDefaultPlayPauseButtonStyle(), GetStylesInternal().PlayPauseButtonInternal);
		}
		protected internal virtual ImageSliderPassePartoutStyle GetPassePartoutStyle() {
			return GetCompositeStyle<ImageSliderPassePartoutStyle>(GetStylesInternal().GetDefaultPassePartoutStyle(), GetStylesInternal().PassePartoutInternal);
		}
		protected internal virtual ImageSliderImageAreaStyle GetImageAreaStyle() {
			return GetCompositeStyle<ImageSliderImageAreaStyle>(GetStylesInternal().GetDefaultImageAreaStyle(), GetStylesInternal().ImageAreaInternal);
		}
		protected virtual AppearanceStyle GetItemTextAreaStyle() {
			return GetCompositeStyle<AppearanceStyle>(GetStylesInternal().GetDefaultItemTextAreaStyle(), GetStylesInternal().ItemTextAreaInternal);
		}
		protected virtual ImageSliderStyle GetItemStyle() {
			return GetCompositeStyle<ImageSliderStyle>(GetStylesInternal().GetDefaultItemStyle(), GetStylesInternal().ItemInternal);
		}
		protected virtual ImageSliderNavigationBarStyle GetNavigationBarStyle() {
			bool isThumbnail = (SettingsNavigationBarInternal.Mode == NavigationBarMode.Thumbnails);
			switch(SettingsNavigationBarInternal.Position) {
				case NavigationBarPosition.Top:
				return GetCompositeStyle<ImageSliderNavigationBarStyle>(
					isThumbnail ? GetStylesInternal().GetDefaultNavigationBarThumbnailsModeTopStyle() : GetStylesInternal().GetDefaultNavigationBarDotsModeTopStyle(),
					isThumbnail ? GetStylesInternal().NavigationBarThumbnailsModeTopInternal : GetStylesInternal().NavigationBarDotsModeTopInternal);
				case NavigationBarPosition.Bottom:
				return GetCompositeStyle<ImageSliderNavigationBarStyle>(
					isThumbnail ? GetStylesInternal().GetDefaultNavigationBarThumbnailsModeBottomStyle() : GetStylesInternal().GetDefaultNavigationBarDotsModeBottomStyle(),
					isThumbnail ? GetStylesInternal().NavigationBarThumbnailsModeBottomInternal : GetStylesInternal().NavigationBarDotsModeBottomInternal);
				case NavigationBarPosition.Left:
				return GetCompositeStyle<ImageSliderNavigationBarStyle>(
					isThumbnail ? GetStylesInternal().GetDefaultNavigationBarThumbnailsModeLeftStyle() : GetStylesInternal().GetDefaultNavigationBarDotsModeLeftStyle(),
					isThumbnail ? GetStylesInternal().NavigationBarThumbnailsModeLeftInternal : GetStylesInternal().NavigationBarDotsModeLeftInternal);
				case NavigationBarPosition.Right:
				return GetCompositeStyle<ImageSliderNavigationBarStyle>(
					isThumbnail ? GetStylesInternal().GetDefaultNavigationBarThumbnailsModeRightStyle() : GetStylesInternal().GetDefaultNavigationBarDotsModeRightStyle(),
					isThumbnail ? GetStylesInternal().NavigationBarThumbnailsModeRightInternal : GetStylesInternal().NavigationBarDotsModeRightInternal);
				default:
				return new ImageSliderNavigationBarStyle();
			}
		}
		protected virtual ImageSliderNavigationBarThumbnailStyle GetThumbnailStyle() {
			return GetCompositeStyle<ImageSliderNavigationBarThumbnailStyle>(GetStylesInternal().GetDefaultThumbnailStyle(), GetStylesInternal().ThumbnailInternal);
		}
		protected virtual AppearanceSelectedStyle GetThumbnailSelectedStyle() {
			return GetCompositeStyle<AppearanceSelectedStyle>(GetStylesInternal().GetDefaultThumbnailStyle().SelectedStyle, GetStylesInternal().ThumbnailInternal.SelectedStyle);
		}
		protected virtual ImageSliderNavigationBarDotStyle GetDotStyle() {
			ImageSliderNavigationBarDotStyle style =
				GetCompositeStyle<ImageSliderNavigationBarDotStyle>(GetStylesInternal().GetDefaultDotStyle(), GetStylesInternal().DotInternal);
			string urlSelected = GetDotImage().UrlSelected;
			if(!string.IsNullOrEmpty(urlSelected))
				style.SelectedStyle.BackgroundImage.ImageUrl = urlSelected;
			return style;
		}
		protected virtual ImageSliderNavigationButtonStyle GetPrevButtonStyle() {
			if(SettingsImageAreaInternal.NavigationDirection == NavigationDirection.Horizontal)
				return GetCompositeStyle<ImageSliderNavigationButtonStyle>(GetStylesInternal().GetDefaultPrevButtonHorizontalStyle(),
					GetStylesInternal().PrevButtonHorizontalInternal);
			else
				return GetCompositeStyle<ImageSliderNavigationButtonStyle>(GetStylesInternal().GetDefaultPrevButtonVerticalStyle(),
					GetStylesInternal().PrevButtonVerticalInternal);
		}
		protected virtual ImageSliderNavigationButtonStyle GetNextButtonStyle() {
			if(SettingsImageAreaInternal.NavigationDirection == NavigationDirection.Horizontal)
				return GetCompositeStyle<ImageSliderNavigationButtonStyle>(GetStylesInternal().GetDefaultNextButtonHorizontalStyle(),
					GetStylesInternal().NextButtonHorizontalInternal);
			else
				return GetCompositeStyle<ImageSliderNavigationButtonStyle>(GetStylesInternal().GetDefaultNextButtonVerticalStyle(),
					GetStylesInternal().NextButtonVerticalInternal);
		}
		protected virtual ImageSliderNavigationButtonStyle GetPrevPageButtonStyle() {
			if(SettingsNavigationBarInternal.ThumbnailsNavigationButtonPosition == ThumbnailNavigationBarButtonPosition.Inside) {
				return GetPageButtonStyle(GetStylesInternal().GetDefaultPrevPageButtonHorizontalStyle(), GetStylesInternal().PrevPageButtonHorizontalInternal,
					GetStylesInternal().GetDefaultPrevPageButtonVerticalStyle(), GetStylesInternal().PrevPageButtonVerticalInternal);
			} else {
				return GetPageButtonStyle(GetStylesInternal().GetDefaultPrevPageButtonHorizontalOutsideStyle(), GetStylesInternal().PrevPageButtonHorizontalOutsideInternal,
					GetStylesInternal().GetDefaultPrevPageButtonVerticalOutsideStyle(), GetStylesInternal().PrevPageButtonVerticalOutsideInternal);
			}
		}
		protected virtual ImageSliderNavigationButtonStyle GetNextPageButtonStyle() {
			if(SettingsNavigationBarInternal.ThumbnailsNavigationButtonPosition == ThumbnailNavigationBarButtonPosition.Inside) {
				return GetPageButtonStyle(GetStylesInternal().GetDefaultNextPageButtonHorizontalStyle(), GetStylesInternal().NextPageButtonHorizontalInternal,
					GetStylesInternal().GetDefaultNextPageButtonVerticalStyle(), GetStylesInternal().NextPageButtonVerticalInternal);
			} else {
				return GetPageButtonStyle(GetStylesInternal().GetDefaultNextPageButtonHorizontalOutsideStyle(), GetStylesInternal().NextPageButtonHorizontalOutsideInternal,
					GetStylesInternal().GetDefaultNextPageButtonVerticalOutsideStyle(), GetStylesInternal().NextPageButtonVerticalOutsideInternal);
			}
		}
		protected virtual ImageSliderNavigationButtonStyle GetPageButtonStyle(
			ImageSliderNavigationButtonStyle defaultHorStyle, ImageSliderNavigationButtonStyle horStyle,
			ImageSliderNavigationButtonStyle defaultVerticalStyle, ImageSliderNavigationButtonStyle verticalStyle) {
			if(SettingsNavigationBarInternal.Position == NavigationBarPosition.Top || SettingsNavigationBarInternal.Position == NavigationBarPosition.Bottom)
				return GetCompositeStyle<ImageSliderNavigationButtonStyle>(defaultHorStyle, horStyle);
			else
				return GetCompositeStyle<ImageSliderNavigationButtonStyle>(defaultVerticalStyle, verticalStyle);
		}
		protected T GetCompositeStyle<T>(params AppearanceStyleBase[] styles) where T : AppearanceStyleBase, new() {
			T resultStyle = new T();
			foreach(AppearanceStyleBase style in styles)
				resultStyle.CopyFrom(style);
			return resultStyle;
		}
		protected override ImagesBase CreateImages() {
			return new ImageSliderImagesBase(this);
		}
		protected internal ImageSliderImagesBase GetImagesInternal() {
			return ImagesInternal as ImageSliderImagesBase;
		}
		protected virtual ImageProperties GetPlayButtonImage() {
			return CreateImageSpriteProperties<ImageProperties>(GetImagesInternal().PlayButtonInternal, ImageSliderImages.PlayButtonImageName);
		}
		protected virtual ImageProperties GetPauseButtonImage() {
			return CreateImageSpriteProperties<ImageProperties>(GetImagesInternal().PauseButtonInternal, ImageSliderImages.PauseButtonImageName);
		}
		protected virtual ItemImageProperties GetDotImage() {
			return CreateImageSpriteProperties<ItemImageProperties>(GetImagesInternal().DotInternal, ImageSliderImages.DotImageName);
		}
		protected virtual ButtonImageProperties GetPrevButtonImage() {
			return GetButtonImage(GetImagesInternal().PrevButtonVerticalInternal, GetImagesInternal().PrevButtonHorizontalInternal,
			   ImageSliderImages.PrevButtonVerticalImageName, ImageSliderImages.PrevButtonHorizontalImageName);
		}
		protected virtual ButtonImageProperties GetNextButtonImage() {
			return GetButtonImage(GetImagesInternal().NextButtonVerticalInternal, GetImagesInternal().NextButtonHorizontalInternal,
				ImageSliderImages.NextButtonVerticalImageName, ImageSliderImages.NextButtonHorizontalImageName);
		}
		protected virtual ButtonImageProperties GetPrevPageButtonImage() {
			if(SettingsNavigationBarInternal.ThumbnailsNavigationButtonPosition == ThumbnailNavigationBarButtonPosition.Inside) {
				return GetPageButtonImage(GetImagesInternal().PrevPageButtonVerticalInternal, GetImagesInternal().PrevPageButtonHorizontalInternal,
					ImageSliderImages.PrevPageButtonVerticalImageName, ImageSliderImages.PrevPageButtonHorizontalImageName);
			} else {
				return GetPageButtonImage(GetImagesInternal().PrevPageButtonVerticalOutsideInternal, GetImagesInternal().PrevPageButtonHorizontalOutsideInternal,
					ImageSliderImages.PrevPageButtonVerticalOutsideImageName, ImageSliderImages.PrevPageButtonHorizontalOutsideImageName);
			}
		}
		protected virtual ButtonImageProperties GetNextPageButtonImage() {
			if(SettingsNavigationBarInternal.ThumbnailsNavigationButtonPosition == ThumbnailNavigationBarButtonPosition.Inside) {
				return GetPageButtonImage(GetImagesInternal().NextPageButtonVerticalInternal, GetImagesInternal().NextPageButtonHorizontalInternal,
					ImageSliderImages.NextPageButtonVerticalImageName, ImageSliderImages.NextPageButtonHorizontalImageName);
			} else {
				return GetPageButtonImage(GetImagesInternal().NextPageButtonVerticalOutsideInternal, GetImagesInternal().NextPageButtonHorizontalOutsideInternal,
					ImageSliderImages.NextPageButtonVerticalOutsideImageName, ImageSliderImages.NextPageButtonHorizontalOutsideImageName);
			}
		}
		protected virtual ButtonImageProperties GetButtonImage(ButtonImageProperties verticalImgProps,
			ButtonImageProperties horizontalImgProps, string verticalSpriteName, string horizontalSpriteName) {
			if(SettingsImageAreaInternal.NavigationDirection == NavigationDirection.Horizontal)
				return CreateImageSpriteProperties<ButtonImageProperties>(horizontalImgProps, horizontalSpriteName);
			return CreateImageSpriteProperties<ButtonImageProperties>(verticalImgProps, verticalSpriteName);
		}
		protected virtual ButtonImageProperties GetPageButtonImage(ButtonImageProperties verticalImgProps,
			ButtonImageProperties horizontalImgProps, string verticalSpriteName, string horizontalSpriteName) {
			if(SettingsNavigationBarInternal.Position == NavigationBarPosition.Top || SettingsNavigationBarInternal.Position == NavigationBarPosition.Bottom)
				return CreateImageSpriteProperties<ButtonImageProperties>(horizontalImgProps, horizontalSpriteName);
			return CreateImageSpriteProperties<ButtonImageProperties>(verticalImgProps, verticalSpriteName);
		}
		private T CreateImageSpriteProperties<T>(T imgProps, string spriteName) where T : ImagePropertiesBase, new() {
			T sprite = new T();
			sprite.MergeWith(GetImagesInternal().GetImageProperties(Page, spriteName));
			sprite.MergeWith(imgProps);
			ResolveImageUrls(sprite);
			return sprite;
		}
		protected internal abstract void RaiseItemDataBound(ImageSliderItemBase item);
		protected override IStateManager[] GetStateManagedObjects() {
			List<IStateManager> list = new List<IStateManager>(ViewStateUtils.GetMergedStateManagedObjects(base.GetStateManagedObjects(),
				new IStateManager[] { SettingsImageAreaInternal, SettingsNavigationBarInternal, SettingsBehaviorInternal, SettingsSlideShowInternal, SettingsAutoGeneratedImagesInternal }));
			if(CanAddItemsInViewState)
				list.Add(ItemsInternal);
			return list.ToArray();
		}
		protected virtual bool CanAddItemsInViewState {
			get { return true; }
		}
		protected override bool LoadPostData(NameValueCollection postCollection) {
			if(ClientObjectState == null) return false;
			NavigationBarOffset = GetClientObjectStateValue<int>("navigationBarOffset");
			int newActiveItemIndex = GetClientObjectStateValue<int>("activeItemIndex");
			bool changed = ActiveItemIndex != newActiveItemIndex;
			ActiveItemIndex = newActiveItemIndex;
			return changed;
		}
		protected override void AddHoverItems(StateScriptRenderHelper helper) {
			if(SettingsImageAreaInternal.NavigationButtonVisibility != ElementVisibilityMode.None) {
				helper.AddStyle(GetPrevButtonStyle().HoverStyle, NavigationButtonBackwardID, new string[0],
					GetPrevButtonImage().GetHottrackedScriptObject(Page), string.Empty, IsEnabled());
				helper.AddStyle(GetNextButtonStyle().HoverStyle, NavigationButtonForwardID, new string[0],
					GetNextButtonImage().GetHottrackedScriptObject(Page), string.Empty, IsEnabled());
			}
			if(GetActualNavigationBarButtonVisibility() != ElementVisibilityMode.None) {
				helper.AddStyle(GetPrevPageButtonStyle().HoverStyle, NavigationThumbnailButtonBackwardID, new string[0],
						GetPrevPageButtonImage().GetHottrackedScriptObject(Page), string.Empty, IsEnabled());
				helper.AddStyle(GetNextPageButtonStyle().HoverStyle, NavigationThumbnailButtonForwardID, new string[0],
					GetNextPageButtonImage().GetHottrackedScriptObject(Page), string.Empty, IsEnabled());
			}
		}
		protected override void AddPressedItems(StateScriptRenderHelper helper) {
			if(SettingsImageAreaInternal.NavigationButtonVisibility != ElementVisibilityMode.None) {
				helper.AddStyle(GetPrevButtonStyle().PressedStyle, NavigationButtonBackwardID, new string[0],
					GetPrevButtonImage().GetPressedScriptObject(Page), string.Empty, IsEnabled());
				helper.AddStyle(GetNextButtonStyle().PressedStyle, NavigationButtonForwardID, new string[0],
					GetNextButtonImage().GetPressedScriptObject(Page), string.Empty, IsEnabled());
			}
			if(GetActualNavigationBarButtonVisibility() != ElementVisibilityMode.None) {
				helper.AddStyle(GetPrevPageButtonStyle().PressedStyle, NavigationThumbnailButtonBackwardID, new string[0],
						GetPrevPageButtonImage().GetPressedScriptObject(Page), string.Empty, IsEnabled());
				helper.AddStyle(GetNextPageButtonStyle().PressedStyle, NavigationThumbnailButtonForwardID, new string[0],
					GetNextPageButtonImage().GetPressedScriptObject(Page), string.Empty, IsEnabled());
			}
		}
		protected override void AddDisabledItems(StateScriptRenderHelper helper) {
			if(SettingsImageAreaInternal.NavigationButtonVisibility != ElementVisibilityMode.None) {
				helper.AddStyle(GetPrevButtonStyle().DisabledStyle, NavigationButtonBackwardID, new string[0],
					GetPrevButtonImage().GetDisabledScriptObject(Page), string.Empty, IsEnabled());
				helper.AddStyle(GetNextButtonStyle().DisabledStyle, NavigationButtonForwardID, new string[0],
					GetNextButtonImage().GetDisabledScriptObject(Page), string.Empty, IsEnabled());
			}
			if(GetActualNavigationBarButtonVisibility() != ElementVisibilityMode.None) {
				helper.AddStyle(GetPrevPageButtonStyle().DisabledStyle, NavigationThumbnailButtonBackwardID, new string[0],
						GetPrevPageButtonImage().GetDisabledScriptObject(Page), string.Empty, IsEnabled());
				helper.AddStyle(GetNextPageButtonStyle().DisabledStyle, NavigationThumbnailButtonForwardID, new string[0],
					GetNextPageButtonImage().GetDisabledScriptObject(Page), string.Empty, IsEnabled());
			}
		}
		protected override void GetCreateClientObjectScript(StringBuilder stb, string localVarName, string clientName) {
			base.GetCreateClientObjectScript(stb, localVarName, clientName);
			if(HasTemplates)
				stb.AppendFormat("{0}.hasTemplates = true;\n", localVarName);
			else
				GetClientDataItems(stb, localVarName);
			if(ActiveItemIndex != 0 && ActiveItemIndex < ItemsInternal.Count)
				stb.AppendFormat("{0}.activeItemIndex = {1};\n", localVarName, ActiveItemIndex);
			if(!KeyboardSupportInternal)
				stb.AppendFormat("{0}.enableKeyboardSupport = false;\n", localVarName);
			if(GetActualAnimationType() != AnimationType.Slide)
				stb.AppendFormat("{0}.animationType = {1};\n", localVarName, (int)GetActualAnimationType());
			if(GetActualImageLoadMode() != ImageLoadMode.DynamicLoadAndCache)
				stb.AppendFormat("{0}.imageLoadMode = {1};\n", localVarName, (int)GetActualImageLoadMode());
			if(!SettingsBehaviorInternal.EnablePagingGestures)
				stb.AppendFormat("{0}.enablePagingGestures = false;\n", localVarName);
			if(!RenderUtils.Browser.Platform.IsTouchUI && SettingsBehaviorInternal.AllowMouseWheel)
				stb.AppendFormat("{0}.allowMouseWheel = true;\n", localVarName);
			if(ShowImageAreaInternal) {
				GetStyleScript(stb, localVarName, GetItemStyle(), "itemCssCl", "itemStyle");
				GetStyleScript(stb, localVarName, GetPassePartoutStyle(), "passePartoutStyle");
				GetStyleScript(stb, localVarName, GetImageAreaStyle(), "imgAreaCssCl", "imgAreaStyle");
				if(SettingsImageAreaInternal.EnableLoopNavigation)
					stb.AppendFormat("{0}.enableLoopNavigation = true;\n", localVarName);
				if(SettingsImageAreaInternal.ImageSizeMode != ImageSizeMode.ActualSizeOrFit)
					stb.AppendFormat("{0}.imageSizeMode = {1};\n", localVarName, (int)SettingsImageAreaInternal.ImageSizeMode);
				if(SettingsImageAreaInternal.NavigationDirection == NavigationDirection.Vertical)
					stb.AppendFormat("{0}.navDirection = {1};\n", localVarName, (int)NavigationDirection.Vertical);
				if(!GetActualEnablePagingByClick())
					stb.AppendFormat("{0}.enablePagingByClick = false;\n", localVarName);
				if(SettingsImageAreaInternal.NavigationButtonVisibility != ElementVisibilityMode.OnMouseOver)
					stb.AppendFormat("{0}.navBtnsVbl = {1};\n", localVarName, (int)SettingsImageAreaInternal.NavigationButtonVisibility);
				if(SettingsImageAreaInternal.NavigationButtonVisibility != ElementVisibilityMode.None)
					GetNavigationButtonsHtml(stb, localVarName);
				if(SettingsImageAreaInternal.ItemTextVisibility != ElementVisibilityMode.Always)
					stb.AppendFormat("{0}.itemTxtVbl = {1};\n", localVarName, (int)SettingsImageAreaInternal.ItemTextVisibility);
				if(SettingsImageAreaInternal.ItemTextVisibility != ElementVisibilityMode.None)
					GetStyleScript(stb, localVarName, GetItemTextAreaStyle(), "itemTxtCssCl", "itemTxtStyle");
				if(DataHelper.HasNavigateUrl) {
					stb.AppendFormat("{0}.hasNavigateUrls = true;\n", localVarName);
					if(!string.IsNullOrEmpty(TargetInternal))
						stb.AppendFormat("{0}.target = '{1}';\n", localVarName, TargetInternal);
				}
				if(SettingsSlideShowInternal.PlayPauseButtonVisibility != ElementVisibilityMode.None) {
					stb.AppendFormat("{0}.playPauseBtnVbl = {1};\n", localVarName, (int)SettingsSlideShowInternal.PlayPauseButtonVisibility);
					GetPlayButtonHtml(stb, localVarName);
					GetPauseButtonHtml(stb, localVarName);
				}
				if(SettingsImageAreaInternal.AnimationDuration != ImageSliderImageAreaSettings.DefaultDuration)
					stb.AppendFormat("{0}.animationDuration = {1};\n", localVarName, SettingsImageAreaInternal.AnimationDuration);
			} else
				stb.AppendFormat("{0}.showImageArea = false;\n", localVarName);
			if(ShowNavigationBarInternal) {
				if(SettingsNavigationBarInternal.Position != NavigationBarPosition.Bottom)
					stb.AppendFormat("{0}.navBarPos = {1};\n", localVarName, (int)SettingsNavigationBarInternal.Position);
				if(SettingsNavigationBarInternal.ThumbnailsNavigationButtonPosition != ThumbnailNavigationBarButtonPosition.Inside)
					stb.AppendFormat("{0}.thumbNavBtnsPos = {1};\n", localVarName, (int)SettingsNavigationBarInternal.ThumbnailsNavigationButtonPosition);
				if(NavigationBarOffset != 0)
					stb.AppendFormat("{0}.navBarOffset = {1};\n", localVarName, NavigationBarOffset);
				if(SettingsBehaviorInternal.ExtremeItemClickMode == ExtremeItemClickMode.Select)
					stb.AppendFormat("{0}.extremeItemClickMode = {1};\n", localVarName, (int)ExtremeItemClickMode.Select);
				GetStyleScript(stb, localVarName, GetNavigationBarStyle(), "navBarCssCl", "navBarStyle");
				if(SettingsNavigationBarInternal.Mode == NavigationBarMode.Dots) {
					GetDotButtonHtml(stb, localVarName);
					ItemImageProperties dotImage = GetDotImage();
					ImageSliderNavigationBarDotStyle dotStyle = GetDotStyle();
					GetStyleScript(stb, localVarName, dotStyle.HoverStyle, dotImage.GetHottrackedScriptObject(Page), "dotHCssCl",
						"dotHStyle", "dotHSprt");
					GetStyleScript(stb, localVarName, dotStyle.PressedStyle, dotImage.GetPressedScriptObject(Page), "dotPCssCl",
						"dotPStyle", "dotPSprt");
					GetStyleScript(stb, localVarName, dotStyle.SelectedStyle, dotImage.GetSelectedScriptObject(Page), "dotSCssCl",
						"dotSStyle", "dotSSprt");
				} else {
					GetStyleScript(stb, localVarName, GetThumbnailStyle(), "thCssCl", "thStyle");
					GetStyleScript(stb, localVarName, GetThumbnailSelectedStyle(), "thSelCssCl", "thSelStyle");
				}
				if(GetActualNavigationBarButtonVisibility() != ElementVisibilityMode.OnMouseOver)
					stb.AppendFormat("{0}.thumbNavBtnsVbl = {1};\n", localVarName, (int)GetActualNavigationBarButtonVisibility());
				if(GetActualNavigationBarButtonVisibility() != ElementVisibilityMode.None)
					GetNavigationBarNavigationButtonsHtml(stb, localVarName);
				if(SettingsNavigationBarInternal.PagingMode != NavigationBarPagingMode.Page)
					stb.AppendFormat("{0}.navBarPagingMode = {1};\n", localVarName, (int)SettingsNavigationBarInternal.PagingMode);
				if(SettingsNavigationBarInternal.ItemSpacing != Unit.Parse(ImageSliderNavigationBarSettings.DefaultItemSpacing))
					stb.AppendFormat("{0}.itemSpacing = {1};\n", localVarName, SettingsNavigationBarInternal.ItemSpacing.Value);
				if(!ShowImageAreaInternal && SettingsNavigationBarInternal.VisibleItemsCount > 0)
					stb.AppendFormat("{0}.visibleItemsCount = {1};\n", localVarName, SettingsNavigationBarInternal.VisibleItemsCount);
			} else
				stb.AppendFormat("{0}.showNavBar = false;\n", localVarName);
			if(SettingsSlideShowInternal.Interval != ImageSliderSlideShowSettings.DefaultInterval)
				stb.AppendFormat("{0}.interval = {1};\n", localVarName, SettingsSlideShowInternal.Interval);
			if(SettingsSlideShowInternal.AutoPlay)
				stb.AppendFormat("{0}.autoPlay = true;\n", localVarName);
			if(SettingsSlideShowInternal.StopPlayingWhenPaging)
				stb.AppendFormat("{0}.stopPlayingWhenPaging = true;\n", localVarName);
			if(!RenderUtils.Browser.Platform.IsTouchUI && SettingsSlideShowInternal.PausePlayingWhenMouseOver)
				stb.AppendFormat("{0}.pausePlayingWhenMouseOver = true;\n", localVarName);
		}
		protected void GetClientDataItems(StringBuilder stb, string localVarName) {
			if(CanCreateClientDataItems()) {
				List<object> clientItems = new List<object>();
				foreach(ImageSliderItemBase item in ItemsInternal)
					clientItems.Add(CreateClientItem(item));
				if(clientItems.Count > 0)
					stb.AppendFormat("{0}.items = {1};\n", localVarName, HtmlConvertor.ToJSON(clientItems));
			}
		}
		protected virtual bool CanCreateClientDataItems() {
			return !SeoFriendlyInternal;
		}
		protected virtual object CreateClientItem(ImageSliderItemBase item) {
			return SeoFriendlyInternal ? CreatePartialClientItem(item) : CreateFullClientItem(item);
		}
		protected virtual Dictionary<string, string> CreatePartialClientItem(ImageSliderItemBase item) {
			Dictionary<string, string> clientItem = new Dictionary<string, string>();
			if(TemplateHelper.ContainsItemTemplate(item))
				clientItem.Add("tpl", TemplateHelper.GetItemTemplateResult(item));
			if(TemplateHelper.ContainsItemTextTemplate(item))
				clientItem.Add("ttpl", TemplateHelper.GetItemTextTemplateResult(item));
			if(TemplateHelper.ContainsItemThumbnailTemplate(item))
				clientItem.Add("tmtpl", TemplateHelper.GetItemThumbnailTemplateResult(item));
			string thumbnailUrl = DataHelper.GetThumbnailUrl(item);
			if(!string.IsNullOrEmpty(thumbnailUrl))
				clientItem.Add("ts", thumbnailUrl);
			if(!string.IsNullOrEmpty(item.NameInternal))
				clientItem.Add("n", item.NameInternal);
			if(AccessibilityCompliantInternal)
				if(string.IsNullOrEmpty(item.AlternateText)) {					
					string alternateText = ImageUtils.GetAlternateTextByUrl(DataHelper.GetBaseUrlForAlternateText(item));
					if(!string.IsNullOrEmpty(alternateText))
						clientItem.Add("at", alternateText);
				}
			return clientItem;
		}
		protected virtual Dictionary<string, string> CreateFullClientItem(ImageSliderItemBase item) {
			Dictionary<string, string> clientItem = CreatePartialClientItem(item);
			string imageUrl = DataHelper.GetImageUrl(item);
			if(!string.IsNullOrEmpty(imageUrl))
				clientItem.Add("s", imageUrl);
			if(!string.IsNullOrEmpty(item.TextInternal))
				clientItem.Add("t", DataHelper.GetItemText(item));
			if(!string.IsNullOrEmpty(item.NavigateUrlInternal))
				clientItem.Add("u", DataHelper.GetNavigateUrl(item));
			return clientItem;
		}
		protected virtual void GetPlayButtonHtml(StringBuilder stb, string localVarName) {
			stb.AppendFormat("{0}.playBH = {1};\n", localVarName, GetButtonHtml(GetPlayButtonImage(), GetPlayPauseButtonStyle()));
		}
		protected virtual void GetPauseButtonHtml(StringBuilder stb, string localVarName) {
			stb.AppendFormat("{0}.pauseBH = {1};\n", localVarName, GetButtonHtml(GetPauseButtonImage(), GetPlayPauseButtonStyle()));
		}
		protected virtual void GetDotButtonHtml(StringBuilder stb, string localVarName) {
			stb.AppendFormat("{0}.dbh = {1};\n", localVarName, GetButtonHtml(GetDotImage(), GetDotStyle()));
		}
		protected virtual void GetNavigationButtonsHtml(StringBuilder stb, string localVarName) {
			stb.AppendFormat("{0}.pbh = {1};\n", localVarName, GetButtonHtml(GetPrevButtonImage(), GetPrevButtonStyle(), NavigationButtonBackwardID));
			stb.AppendFormat("{0}.nbh = {1};\n", localVarName, GetButtonHtml(GetNextButtonImage(), GetNextButtonStyle(), NavigationButtonForwardID));
		}
		protected virtual void GetNavigationBarNavigationButtonsHtml(StringBuilder stb, string localVarName) {
			stb.AppendFormat("{0}.nbpbh = {1};\n", localVarName, GetButtonHtml(GetPrevPageButtonImage(), GetPrevPageButtonStyle(), NavigationThumbnailButtonBackwardID));
			stb.AppendFormat("{0}.nbnbh = {1};\n", localVarName, GetButtonHtml(GetNextPageButtonImage(), GetNextPageButtonStyle(), NavigationThumbnailButtonForwardID));
		}
		protected virtual void GetStyleScript(StringBuilder stb, string localVarName, AppearanceStyleBase style, string cssField) {
			string cssText = style.GetStyleAttributes(Page).Value;
			if(!string.IsNullOrEmpty(cssText))
				stb.AppendFormat("{0}.{1} = {2};\n", localVarName, cssField, HtmlConvertor.ToScript(cssText));
		}
		protected virtual void GetStyleScript(StringBuilder stb, string localVarName, AppearanceStyleBase style, string classField, string cssField) {
			GetStyleScript(stb, localVarName, style, cssField);
			if(!string.IsNullOrEmpty(style.CssClass))
				stb.AppendFormat("{0}.{1} = {2};\n", localVarName, classField, HtmlConvertor.ToScript(style.CssClass));
		}
		protected virtual void GetStyleScript(StringBuilder stb, string localVarName, AppearanceStyleBase style, object spriteProp, string classField, string cssField, string spriteField) {
			GetStyleScript(stb, localVarName, style, classField, cssField);
			stb.AppendFormat("{0}.{1} = {2};\n", localVarName, spriteField, HtmlConvertor.ToJSON(spriteProp));
		}
		protected virtual string GetButtonHtml(ImagePropertiesBase imageProperties, AppearanceStyle style) {
			return HtmlConvertor.ToScript(RenderUtils.GetRenderResult(CreateFakeElement(imageProperties, style)));
		}
		protected virtual string GetButtonHtml(ImagePropertiesBase imageProperties, AppearanceStyle style, string id) {
			WebControl control = CreateFakeElement(imageProperties, style);
			control.ID = string.Format("{0}_{1}", ClientID, id);
			return HtmlConvertor.ToScript(RenderUtils.GetRenderResult(control));
		}
		protected virtual WebControl CreateFakeElement(ImagePropertiesBase properties, AppearanceStyle style) {
			WebControl control = new WebControl(HtmlTextWriterTag.Div);
			properties.AssignToControl(control, DesignMode, !Enabled);
			MergeDisableStyle(style, Enabled, style.DisabledStyle);
			style.AssignToControl(control);
			return control;
		}
		protected virtual void ResolveImageUrls(ImagePropertiesBase properties) { 
			if(Page != null) {
				properties.Url = Page.ResolveClientUrl(properties.Url);
				properties.UrlDisabled = Page.ResolveClientUrl(properties.UrlDisabled);
				properties.UrlHottracked = Page.ResolveClientUrl(properties.UrlHottracked);
				properties.UrlPressed = Page.ResolveClientUrl(properties.UrlPressed);
				properties.UrlSelected = Page.ResolveClientUrl(properties.UrlSelected);
			}
		}
		protected override bool HasContent() {
			return DesignMode ? true : (ShowImageAreaInternal || ShowNavigationBarInternal) && ItemsInternal.Count > 0;
		}
		protected override void CreateChildControls() {
			FolderBindingHelper.CreateItemsFromFolder(canGenerateImages: CanGenerateImages);
			base.CreateChildControls();
		}
		protected override void CreateControlHierarchy() {
			Controls.Add(CreateImageSliderControl());
			if(!DesignMode && HasTemplates)
				TemplateHelper.AddTemplatesToHierarchy();
		}
		protected virtual bool CanGenerateImages {
			get { return true; }
		}
		protected ImageSliderControlBase CreateImageSliderControl() {
			return DesignMode ? new ImageSliderControlDesignMode(this) as ImageSliderControlBase : new ImageSliderControl(this);
		}
		protected override void PrepareControlHierarchy() {
			base.PrepareControlHierarchy();
			if(IsRightToLeft())
				RenderUtils.AppendDefaultDXClassName(this, ImageSliderStylesBase.RightToLeftClassName);
		}
		protected override void RenderInternal(HtmlTextWriter writer) {
			base.RenderInternal(writer);
			if(!DesignMode && HasTemplates) {
				StringBuilder stb = new StringBuilder();
				GetClientDataItems(stb, ShortClientLocalVariableName);
				RenderUtils.WriteScriptHtml(writer, stb.ToString());
			}
		}
		protected internal virtual ImageLoadMode GetActualImageLoadMode() {
			ImageLoadMode loadMode = SettingsBehaviorInternal.ImageLoadMode;
			if(HasTemplates)
				loadMode = ImageLoadMode.AllImages;
			else if(loadMode == ImageLoadMode.Auto)
				loadMode = RenderUtils.Browser.Platform.IsTouchUI ? ImageLoadMode.DynamicLoad : ImageLoadMode.DynamicLoadAndCache;
			return loadMode;
		}
		protected internal virtual ElementVisibilityMode GetActualNavigationBarButtonVisibility() {
			ElementVisibilityMode visibility = SettingsNavigationBarInternal.ThumbnailsModeNavigationButtonVisibility;
			if(SettingsNavigationBarInternal.Mode == NavigationBarMode.Dots)
				return ElementVisibilityMode.None;
			return visibility;
		}
		protected internal virtual AnimationType GetActualAnimationType() {
			if(SettingsImageAreaInternal.AnimationType == AnimationType.Auto)
				return AnimationType.Slide;
			return SettingsImageAreaInternal.AnimationType;
		}
		protected internal virtual bool GetActualEnablePagingByClick() {
			switch(SettingsBehaviorInternal.EnablePagingByClick) {
				case AutoBoolean.True:
				return true;
				case AutoBoolean.False:
				return false;
				default:
				return RenderUtils.Browser.Platform.IsTouchUI ? false : true;
			}
		}
		string ISupportsFolderBinding.ImageSourceFolder {
			get { return ImageSourceFolder; }
		}
		string ISupportsFolderBinding.ImageCacheFolder {
			get { return GetImageCacheFolder(); }
		}
		protected virtual string GetImageCacheFolder() {
			return "";
		}
		string ISupportsFolderBinding.ImageCacheFolderPropertyDisplayName {
			get { return GetImageCacheFolderPropertyName(); }
		}
		protected virtual string GetImageCacheFolderPropertyName() {
			return "";
		}
		string ISupportsFolderBinding.Digest {
			get { return GetStringProperty("FolderBindingDigest", string.Empty); }
			set { SetStringProperty("FolderBindingDigest", string.Empty, value); }
		}
		void ISupportsFolderBinding.ResetDigest() {
			(this as ISupportsFolderBinding).Digest = "";
			LayoutChanged();
		}
		IEnumerable<AutogeneratedImageInfo> ISupportsFolderBinding.GetOutputImagesInfo() {
			return GetOutpuImagesInfoInternal();
		}
		protected virtual IEnumerable<AutogeneratedImageInfo> GetOutpuImagesInfoInternal() {
			return null;
		}
		CustomImageProcessingMethod ISupportsFolderBinding.GetCustomImageProcessingMethod(AutogeneratedImageInfo info) {
			return GetCustomImageProcessingMethodInternal(info);
		}
		protected virtual CustomImageProcessingMethod GetCustomImageProcessingMethodInternal(AutogeneratedImageInfo info) {
			return null;
		}
		void ISupportsFolderBinding.BeginItemsCreate() {
			BeginItemsCreateInternal();
		}
		protected virtual void BeginItemsCreateInternal() {
		}
		void ISupportsFolderBinding.CreateAndInitializeItem(AutogeneratedImageUrls images) {
			CreateAndInitializeItemInternal(images);
		}
		protected virtual void CreateAndInitializeItemInternal(AutogeneratedImageUrls images) {
		}
		void ISupportsFolderBinding.CompleteItemsCreate() {
			CompleteItemsCreateInternal();
		}
		protected virtual void CompleteItemsCreateInternal() {
		}
		public virtual void UpdateImageCacheFolder() {
			FolderBindingHelper.UpdateImageCacheFolder();
		}
	}
}
