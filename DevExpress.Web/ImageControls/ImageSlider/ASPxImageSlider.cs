#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Utils;
using DevExpress.Web.Design;
using DevExpress.Web.Internal;
namespace DevExpress.Web {
	[DXWebToolboxItem(true), DevExpress.Utils.Design.DXClientDocumentationProviderWeb("ASPxImageSlider"), DefaultProperty("Items"),
	Designer("DevExpress.Web.Design.ASPxImageSliderDesigner, " + AssemblyInfo.SRAssemblyWebDesignFull),
	DevExpress.Utils.ToolboxTabName(AssemblyInfo.DXTabNavigation), System.Drawing.ToolboxBitmap(typeof(ToolboxBitmapAccess), ToolboxBitmapAccess.BitmapPath + "ASPxImageSlider.bmp"),
	ToolboxData(@"<{0}:ASPxImageSlider runat=""server""><SettingsAutoGeneratedImages ImageCacheFolder=""~\Thumb\"" /></{0}:ASPxImageSlider>")]
	public class ASPxImageSlider : ASPxImageSliderBase, IControlDesigner {
		private static readonly object EventItemDataBound = new object();
		public ASPxImageSlider()
			: base() {
		}
		public ASPxImageSlider(ASPxWebControl ownerControl)
			: base(ownerControl) {
		}
		[Browsable(false), DefaultValue(null), AutoFormatEnable,
		PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		TemplateContainer(typeof(ImageSliderItemTemplateContainer))]
		public ITemplate ItemTemplate {
			get { return ItemTemplateInternal; }
			set { ItemTemplateInternal = value; }
		}
		[Browsable(false), DefaultValue(null), AutoFormatEnable,
		PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		TemplateContainer(typeof(ImageSliderItemTemplateContainer))]
		public virtual ITemplate ItemTextTemplate {
			get { return ItemTextTemplateInternal; }
			set { ItemTextTemplateInternal = value; }
		}
		[Browsable(false), DefaultValue(null), AutoFormatEnable,
		PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		TemplateContainer(typeof(ImageSliderItemTemplateContainer))]
		public virtual ITemplate ItemThumbnailTemplate {
			get { return ItemThumbnailTemplateInternal; }
			set { ItemThumbnailTemplateInternal = value; }
		}
		protected internal override ImageSliderItemTemplateContainerBase CreateItemTemplateContainer(ImageSliderItemBase item) {
			return new ImageSliderItemTemplateContainer(item as ImageSliderItem);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderSettingsImageArea"),
#endif
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		PersistenceMode(PersistenceMode.InnerProperty), AutoFormatEnable]
		public ImageSliderImageAreaSettings SettingsImageArea {
			get { return SettingsImageAreaInternal; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderSettingsNavigationBar"),
#endif
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		PersistenceMode(PersistenceMode.InnerProperty), AutoFormatEnable]
		public ImageSliderNavigationBarSettings SettingsNavigationBar {
			get { return SettingsNavigationBarInternal; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderSettingsBehavior"),
#endif
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		PersistenceMode(PersistenceMode.InnerProperty), AutoFormatEnable]
		public ImageSliderBehaviorSettings SettingsBehavior {
			get { return SettingsBehaviorInternal; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderSettingsSlideShow"),
#endif
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		PersistenceMode(PersistenceMode.InnerProperty), AutoFormatEnable]
		public ImageSliderSlideShowSettings SettingsSlideShow {
			get { return SettingsSlideShowInternal; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderSettingsAutoGeneratedImages"),
#endif
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		PersistenceMode(PersistenceMode.InnerProperty), AutoFormatEnable]
		public ImageSliderAutoGeneratedImagesSettings SettingsAutoGeneratedImages {
			get { return SettingsAutoGeneratedImagesInternal as ImageSliderAutoGeneratedImagesSettings; }
		}
		protected override AutoGeneratedImagesSettingsBase CreateAutoGeneratedImagesSettings() {
			return new ImageSliderAutoGeneratedImagesSettings(this);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderShowImageArea"),
#endif
		Category("Appearance"), DefaultValue(true), AutoFormatEnable]
		public bool ShowImageArea {
			get { return ShowImageAreaInternal; }
			set { ShowImageAreaInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderShowNavigationBar"),
#endif
		Category("Appearance"), DefaultValue(true), AutoFormatEnable]
		public bool ShowNavigationBar {
			get { return ShowNavigationBarInternal; }
			set { ShowNavigationBarInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderKeyboardSupport"),
#endif
		Category("Accessibility"), DefaultValue(true), AutoFormatDisable]
		public bool KeyboardSupport {
			get { return KeyboardSupportInternal; }
			set { KeyboardSupportInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderAccessibilityCompliant"),
#endif
		Category("Accessibility"), DefaultValue(false), AutoFormatDisable]
		public bool AccessibilityCompliant {
			get { return AccessibilityCompliantInternal; }
			set { AccessibilityCompliantInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderTarget"),
#endif
		Category("Misc"), DefaultValue(""), Localizable(false),
		TypeConverter(typeof(TargetConverter)), AutoFormatDisable]
		public string Target {
			get { return TargetInternal; }
			set { TargetInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderBinaryImageCacheFolder"),
#endif
		Category("Misc"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		Obsolete("Use the SettingsAutoGeneratedImages.ImageCacheFolder property instead.")]
		public string BinaryImageCacheFolder {
			get {
				if(DesignMode)
					return "";
				return SettingsAutoGeneratedImages.ImageCacheFolder; 
			}
			set { SettingsAutoGeneratedImages.ImageCacheFolder = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderSeoFriendly"),
#endif
		Browsable(true), EditorBrowsable(EditorBrowsableState.Always), AutoFormatDisable,
		Category("Behavior"), DefaultValue(false), Localizable(false)]
		public bool SeoFriendly {
			get { return SeoFriendlyInternal; }
			set { SeoFriendlyInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderRightToLeft"),
#endif
		Category("Layout"), DefaultValue(DefaultBoolean.Default), AutoFormatDisable]
		public DefaultBoolean RightToLeft {
			get { return RightToLeftInternal; }
			set { RightToLeftInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderClientSideEvents"),
#endif
		Category("Client-Side"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		MergableProperty(false), AutoFormatDisable]
		public ImageSliderClientSideEvents ClientSideEvents {
			get { return (ImageSliderClientSideEvents)base.ClientSideEventsInternal; }
		}
		protected override ClientSideEventsBase CreateClientSideEvents() {
			return new ImageSliderClientSideEvents();
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderStyles"),
#endif
		Category("Styles"), AutoFormatEnable, PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ImageSliderStyles Styles {
			get { return StylesInternal as ImageSliderStyles; }
		}
		protected override StylesBase CreateStyles() {
			return new ImageSliderStyles(this);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderImages"),
#endif
		Category("Images"), AutoFormatEnable, PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ImageSliderImages Images {
			get { return ImagesInternal as ImageSliderImages; }
		}
		protected override ImagesBase CreateImages() {
			return new ImageSliderImages(this);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderNavigateUrlFormatString"),
#endif
		Category("Data"), DefaultValue("{0}"), Localizable(true), AutoFormatEnable]
		public string NavigateUrlFormatString {
			get { return NavigateUrlFormatStringInternal; }
			set { NavigateUrlFormatStringInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderImageUrlFormatString"),
#endif
		Category("Data"), DefaultValue("{0}"), Localizable(true), AutoFormatEnable]
		public string ImageUrlFormatString {
			get { return ImageUrlFormatStringInternal; }
			set { ImageUrlFormatStringInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderThumbnailUrlFormatString"),
#endif
		Category("Data"), DefaultValue("{0}"), Localizable(true), AutoFormatEnable]
		public string ThumbnailUrlFormatString {
			get { return ThumbnailUrlFormatStringInternal; }
			set { ThumbnailUrlFormatStringInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderImageContentBytesField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ImageContentBytesField {
			get { return ImageContentBytesFieldInternal; }
			set { ImageContentBytesFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderThumbnailContentBytesField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ThumbnailContentBytesField {
			get { return ThumbnailContentBytesFieldInternal; }
			set { ThumbnailContentBytesFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderImageUrlField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ImageUrlField {
			get { return ImageUrlFieldInternal; }
			set { ImageUrlFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderThumbnailUrlField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string ThumbnailUrlField {
			get { return ThumbnailUrlFieldInternal; }
			set { ThumbnailUrlFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderNavigateUrlField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string NavigateUrlField {
			get { return NavigateUrlFieldInternal; }
			set { NavigateUrlFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderTextField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string TextField {
			get { return TextFieldInternal; }
			set { TextFieldInternal = value; }
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderNameField"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), AutoFormatDisable,
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter))]
		public string NameField {
			get { return NameFieldInternal; }
			set { NameFieldInternal = value; }
		}
		protected override ImageSliderItemCollectionBase CreateItemsInternal() {
			return new ImageSliderItemCollection(this);
		}
		protected internal override ImageSliderItemBase CreateItem() {
			return new ImageSliderItem();
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderItemDataBound"),
#endif
 Category("Data")]
		public event ImageSliderItemEventHandler ItemDataBound {
			add { Events.AddHandler(EventItemDataBound, value); }
			remove { Events.RemoveHandler(EventItemDataBound, value); }
		}
		protected internal override void RaiseItemDataBound(ImageSliderItemBase item) {
			ImageSliderItemEventHandler handler = Events[EventItemDataBound] as ImageSliderItemEventHandler;
			if(handler != null)
				handler(this, new ImageSliderItemEventArgs(item as ImageSliderItem));
		}
		protected override bool CanCreateClientDataItems() {
			return !((DataHelper as ImageSliderDataHelper).HasImageFolderPath && SeoFriendlyInternal);
		}
		[
#if !SL
	DevExpressWebLocalizedDescription("ASPxImageSliderItems"),
#endif
		PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		MergableProperty(false), AutoFormatDisable,
		Editor("DevExpress.Web.Design.CommonDesignerEditor, " + AssemblyInfo.SRAssemblyWebDesignFull, typeof(System.Drawing.Design.UITypeEditor))]
		public ImageSliderItemCollection Items {
			get { return ItemsInternal as ImageSliderItemCollection; }
		}
		protected override bool CanGenerateImages {
			get { return SettingsAutoGeneratedImages.EnableImageAutoGeneration; }
		}
		protected override string GetImageCacheFolder() {
			return SettingsAutoGeneratedImages.ImageCacheFolder;
		}
		protected override string GetImageCacheFolderPropertyName() {
			return "ImageSliderAutoGeneratedImagesSettings.ImageCacheFolder";
		}
		protected override IEnumerable<AutogeneratedImageInfo> GetOutpuImagesInfoInternal() {
			return new AutogeneratedImageInfo[] { GetImageAreaImageInfo(), GetNavBarImageInfo() };
		}
		protected override CustomImageProcessingMethod GetCustomImageProcessingMethodInternal(AutogeneratedImageInfo info) {
			return null;
		}
		protected override void BeginItemsCreateInternal() {
			Items.Clear();
		}
		protected override void CreateAndInitializeItemInternal(AutogeneratedImageUrls images) {
			ImageSliderItem item = new ImageSliderItem();
			item.ImageUrl = images[GetImageAreaImageInfo()];
			item.ThumbnailUrl = images[GetNavBarImageInfo()];
			Items.Add(item);
			RaiseItemDataBound(item);
		}
		protected override void CompleteItemsCreateInternal() {
			RaiseDataBound();
		}
		protected AutogeneratedImageInfo GetImageAreaImageInfo() {
			Size size = new Size((int)SettingsAutoGeneratedImages.ImageWidth.Value,
				(int)SettingsAutoGeneratedImages.ImageHeight.Value);
			return new AutogeneratedImageInfo(size, SettingsImageArea.ImageSizeMode);
		}
		protected AutogeneratedImageInfo GetNavBarImageInfo() {
			Size size = new Size((int)SettingsAutoGeneratedImages.ThumbnailWidth.Value,
					(int)SettingsAutoGeneratedImages.ThumbnailHeight.Value);
			return new AutogeneratedImageInfo(size, ImageSizeMode.FillAndCrop);
		}
		protected internal override void CreateBinaryImages(ImageSliderItemBase item) {
			bool autogenerationEnabled = SettingsAutoGeneratedImages.EnableImageAutoGeneration;
			if(item.ImageContentBytesInternal != null && string.IsNullOrEmpty(item.BinaryImageUrlInternal))
				item.BinaryImageUrlInternal =
					FolderBindingHelper.GetImageUrlFromContentBytes(item.ImageContentBytesInternal, autogenerationEnabled ? GetImageAreaImageInfo() : null);
			if(item.ThumbnailContentBytesInternal != null && string.IsNullOrEmpty(item.BinaryThumbnailUrlInternal))
				item.BinaryThumbnailUrlInternal =
					FolderBindingHelper.GetImageUrlFromContentBytes(item.ThumbnailContentBytesInternal, autogenerationEnabled ? GetNavBarImageInfo() : null);
		}
		string IControlDesigner.DesignerType { get { return "DevExpress.Web.Design.ImageSliderItemsOwner"; } }
	}
}
