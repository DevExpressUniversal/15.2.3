<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SpellCheckerBasePrepareSuggestions" xml:space="preserve">
    <value>Occurs when a misspelled word is found and a list of suggested replacements is created and sorted.</value>
  </data>
  <data name="SpellCheckerBaseOptionsSpelling" xml:space="preserve">
    <value>Provides access to the spelling options set for the SpellCheckerBase instance.</value>
  </data>
  <data name="SpellCheckerBaseNotInDictionaryWordFound" xml:space="preserve">
    <value>Occurs when a word being checked is not found in a dictionary.</value>
  </data>
  <data name="SpellCheckerBaseLoadOnDemand" xml:space="preserve">
    <value>Gets or sets whether the dictionary is not loaded until the spell checker language has matched the dictionary language.</value>
  </data>
  <data name="SpellCheckerBaseLevenshteinDistance" xml:space="preserve">
    <value>Gets or sets the parameter used to measure the proximity of words to be included in a suggestion collection.</value>
  </data>
  <data name="SpellCheckerBaseFinishCheckingMainPart" xml:space="preserve">
    <value>Occurs when the selected part of the text is processed.</value>
  </data>
  <data name="SpellCheckerBaseDictionaries" xml:space="preserve">
    <value>Provides access to the spell checker dictionaries collection.</value>
  </data>
  <data name="SpellCheckerBaseCulture" xml:space="preserve">
    <value>Gets or sets the culture-specific settings of the spell checker.</value>
  </data>
  <data name="SpellCheckerBaseBeforeLoadDictionaries" xml:space="preserve">
    <value>Occurs when the spell checker starts loading dictionaries.</value>
  </data>
  <data name="SpellCheckerBaseBeforeCheckWord" xml:space="preserve">
    <value>Occurs before a given word is exposed to a search algorithm.</value>
  </data>
  <data name="SpellCheckerBaseBeforeCheck" xml:space="preserve">
    <value>Occurs before the spell checker begins text processing.</value>
  </data>
  <data name="SpellCheckerBaseAfterLoadDictionaries" xml:space="preserve">
    <value>Occurs when the dictionaries have been loaded.</value>
  </data>
  <data name="SpellCheckerBaseAfterCheckWord" xml:space="preserve">
    <value>Occurs after a word is checked.</value>
  </data>
  <data name="SpellCheckerBaseAfterCheck" xml:space="preserve">
    <value>Occurs when text checking is finished.</value>
  </data>
  <data name="OptionsSpellingBaseIgnoreWordsWithNumbers" xml:space="preserve">
    <value>Gets or sets whether the spell checker ignores words that contain numbers.</value>
  </data>
  <data name="OptionsSpellingBaseIgnoreUrls" xml:space="preserve">
    <value>Gets or sets whether the spell checker ignores the URLs in text.</value>
  </data>
  <data name="OptionsSpellingBaseIgnoreUri" xml:space="preserve">
    <value>Gets or sets whether the spell checker ignores strings which can be qualified as Uniform Resource Identifiers (URI). </value>
  </data>
  <data name="OptionsSpellingBaseIgnoreUpperCaseWords" xml:space="preserve">
    <value>Gets or sets whether the spell checker ignores words in which all letters are uppercase.</value>
  </data>
  <data name="OptionsSpellingBaseIgnoreRepeatedWords" xml:space="preserve">
    <value>Gets or sets whether the spell checker ignores repeated words.</value>
  </data>
  <data name="OptionsSpellingBaseIgnoreMixedCaseWords" xml:space="preserve">
    <value>Gets or sets whether the spell checker ignores words containing different case letters in positions other than the first.</value>
  </data>
  <data name="OptionsSpellingBaseIgnoreEmails" xml:space="preserve">
    <value>Gets or sets whether e-mail addresses should be excluded from the check.</value>
  </data>
  <data name="OptionsSpellingBaseCheckSelectedTextFirst" xml:space="preserve">
    <value>Spell check the selected text first.</value>
  </data>
  <data name="OptionsSpellingBaseCheckFromCursorPos" xml:space="preserve">
    <value>Start spell check from the cursor position.</value>
  </data>
  <data name="HunspellDictionaryGrammarPath" xml:space="preserve">
    <value>Gets or sets the filename of the affix file (.aff) to be loaded.</value>
  </data>
  <data name="DictionaryHelperCulture" xml:space="preserve">
    <value>Gets the culture that is in effect for the DictionaryHelper.</value>
  </data>
  <data name="DictionaryCollectionIsReadOnly" xml:space="preserve">
    <value>Gets a value indicating whether the collection is read-only.</value>
  </data>
  <data name="DictionaryCollectionEmpty" xml:space="preserve">
    <value>Returns an empty collection of dictionaries.</value>
  </data>
  <data name="DictionaryCollectionCount" xml:space="preserve">
    <value>Gets the number of elements actually contained in a collection.</value>
  </data>
  <data name="DictionaryBaseDictionaryPath" xml:space="preserve">
    <value>Gets or sets the path to the dictionary file. </value>
  </data>
  <data name="DictionaryBaseDictionaryLoaded" xml:space="preserve">
    <value>Occurs when a dictionary is loaded.  </value>
  </data>
  <data name="DictionaryBaseCulture" xml:space="preserve">
    <value>Gets or sets the culture specific settings of the dictionary.</value>
  </data>
  <data name="DictionaryBaseAlphabetChars" xml:space="preserve">
    <value>Gets the alphabetical list of characters for the current dictionary.</value>
  </data>
  <data name="SpellCheckerBaseWordAdded" xml:space="preserve">
    <value>Occurs after a new word is added to the custom dictionary.</value>
  </data>
  <data name="SpellCheckerBaseUseSharedDictionaries" xml:space="preserve">
    <value>Specifies whether the spell checker should use the shared dictionaries collection in a word search. For WinForms Spell Checker only.</value>
  </data>
  <data name="SpellCheckerBaseUnhandledException" xml:space="preserve">
    <value>Occurs when an unhandled system exception fires.</value>
  </data>
  <data name="SpellCheckerBaseSuggestionSearchTimeOut" xml:space="preserve">
    <value>Gets or sets the timeout for calculating suggestions.</value>
  </data>
  <data name="SpellCheckerBaseSpellingFormType" xml:space="preserve">
    <value>Gets or sets the type of the form to be shown when a probable misspelled word is found.</value>
  </data>
  <data name="SpellCheckerBaseRepeatedWordFound" xml:space="preserve">
    <value>Occurs when a word identical to the previous one is found.</value>
  </data>
  <data name="SpellCheckerCommandCaption" xml:space="preserve">
    <value>Gets a localizable name of the command used in menu.</value>
  </data>
  <data name="SpellCheckerCommandEnabled" xml:space="preserve">
    <value>Gets whether a command is currently enabled.</value>
  </data>
  <data name="SpellCheckerCommandFinish" xml:space="preserve">
    <value>Gets or sets the position at which the text segment finishes.</value>
  </data>
  <data name="SpellCheckerCommandOperation" xml:space="preserve">
    <value>Gets the operation performed by the command.</value>
  </data>
  <data name="SpellCheckerCommandStart" xml:space="preserve">
    <value>Gets or sets the position at which the text segment starts.</value>
  </data>
  <data name="SpellCheckerCommandSuggestion" xml:space="preserve">
    <value>Gets or sets the replacement for the current text segment.</value>
  </data>
  <data name="SpellCheckerCommandWord" xml:space="preserve">
    <value>Gets or sets a word used for several commands, such as Ignore or AddToDictionary.</value>
  </data>
  <data name="SpellCheckerDictionaryBaseAlphabetPath" xml:space="preserve">
    <value>Gets or sets the path to the alphabet file used for creating the SpellCheckerISpellDictionary. </value>
  </data>
  <data name="SpellCheckerDictionaryBaseCaseSensitive" xml:space="preserve">
    <value>Gets or sets the flag that affects the case sensitivity of the search algorithm and the rules of comparison. </value>
  </data>
  <data name="SpellCheckerDictionaryBaseEncoding" xml:space="preserve">
    <value>Gets or sets the dictionary text encoding.</value>
  </data>
  <data name="SpellCheckerISpellDictionaryGrammarPath" xml:space="preserve">
    <value>Gets or sets the filename of the affix file to be loaded.</value>
  </data>
  <data name="SpellingErrorInfoError" xml:space="preserve">
    <value>Indicates the kind of spelling error.</value>
  </data>
  <data name="SpellingErrorInfoWord" xml:space="preserve">
    <value>Indicates the misspelled word.</value>
  </data>
  <data name="SpellingErrorInfoWordEndPosition" xml:space="preserve">
    <value>Indicates the end position of the misspelled word in the document.</value>
  </data>
  <data name="SpellingErrorInfoWordStartPosition" xml:space="preserve">
    <value>Indicates the starting position of a misspelled word in the document.</value>
  </data>
  <data name="SuggestionBaseDistance" xml:space="preserve">
    <value>Gets a Levenshtein distance between the misspelled and the suggested words.</value>
  </data>
  <data name="SuggestionBaseSuggestion" xml:space="preserve">
    <value>Gets or sets the word that is suggested by the spell checker.</value>
  </data>
  <data name="SuggestionCollectionCount" xml:space="preserve">
    <value>Gets the number of elements actually contained in the current collection.</value>
  </data>
  <data name="WrongWordRecordSuggestions" xml:space="preserve">
    <value>A list of suggested words to replace the misspelled word.</value>
  </data>
  <data name="WrongWordRecordWord" xml:space="preserve">
    <value>An erroneous word found during spell check. </value>
  </data>
</root>