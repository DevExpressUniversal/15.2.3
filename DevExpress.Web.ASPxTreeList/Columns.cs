#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{                                                                   }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Web.UI;
using System.Web.UI.WebControls;
using DevExpress.Data;
using DevExpress.Utils;
using DevExpress.Web;
using DevExpress.Web.Design;
using DevExpress.Web.Internal;
namespace DevExpress.Web.ASPxTreeList {
	public abstract class TreeListColumn : WebColumnBase {
		TreeListHeaderStyle headerStyle;
		TreeListCellStyle cellStyle, groupFooterCellStyle, footerCellStyle;
		ITemplate headerCaptionTemplate, groupFooterCellTemplate, footerCellTemplate;
		bool autoGenerated;
		public TreeListColumn() 
			: base() {
			this.headerStyle = new TreeListHeaderStyle();
			this.cellStyle = new TreeListCellStyle();
			this.groupFooterCellStyle = new TreeListCellStyle();
			this.footerCellStyle = new TreeListCellStyle();			
			this.autoGenerated = false;
		}		
		[Browsable(false)]
		public ASPxTreeList TreeList {
			get { return OwnerControl as ASPxTreeList; }
		}
		protected internal bool AutoGenerated {
			get { return autoGenerated; }
			set { autoGenerated = value; }
		}
		protected internal virtual string GetCaption() {
			return String.Empty;
		}
#if !SL
	[DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnShowInCustomizationForm")]
#endif
		public new bool ShowInCustomizationForm {
			get { return base.ShowInCustomizationForm; }
			set { base.ShowInCustomizationForm = value; }
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnMinWidth"),
#endif
		Category("Appearance"), DefaultValue(0), AutoFormatDisable, NotifyParentProperty(true)]
		public int MinWidth {
			get { return GetIntProperty("MinWidth", 0); }
			set { SetIntProperty("MinWidth", 0, Math.Max(0, value)); }
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnHeaderStyle"),
#endif
		Category("Styles"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListHeaderStyle HeaderStyle { get { return headerStyle; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnCellStyle"),
#endif
		Category("Styles"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCellStyle CellStyle { get { return cellStyle; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnGroupFooterCellStyle"),
#endif
		Category("Styles"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCellStyle GroupFooterCellStyle { get { return groupFooterCellStyle; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnFooterCellStyle"),
#endif
		Category("Styles"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCellStyle FooterCellStyle { get { return footerCellStyle; } }
		[Browsable(false), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable,
		TemplateContainer(typeof(TreeListHeaderTemplateContainer))]
		public ITemplate HeaderCaptionTemplate { 
			get { return headerCaptionTemplate; }
			set {
				if(value != HeaderCaptionTemplate) {
					headerCaptionTemplate = value;
					TemplatesChanged();
				}
			}
		}
		[Browsable(false), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable,
		TemplateContainer(typeof(TreeListFooterCellTemplateContainer))]
		public ITemplate GroupFooterCellTemplate { 
			get { return groupFooterCellTemplate; }
			set {
				if(value != GroupFooterCellTemplate) {
					groupFooterCellTemplate = value;
					TemplatesChanged();
				}
			}
		}
		[Browsable(false), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable,
		TemplateContainer(typeof(TreeListFooterCellTemplateContainer))]
		public ITemplate FooterCellTemplate { 
			get { return footerCellTemplate; }
			set {
				if(value != FooterCellTemplate) {
					footerCellTemplate = value;
					TemplatesChanged();
				}
			}
		}
		protected override IStateManager[] GetStateManagedObjects() {
			return ViewStateUtils.GetMergedStateManagedObjects(base.GetStateManagedObjects(),
				new IStateManager[] { HeaderStyle, CellStyle, GroupFooterCellStyle, FooterCellStyle });
		}
		public override void Assign(CollectionItem source) {
			base.Assign(source);
			TreeListColumn column = source as TreeListColumn;
			if(column == null)
				return;
			AutoGenerated = column.AutoGenerated;
			MinWidth = column.MinWidth;
			HeaderStyle.Assign(column.HeaderStyle);
			CellStyle.Assign(column.CellStyle);
			GroupFooterCellStyle.Assign(column.GroupFooterCellStyle);
			FooterCellStyle.Assign(column.FooterCellStyle);			
			HeaderCaptionTemplate = column.HeaderCaptionTemplate;
			GroupFooterCellTemplate = column.GroupFooterCellTemplate;
			FooterCellTemplate = column.FooterCellTemplate;
		}
		public override string ToString() {
			string caption = GetCaption();
			if(!String.IsNullOrEmpty(caption))
				return caption;
			return base.ToString();
		}
		protected override string GetDesignTimeCaption() {
			return ToString();
		}
		protected override int GetDesignTimeVisibleIndex() {
			return VisibleIndex;
		}
		protected override void SetDesignTimeVisibleIndex(int index) {
			VisibleIndex = index;
		}
		protected override bool GetDesignTimeVisible() {
			return Visible; 
		}
		protected override void SetDesignTimeVisible(bool visible) {
			Visible = visible;
		}
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return new string[] { };
		}
	}
	public class TreeListDataColumn : TreeListColumn, IDataSourceViewSchemaAccessor {
		ITemplate dataCellTemplate, editCellTemplate;
		EditPropertiesBase propertiesEdit;
		TreeListColumnEditFormSettings editFormSettings;
		TreeListCellStyle editCellStyle, editFormCaptionStyle;
		public TreeListDataColumn() 
			: this(String.Empty, String.Empty) {
		}
		public TreeListDataColumn(string fieldName) 
			: this(fieldName, String.Empty) {			
		}
		public TreeListDataColumn(string fieldName, string caption) {
			this.editFormSettings = new TreeListColumnEditFormSettings(this);
			this.editCellStyle = new TreeListCellStyle();
			this.editFormCaptionStyle = new TreeListCellStyle();
			FieldName = fieldName;
			Caption = caption;			
		}
		internal static TreeListDataColumn CreateInstance(Type dataType) {
			if(dataType == typeof(DateTime))
				return new TreeListDateTimeColumn();
			if(dataType == typeof(bool))
				return new TreeListCheckColumn();				
			return new TreeListTextColumn();			
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnReadOnly"),
#endif
		Category("Behavior"), NotifyParentProperty(true), DefaultValue(false), AutoFormatDisable]
		public bool ReadOnly {
			get { return GetBoolProperty("ReadOnly", false); }
			set { SetBoolProperty("ReadOnly", false, value); }
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnExportWidth"),
#endif
		Category("Appearance"), DefaultValue(0), AutoFormatDisable, NotifyParentProperty(true)]
		public int ExportWidth {
			get { return GetIntProperty("ExportWidth", 0); }
			set {
				CommonUtils.CheckNegativeValue(value, "ExportWidth");
				SetIntProperty("ExportWidth", 0, value);
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnEditFormSettings"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListColumnEditFormSettings EditFormSettings { get { return editFormSettings; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnFieldName"),
#endif
		Category("Data"), DefaultValue(""), Localizable(false), NotifyParentProperty(true),
		TypeConverter(typeof(System.Web.UI.Design.DataSourceViewSchemaConverter)), AutoFormatDisable]
		public virtual string FieldName {
			get {
				return GetStringProperty("FieldName", string.Empty);
			}
			set {
				SetStringProperty("FieldName", string.Empty, value);
				OnColumnChanged();
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnSortIndex"),
#endif
		Category("Data"), DefaultValue(-1), NotifyParentProperty(true), AutoFormatDisable]
		public virtual int SortIndex {
			get { return GetIntProperty("SortIndex", -1); }
			set {
				if(value != SortIndex) {
					if(TreeList != null)
						TreeList.UpdateDataColumnSortIndex(this, value);
					else
						SetSortIndex(value);
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnSortOrder"),
#endif
		Category("Data"), DefaultValue(ColumnSortOrder.None), NotifyParentProperty(true), AutoFormatDisable]
		public virtual ColumnSortOrder SortOrder {
			get { return (ColumnSortOrder)GetEnumProperty("SortOrder", ColumnSortOrder.None); }
			set {
				if(value != SortOrder) {
					if(TreeList != null)
						TreeList.UpdateDataColumnSortOrder(this, value);
					else
						SetSortOrder(value);
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnAllowSort"),
#endif
		Category("Data"), DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true), AutoFormatDisable]
		public virtual DefaultBoolean AllowSort {
			get { return (DefaultBoolean)GetEnumProperty("AllowSort", DefaultBoolean.Default); }
			set {
				if(value != AllowSort) {
					SetEnumProperty("AllowSort", DefaultBoolean.Default, value);
					OnColumnChanged();
				}
			}
		}
		[Category("Behavior"), DefaultValue(DefaultBoolean.Default), NotifyParentProperty(true), AutoFormatDisable]
		public virtual DefaultBoolean AllowEllipsisInText {
			get { return (DefaultBoolean)GetEnumProperty("AllowEllipsisInText", DefaultBoolean.Default); }
			set {
				if(value == AllowEllipsisInText)
					return;
				SetEnumProperty("AllowEllipsisInText", DefaultBoolean.Default, value);
				OnColumnChanged();
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnEditCellStyle"),
#endif
		Category("Styles"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCellStyle EditCellStyle { get { return editCellStyle; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnEditFormCaptionStyle"),
#endif
		Category("Styles"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCellStyle EditFormCaptionStyle { get { return editFormCaptionStyle; } }
		[Browsable(false), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable,
		TemplateContainer(typeof(TreeListDataCellTemplateContainer))]
		public ITemplate DataCellTemplate {
			get { return dataCellTemplate; }
			set {
				if(value != DataCellTemplate) {
					dataCellTemplate = value;
					TemplatesChanged();
				}
			}
		}
		[Browsable(false), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable,
		TemplateContainer(typeof(TreeListEditCellTemplateContainer), BindingDirection.TwoWay)]
		public ITemplate EditCellTemplate {
			get { return editCellTemplate; }
			set {
				if(value != EditCellTemplate) {
					editCellTemplate = value;
					TemplatesChanged();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDataColumnDisplayFormat"),
#endif
		NotifyParentProperty(true), DefaultValue(""), AutoFormatDisable, Localizable(false)]
		public virtual string DisplayFormat {
			get { return PropertiesEdit.DisplayFormatString; }
			set {
				if(value != DisplayFormat) {
					PropertiesEdit.DisplayFormatString = value;
					OnColumnChanged();
				}
			}
		}
		[Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public EditPropertiesBase PropertiesEdit { 
			get {
				if(propertiesEdit == null)
					propertiesEdit = CreateEditProperties();
				return propertiesEdit; 
			} 
		}
		public void Unsort() {
			SetSortIndex(-1);
			SetSortOrder(ColumnSortOrder.None);
			OnColumnChanged();
		}
		internal bool IsSorted() {
			return SortIndex > -1 && SortOrder != ColumnSortOrder.None;
		}
		protected internal void SetSortIndex(int value) {
			SetIntProperty("SortIndex", -1, value);
		}
		protected internal void SetSortOrder(ColumnSortOrder value) {
			SetEnumProperty("SortOrder", ColumnSortOrder.None, value);
		}
		protected internal virtual string GetDisplayFormatString() {
			return DisplayFormat;
		}
		protected virtual EditPropertiesBase CreateEditProperties() {
			return new TextBoxProperties(this);
		}
		protected void ResetEditProperties(){
			this.propertiesEdit = null;
		}
		protected override IStateManager[] GetStateManagedObjects() {
			return ViewStateUtils.GetMergedStateManagedObjects(base.GetStateManagedObjects(),
				new IStateManager[] { PropertiesEdit, EditCellStyle, EditFormCaptionStyle });
		}
		public override void Assign(CollectionItem source) {			
			base.Assign(source);
			TreeListDataColumn column = source as TreeListDataColumn;
			if(column == null) return;
			FieldName = column.FieldName;
			SetSortIndex(column.SortIndex);
			SetSortOrder(column.SortOrder);
			AllowEllipsisInText = column.AllowEllipsisInText;
			AllowSort = column.AllowSort;
			DataCellTemplate = column.DataCellTemplate;			
			ReadOnly = column.ReadOnly;
			ExportWidth = column.ExportWidth;
			PropertiesEdit.Assign(column.PropertiesEdit);			
			EditCellStyle.Assign(column.EditCellStyle);
			EditFormCaptionStyle.Assign(column.EditFormCaptionStyle);
			EditFormSettings.Assign(column.EditFormSettings);
			EditCellTemplate = column.EditCellTemplate;
		}
		protected internal override bool GetAllowEllipsisInText() {
			if(AllowEllipsisInText == DefaultBoolean.Default && TreeList != null)
				return TreeList.SettingsBehavior.AllowEllipsisInText;
			return AllowEllipsisInText == DefaultBoolean.True;
		}
		protected internal override string GetCaption() {
			if(!string.IsNullOrEmpty(Caption))
				return Caption;
			if (!string.IsNullOrEmpty(FieldName))
				return CommonUtils.SplitPascalCaseString(FieldName);
			if(!string.IsNullOrEmpty(Name))
				return Name;
			return base.GetCaption();
		}
		object IDataSourceViewSchemaAccessor.DataSourceViewSchema {
			get {
				IDataSourceViewSchemaAccessor accessor = TreeList as IDataSourceViewSchemaAccessor;
				if(accessor != null)
					return accessor.DataSourceViewSchema;
				return null;
			}
			set { }
		}
		protected override PropertiesBase GetDesignTimeItemEditProperties() {
			return PropertiesEdit;
		}
	}
	[Editor("DevExpress.Web.Design.CommonDesignerEditor, " + AssemblyInfo.SRAssemblyWebDesignFull, typeof(System.Drawing.Design.UITypeEditor))]
	public class TreeListColumnCollection : WebColumnCollectionBase {
		public TreeListColumnCollection(IWebControlObject owner) 
			: base(owner) {
		}
#if !SL
	[DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnCollectionItem")]
#endif
		public TreeListColumn this[int index] {
			get { return InnerList[index] as TreeListColumn; }
		}
#if !SL
	[DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnCollectionItem")]
#endif
		public TreeListColumn this[string key] { get { return FindColumn(this, key); } }
		[Browsable(false)]
		public ASPxTreeList TreeList { get { return Owner as ASPxTreeList; } }
		protected IList InnerList { get { return this as IList; } }
		public void Add(TreeListColumn column) { 
			if(column == null) throw new ArgumentNullException("column");
			InnerList.Add(column);
		}
		public void Remove(TreeListColumn column) {
			InnerList.Remove(column);
		}
		public int IndexOf(TreeListColumn column) {
			return InnerList.IndexOf(column);
		}
		public void Insert(int index, TreeListColumn column) {
			InnerList.Insert(index, column);
		}
		protected override void OnInsertComplete(int index, object value) {
			base.OnInsertComplete(index, value);
			TreeListColumn column = value as TreeListColumn;
			if(TreeList == null || column == null)
				return;
			if(!column.AutoGenerated)
				TreeList.AutoGenerateColumns = false;
			Changed();			
		}
		protected override void OnChanged() {
			base.OnChanged();
			if(TreeList != null)
				(TreeList as IWebColumnsOwner).OnColumnCollectionChanged();
		}
		protected override Type GetKnownType() { return typeof(TreeListColumn); }
		public override string ToString() { return string.Empty; }
		internal static TreeListColumn FindColumn(IEnumerable columns, string key) {
			foreach(TreeListColumn column in columns)
				if(column.Name == key) return column;
			foreach(TreeListColumn column in columns) {
				TreeListDataColumn dataColumn = column as TreeListDataColumn;
				if(dataColumn != null && dataColumn.FieldName == key)
					return dataColumn;
			}
			foreach(TreeListColumn column in columns)
				if(column.Caption == key) return column;
			return null;
		}
	}
	public class ReadOnlyTreeListColumnCollection<T> : System.Collections.ObjectModel.ReadOnlyCollection<T> where T : TreeListColumn {
		public ReadOnlyTreeListColumnCollection(IList<T> list)
			: base(list) {
		}
		public T this[string key] { get { return TreeListColumnCollection.FindColumn(this, key) as T; } }
	}
	public abstract class TreeListEditDataColumn : TreeListDataColumn {
		protected TreeListEditDataColumn()
			: base() {
		}
		protected TreeListEditDataColumn(string fieldName)
			: base(fieldName) {
		}
		protected TreeListEditDataColumn(string fieldName, string caption)
			: base(fieldName, caption) {
		}
		[Browsable(false), EditorBrowsable(EditorBrowsableState.Never), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override string DisplayFormat { get { return base.DisplayFormat; } set { base.DisplayFormat = value; } }
		protected internal override string GetDisplayFormatString() {
			return PropertiesEdit.DisplayFormatString;
		}
	}
	#region Editor columns
	public class TreeListTextColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListTextColumnPropertiesTextEdit"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public TextBoxProperties PropertiesTextEdit { get { return PropertiesEdit as TextBoxProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesTextEdit" });
		}
	}
	public class TreeListDateTimeColumn : TreeListEditDataColumn, IDateEditIDResolver {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDateTimeColumnPropertiesDateEdit"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DateEditProperties PropertiesDateEdit { get { return PropertiesEdit as DateEditProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesDateEdit" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new DateEditProperties(this);
		}
		string IDateEditIDResolver.GetDateEditIdByDataItemName(string dataItemName) {
			TreeListDateTimeColumn targetColumn = TreeList.Columns[dataItemName] as TreeListDateTimeColumn;
			return targetColumn != null && targetColumn != this ? TreeList.RenderHelper.GetEditorId(targetColumn) : "";
		}
		string[] IDateEditIDResolver.GetPossibleDataItemNames() {
			List<string> result = new List<string>();
			foreach (TreeListColumn column in TreeList.Columns) {
				if (column is TreeListDateTimeColumn && column != this) {
					string columnToString = column.ToString();
					if (!string.IsNullOrEmpty(columnToString))
						result.Add(columnToString);
				}
			}
			return result.ToArray();
		}
	}
	public class TreeListCheckColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCheckColumnPropertiesCheckEdit"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public CheckBoxProperties PropertiesCheckEdit { get { return PropertiesEdit as CheckBoxProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesCheckEdit" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new CheckBoxProperties(this);
		}
	}
	public class TreeListMemoColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListMemoColumnPropertiesMemo"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public MemoProperties PropertiesMemo { get { return PropertiesEdit as MemoProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesMemo" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new MemoProperties(this);
		}
	}
	public class TreeListSpinEditColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListSpinEditColumnPropertiesSpinEdit"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public SpinEditProperties PropertiesSpinEdit { get { return PropertiesEdit as SpinEditProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesSpinEdit" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new SpinEditProperties(this);
		}
	}
	public class TreeListComboBoxColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListComboBoxColumnPropertiesComboBox"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ComboBoxProperties PropertiesComboBox { get { return PropertiesEdit as ComboBoxProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesComboBox" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new ComboBoxProperties(this);
		}
	}
	public class TreeListTokenBoxColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListTokenBoxColumnPropertiesTokenBox"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public TokenBoxProperties PropertiesTokenBox { get { return PropertiesEdit as TokenBoxProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesTokenBox" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new TokenBoxProperties(this);
		}
	}
	public class TreeListDropDownEditColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListDropDownEditColumnPropertiesDropDownEdit"),
#endif
Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public DropDownEditProperties PropertiesDropDownEdit { get { return PropertiesEdit as DropDownEditProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesDropDownEdit" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new DropDownEditProperties(this);
		}
	}
	public class TreeListButtonEditColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListButtonEditColumnPropertiesButtonEdit"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ButtonEditProperties PropertiesButtonEdit { get { return PropertiesEdit as ButtonEditProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesButtonEdit" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new ButtonEditProperties(this);
		}
	}
	public class TreeListHyperLinkColumn : TreeListEditDataColumn {
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListHyperLinkColumnPropertiesHyperLink"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public HyperLinkProperties PropertiesHyperLink { get { return PropertiesEdit as HyperLinkProperties; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesHyperLink" });
		}
		protected override EditPropertiesBase CreateEditProperties() {
			return new HyperLinkProperties(this);
		}
	}
	public class TreeListImageColumn : TreeListEditDataColumn {
		protected override EditPropertiesBase CreateEditProperties() { return new ImageEditProperties(); }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListImageColumnPropertiesImage"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ImageEditProperties PropertiesImage { get { return (ImageEditProperties)PropertiesEdit; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesImage" });
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListImageColumnAllowSort"),
#endif
DefaultValue(DefaultBoolean.False), ReadOnly(true)]
		public override DefaultBoolean AllowSort {
			get { return DefaultBoolean.False; }
			set { }
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListImageColumnSortOrder"),
#endif
DefaultValue(ColumnSortOrder.None), ReadOnly(true)]
		public override ColumnSortOrder SortOrder {
			get { return ColumnSortOrder.None; }
			set { }
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListImageColumnSortIndex"),
#endif
DefaultValue(-1), ReadOnly(true)]
		public override int SortIndex {
			get { return -1; }
			set { }
		}
	}
	public class TreeListBinaryImageColumn : TreeListEditDataColumn {
		protected override EditPropertiesBase CreateEditProperties() { return new BinaryImageEditProperties(); }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListBinaryImageColumnPropertiesBinaryImage"),
#endif
		Category("Behavior"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public BinaryImageEditProperties PropertiesBinaryImage { get { return (BinaryImageEditProperties)PropertiesEdit; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesBinaryImage" });
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListBinaryImageColumnAllowSort"),
#endif
DefaultValue(DefaultBoolean.False), ReadOnly(true)]
		public override DefaultBoolean AllowSort {
			get { return DefaultBoolean.False; }
			set { }
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListBinaryImageColumnSortOrder"),
#endif
DefaultValue(ColumnSortOrder.None), ReadOnly(true)]
		public override ColumnSortOrder SortOrder {
			get { return ColumnSortOrder.None; }
			set { }
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListBinaryImageColumnSortIndex"),
#endif
DefaultValue(-1), ReadOnly(true)]
		public override int SortIndex {
			get { return -1; }
			set { }
		}
	}
	public class TreeListProgressBarColumn : TreeListEditDataColumn {
		protected override EditPropertiesBase CreateEditProperties() { return new ProgressBarProperties(); }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListProgressBarColumnPropertiesProgressBar"),
#endif
		Category("Behavior"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public ProgressBarProperties PropertiesProgressBar { get { return (ProgressBarProperties)PropertiesEdit; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesProgressBar" });
		}
	}
	public class TreeListColorEditColumn : TreeListEditDataColumn {
		protected override EditPropertiesBase CreateEditProperties() { return new ColorEditProperties(); }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColorEditColumnPropertiesColorEdit"),
#endif
		Category("Behavior"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public ColorEditProperties PropertiesColorEdit { get { return (ColorEditProperties)PropertiesEdit; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesColorEdit" });
		}
	}
	public class TreeListTimeEditColumn : TreeListEditDataColumn {
		protected override EditPropertiesBase CreateEditProperties() { return new TimeEditProperties(); }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListTimeEditColumnPropertiesTimeEdit"),
#endif
		Category("Behavior"), PersistenceMode(PersistenceMode.InnerProperty),
		DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public TimeEditProperties PropertiesTimeEdit { get { return (TimeEditProperties)PropertiesEdit; } }
		protected override string[] GetDesignTimeHiddenPropertyNames() {
			return DataUtils.MergeStringArrays(base.GetDesignTimeHiddenPropertyNames(), new string[] { "PropertiesTimeEdit" });
		}
	}
	#endregion
	public class TreeListColumnEditFormSettings : PropertiesBase {		
		public TreeListColumnEditFormSettings(TreeListDataColumn column) 
			: base(column) {
		}
		protected TreeListDataColumn Column { get { return Owner as TreeListDataColumn; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnEditFormSettingsColumnSpan"),
#endif
		NotifyParentProperty(true), DefaultValue(1)]
		public int ColumnSpan {
			get { return GetIntProperty("ColumnSpan", 1); }
			set {
				if(value < 1) value = 1;
				if(value != ColumnSpan) {
					SetIntProperty("ColumnSpan", 1, value);
					Changed();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnEditFormSettingsRowSpan"),
#endif
		NotifyParentProperty(true), DefaultValue(1)]
		public int RowSpan {
			get { return GetIntProperty("RowSpan", 1); }
			set {
				if(value < 1) value = 1;
				if(value != RowSpan) {
					SetIntProperty("RowSpan", 1, value);
					Changed();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnEditFormSettingsVisible"),
#endif
		NotifyParentProperty(true), DefaultValue(DefaultBoolean.Default)]
		public DefaultBoolean Visible {
			get { return (DefaultBoolean)GetEnumProperty("Visible", DefaultBoolean.Default); }
			set {
				if(value != Visible) {
					SetEnumProperty("Visible", DefaultBoolean.Default, value);
					Changed();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnEditFormSettingsVisibleIndex"),
#endif
		NotifyParentProperty(true), DefaultValue(-1)]
		public int VisibleIndex {
			get { return GetIntProperty("VisibleIndex", -1); }
			set {
				if(value != VisibleIndex) {
					SetIntProperty("VisibleIndex", -1, value);
					Changed();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListColumnEditFormSettingsCaptionLocation"),
#endif
		NotifyParentProperty(true), DefaultValue(TreeListColumnEditCaptionLocation.Near)]
		public TreeListColumnEditCaptionLocation CaptionLocation {
			get { return (TreeListColumnEditCaptionLocation)GetEnumProperty("CaptionLocation", TreeListColumnEditCaptionLocation.Near); }
			set {
				if(value != CaptionLocation) {
					SetEnumProperty("CaptionLocation", TreeListColumnEditCaptionLocation.Near, value);
					Changed();
				}
			}
		}
		public override void Assign(PropertiesBase source) {
			base.Assign(source);
			TreeListColumnEditFormSettings settings = source as TreeListColumnEditFormSettings;
			if(settings == null) return;
			ColumnSpan = settings.ColumnSpan;
			RowSpan = settings.RowSpan;
			Visible = settings.Visible;
			VisibleIndex = settings.VisibleIndex;
			CaptionLocation = settings.CaptionLocation;
		}
	}
	public class TreeListCommandColumn : TreeListColumn {
		TreeListCommandColumnButton editButton, newButton, deleteButton, updateButton, cancelButton;
		TreeListCommandColumnCustomButtonCollection customButtons;
		public TreeListCommandColumn() 
			: this(String.Empty) {
		}
		public TreeListCommandColumn(string caption) 
			: base() {
			this.editButton = new TreeListCommandColumnButton(this, TreeListCommandColumnButtonType.Edit);
			this.newButton = new TreeListCommandColumnButton(this, TreeListCommandColumnButtonType.New);
			this.deleteButton = new TreeListCommandColumnButton(this, TreeListCommandColumnButtonType.Delete);
			this.updateButton = new TreeListCommandColumnUpdateButton(this);
			this.cancelButton = new TreeListCommandColumnCancelButton(this);
			Caption = caption;
			this.customButtons = new TreeListCommandColumnCustomButtonCollection(this);
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnEditButton"),
#endif
		Category("Buttons"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCommandColumnButton EditButton { get { return editButton; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnNewButton"),
#endif
		Category("Buttons"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCommandColumnButton NewButton { get { return newButton; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnDeleteButton"),
#endif
		Category("Buttons"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCommandColumnButton DeleteButton { get { return deleteButton; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnUpdateButton"),
#endif
		Category("Buttons"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCommandColumnButton UpdateButton { get { return updateButton; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCancelButton"),
#endif
		Category("Buttons"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), AutoFormatDisable]
		public TreeListCommandColumnButton CancelButton { get { return cancelButton; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnButtonType"),
#endif
		Category("Buttons"), NotifyParentProperty(true), DefaultValue(ButtonType.Link), AutoFormatDisable]
		public ButtonType ButtonType {
			get { return (ButtonType)GetEnumProperty("ButtonType", ButtonType.Link); }
			set {
				if(value != ButtonType) {
					SetEnumProperty("ButtonType", ButtonType.Link, value);
					OnColumnChanged();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnShowNewButtonInHeader"),
#endif
		Category("Buttons"), NotifyParentProperty(true), DefaultValue(false), AutoFormatDisable]
		public bool ShowNewButtonInHeader {
			get { return GetBoolProperty("ShowNewButtonInHeader", false); }
			set {
				if(value != ShowNewButtonInHeader) {
					SetBoolProperty("ShowNewButtonInHeader", false, value);
					OnColumnChanged();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCustomButtons"),
#endif
		Category("Buttons"), NotifyParentProperty(true), MergableProperty(false),
		PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content),
		AutoFormatDisable, TypeConverter(typeof(DevExpress.Utils.Design.UniversalCollectionTypeConverter))]
		public TreeListCommandColumnCustomButtonCollection CustomButtons { get { return customButtons; } }
		public override void Assign(CollectionItem source) {
			base.Assign(source);
			TreeListCommandColumn column = source as TreeListCommandColumn;
			if(column == null) return;
			EditButton.Assign(column.EditButton);
			NewButton.Assign(column.NewButton);
			DeleteButton.Assign(column.DeleteButton);
			UpdateButton.Assign(column.UpdateButton);
			CancelButton.Assign(column.CancelButton);
			ShowNewButtonInHeader = column.ShowNewButtonInHeader;
			ButtonType = column.ButtonType;
			CustomButtons.Assign(column.CustomButtons);
		}
		protected override IStateManager[] GetStateManagedObjects() {
			return ViewStateUtils.GetMergedStateManagedObjects(base.GetStateManagedObjects(),
				new IStateManager[] { EditButton, NewButton, DeleteButton, UpdateButton, CancelButton, CustomButtons });
		}
		protected internal override string GetCaption() {
			if(!String.IsNullOrEmpty(Caption))
				return Caption;
			return "#";
		}
	}
	public class TreeListCommandColumnButton : PropertiesBase {
		TreeListCommandColumnButtonType type;
		ImageProperties image;
		ButtonControlStyles styles;
		public TreeListCommandColumnButton(TreeListCommandColumn column, TreeListCommandColumnButtonType type) 
			: base(column) {
			this.type = type;
			this.image = new ImageProperties(column);
			this.styles = new ButtonControlStyles(column.TreeList);
		}
		[Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public TreeListCommandColumnButtonType Type { get { return type; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnButtonImage"),
#endif
		Category("Appearance"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ImageProperties Image { get { return image; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnButtonStyles"),
#endif
		Category("Appearance"), NotifyParentProperty(true), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public ButtonControlStyles Styles { get { return styles; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnButtonText"),
#endif
		Category("Appearance"), NotifyParentProperty(true), DefaultValue(""), Localizable(true)]
		public string Text {
			get { return GetStringProperty("Text", String.Empty); }
			set {
				if(value != Text) {
					SetStringProperty("Text", String.Empty, value);
					Changed();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnButtonVisible"),
#endif
		Category("Appearance"), NotifyParentProperty(true), DefaultValue(false)]
		public virtual bool Visible {
			get { return GetBoolProperty("Visible", false); }
			set {
				if(value != Visible) {
					SetBoolProperty("Visible", false, value);
					Changed();
				}
			}
		}
		protected TreeListCommandColumn Column { get { return Owner as TreeListCommandColumn; } }
		public override void Assign(PropertiesBase source) {
			base.Assign(source);
			TreeListCommandColumnButton button = source as TreeListCommandColumnButton;
			if(button == null) return;
			Image.Assign(button.Image);
			Styles.CopyFrom(button.Styles);
			Visible = button.Visible;
			Text = button.Text;
		}
		protected override IStateManager[] GetStateManagedObjects() {
			return ViewStateUtils.GetMergedStateManagedObjects(base.GetStateManagedObjects(),
				new IStateManager[] { Image, Styles });
		}
		public override string ToString() {
			return String.Empty;
		}
	}
	public class TreeListCommandColumnUpdateButton : TreeListCommandColumnButton {
		public TreeListCommandColumnUpdateButton(TreeListCommandColumn column)
			: base(column, TreeListCommandColumnButtonType.Update) { }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnUpdateButtonVisible"),
#endif
		Category("Appearance"), NotifyParentProperty(true), DefaultValue(true)]
		public override bool Visible {
			get { return GetBoolProperty("Visible", true); }
			set {
				if(value != Visible) {
					SetBoolProperty("Visible", true, value);
					Changed();
				}
			}
		}
	}
	public class TreeListCommandColumnCancelButton : TreeListCommandColumnButton {
		public TreeListCommandColumnCancelButton(TreeListCommandColumn column) 
			: base(column, TreeListCommandColumnButtonType.Cancel) { }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCancelButtonVisible"),
#endif
		Category("Appearance"), NotifyParentProperty(true), DefaultValue(true)]
		public override bool Visible {
			get { return GetBoolProperty("Visible", true); }
			set {
				if(value != Visible) {
					SetBoolProperty("Visible", true, value);
					Changed();
				}
			}
		}
	}
	public class TreeListCommandColumnCustomButton : CollectionItem {
		ImageProperties image;
		ButtonControlStyles styles;
		public TreeListCommandColumnCustomButton() {
			this.image = new ImageProperties(this);
			this.styles = new ButtonControlStyles(null);
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCustomButtonVisibility"),
#endif
		Category("Appearance"), NotifyParentProperty(true), DefaultValue(TreeListCustomButtonVisibility.BrowsableNode)]
		public TreeListCustomButtonVisibility Visibility {
			get { return (TreeListCustomButtonVisibility)GetEnumProperty("Visibility", TreeListCustomButtonVisibility.BrowsableNode); }
			set {
				if(value != Visibility) {
					SetEnumProperty("Visibility", TreeListCustomButtonVisibility.BrowsableNode, value);
					Changed();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCustomButtonText"),
#endif
		Category("Appearance"), NotifyParentProperty(true), DefaultValue(""), Localizable(true)]
		public string Text {
			get { return GetStringProperty("Text", String.Empty); }
			set {
				if(value != Text) {
					SetStringProperty("Text", String.Empty, value);
					Changed();
				}
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCustomButtonImage"),
#endif
		Category("Appearance"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public ImageProperties Image { get { return image; } }
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCustomButtonStyles"),
#endif
		Category("Appearance"), PersistenceMode(PersistenceMode.InnerProperty), DesignerSerializationVisibility(DesignerSerializationVisibility.Content), NotifyParentProperty(true)]
		public ButtonControlStyles Styles { get { return styles; } }
		protected internal bool IsVisible(bool isEditRow) {
			switch(Visibility) {
				case TreeListCustomButtonVisibility.Hidden:
					return false;
				case TreeListCustomButtonVisibility.EditableNode:
					return isEditRow;
				case TreeListCustomButtonVisibility.BrowsableNode:
					return !isEditRow;
				default:
					return true;
			}
		}
		[
#if !SL
	DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCustomButtonID"),
#endif
		Category("Behavior"), DefaultValue(""), NotifyParentProperty(true), Localizable(false)]
		public string ID {
			get { return GetStringProperty("ID", String.Empty); }
			set {
				if(value != ID) {
					SetStringProperty("ID", String.Empty, value);
					Changed();
				}
			}
		}
		protected override IStateManager[] GetStateManagedObjects() {
			return ViewStateUtils.GetMergedStateManagedObjects(base.GetStateManagedObjects(),
				new IStateManager[] { Image, Styles });
		}
		public override void Assign(CollectionItem source) {
			base.Assign(source);
			TreeListCommandColumnCustomButton button = source as TreeListCommandColumnCustomButton;
			if(button == null) return;			
			Visibility = button.Visibility;
			Text = button.Text;
			ID = button.ID;
			Image.Assign(button.Image);
			Styles.CopyFrom(button.Styles);
		}
		void Changed() {
			TreeListCommandColumnCustomButtonCollection collection = Collection as TreeListCommandColumnCustomButtonCollection;
			if(collection != null)
				collection.Column.OnColumnChanged();
		}
		protected internal string GetID() {
			if(!String.IsNullOrEmpty(ID)) return ID;
			return Text;
		}
		protected internal string GetText() {
			if(!String.IsNullOrEmpty(Text)) return Text;
			return ID;
		}
	}
	public class TreeListCommandColumnCustomButtonCollection : Collection<TreeListCommandColumnCustomButton> {
		TreeListCommandColumn column;
		public TreeListCommandColumnCustomButtonCollection(TreeListCommandColumn column) {
			this.column = column;
		}
#if !SL
	[DevExpressWebASPxTreeListLocalizedDescription("TreeListCommandColumnCustomButtonCollectionColumn")]
#endif
		public TreeListCommandColumn Column { get { return column; } }
		public override string ToString() {
			return String.Empty;
		}
		protected override void OnChanged() {
			base.OnChanged();			
			Column.OnColumnChanged();
		}
	}
}
