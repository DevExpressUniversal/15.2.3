#region Copyright (c) 2000-2015 Developer Express Inc.
/*
{*******************************************************************}
{                                                                   }
{       Developer Express .NET Component Library                    }
{       WinForms Controls                                           }
{                                                                   }
{       Copyright (c) 2000-2015 Developer Express Inc.              }
{       ALL RIGHTS RESERVED                                         }
{                                                                   }
{   The entire contents of this file is protected by U.S. and       }
{   International Copyright Laws. Unauthorized reproduction,        }
{   reverse-engineering, and distribution of all or any portion of  }
{   the code contained in this file is strictly prohibited and may  }
{   result in severe civil and criminal penalties and will be       }
{   prosecuted to the maximum extent possible under the law.        }
{                                                                   }
{   RESTRICTIONS                                                    }
{                                                                   }
{   THIS SOURCE CODE AND ALL RESULTING INTERMEDIATE FILES           }
{   ARE CONFIDENTIAL AND PROPRIETARY TRADE                          }
{   SECRETS OF DEVELOPER EXPRESS INC. THE REGISTERED DEVELOPER IS   }
{   LICENSED TO DISTRIBUTE THE PRODUCT AND ALL ACCOMPANYING .NET    }
{   CONTROLS AS PART OF AN EXECUTABLE PROGRAM ONLY.                 }
{                                                                   }
{   THE SOURCE CODE CONTAINED WITHIN THIS FILE AND ALL RELATED      }
{   FILES OR ANY PORTION OF ITS CONTENTS SHALL AT NO TIME BE        }
{   COPIED, TRANSFERRED, SOLD, DISTRIBUTED, OR OTHERWISE MADE       }
{   AVAILABLE TO OTHER INDIVIDUALS WITHOUT EXPRESS WRITTEN CONSENT  }
{   AND PERMISSION FROM DEVELOPER EXPRESS INC.                      }
{                                                                   }
{   CONSULT THE END USER LICENSE AGREEMENT FOR INFORMATION ON       }
{   ADDITIONAL RESTRICTIONS.                                        }
{                                                                   }
{*******************************************************************}
*/
#endregion Copyright (c) 2000-2015 Developer Express Inc.

namespace DevExpress.Win.FunctionalTests.UIMaps.VerticalGridTreeListUIMapClasses
{
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.Drawing;
	using System.Text.RegularExpressions;
	using System.Windows.Input;
	using DevExpress.CodedUIExtension.DXTestControls.v15_2;
	using Microsoft.VisualStudio.TestTools.UITest.Extension;
	using Microsoft.VisualStudio.TestTools.UITesting;
	using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
	using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
	using Microsoft.VisualStudio.TestTools.UnitTesting;
	using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
	using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
	using MouseButtons = System.Windows.Forms.MouseButtons;
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public partial class VerticalGridTreeListUIMap
	{
		public void SwitchToCategoryRowButtonDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToCategoryRowButtonDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void CheckCategoryRowCollapsedState()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckCategoryRowCollapsedStateExpectedValues.UICategoryRow1VerticalGridCategoryRowExpanded, uICategoryRow1VerticalGridCategoryRow.Expanded);
		}
		public void CheckCategoryRowExpandedState()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckCategoryRowExpandedStateExpectedValues.UICategoryRow1VerticalGridCategoryRowExpanded, uICategoryRow1VerticalGridCategoryRow.Expanded);
		}
		public void SwitchToTreeViewExpandButtonStyle()
		{
			#region Variable Declarations
			DXRadioGroup uIRadioGroup1RadioGroup = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIPanel2Client.UIRadioGroup1RadioGroup;
			#endregion
			uIRadioGroup1RadioGroup.SelectedIndex = this.SwitchToTreeViewExpandButtonStyleParams.UIRadioGroup1RadioGroupSelectedIndex;
		}
		public void CollapseCategoryRowViaClickTreeViewStyleExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIVerticalGridExpandBuVerticalGridExpandButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIVerticalGridExpandBuVerticalGridExpandButton;
			#endregion
			Mouse.Click(uIVerticalGridExpandBuVerticalGridExpandButton, new Point(5, 0));
		}
		public void ExpandCategoryRowViaClickTreeViewStyleExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIVerticalGridExpandBuVerticalGridExpandButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIVerticalGridExpandBuVerticalGridExpandButton;
			#endregion
			Mouse.Click(uIVerticalGridExpandBuVerticalGridExpandButton, new Point(5, 3));
		}
		public void SwitchToDragAndDropDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToDragAndDropDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void CheckDragRowHeadersCheckBox()
		{
			#region Variable Declarations
			DXCheckBox uICheckBox1CheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UICheckBox1CheckBox;
			#endregion
			uICheckBox1CheckBox.Checked = this.CheckDragRowHeadersCheckBoxParams.UICheckBox1CheckBoxChecked;
		}
		public void CheckDraggingRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow2VerticalGridRow;
			DXVerticalGridRow uIRowLast_NameVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowLast_NameVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowWithMoveChildDragActionExpectedValues.UIMultiEditorRow2VerticalGridRowChildrenCount, uIMultiEditorRow2VerticalGridRow.ChildrenCount);
			Assert.AreEqual(this.CheckDraggingRowWithMoveChildDragActionExpectedValues.UIRowLast_NameVerticalGridRowParentName, uIRowLast_NameVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
		}
		public void CheckDraggingRowWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowLast_NameVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowLast_NameVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowWithMoveToEndDragActionExpectedValues.UIRowLast_NameVerticalGridRowParentName, uIRowLast_NameVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingRowWithMoveToEndDragActionExpectedValues.UIRowLast_NameVerticalGridRowVisibleIndex, uIRowLast_NameVerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingRowWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowPhotoVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowPhotoVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowWithInsertBeforeDragActionExpectedValues.UIRowPhotoVerticalGridRowVisibleIndex, uIRowPhotoVerticalGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingRowWithInsertBeforeDragActionExpectedValues.UIRowPhotoVerticalGridRowParentName, uIRowPhotoVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
		}
		public void CheckDraggingRowWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowWithInsertAfterDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowParentName, uIRowTitle_Of_CourtesyVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingRowWithInsertAfterDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex, uIRowTitle_Of_CourtesyVerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingCategoryRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow3VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow3VerticalGridCategoryRow;
			DXVerticalGridRow uIMultiEditorRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow2VerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues.UICategoryRow3VerticalGridCategoryRowParentName, uICategoryRow3VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues.UICategoryRow3VerticalGridCategoryRowVisibleIndex, uICategoryRow3VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues.UIMultiEditorRow2VerticalGridRowChildrenCount, uIMultiEditorRow2VerticalGridRow.ChildrenCount);
		}
		public void CheckDraggingCategoryRowWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow2VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow2VerticalGridCategoryRow;
			DXVerticalGridRow uIMultiEditorRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow2VerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues.UICategoryRow2VerticalGridCategoryRowParentName, uICategoryRow2VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues.UICategoryRow2VerticalGridCategoryRowVisibleIndex, uICategoryRow2VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues.UIMultiEditorRow2VerticalGridRowVisibleIndex, uIMultiEditorRow2VerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingCategoryRowWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow3VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow3VerticalGridCategoryRow;
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues.UICategoryRow3VerticalGridCategoryRowParentName, uICategoryRow3VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues.UICategoryRow3VerticalGridCategoryRowVisibleIndex, uICategoryRow3VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowChildrenCount, uICategoryRow1VerticalGridCategoryRow.ChildrenCount);
		}
		public void CheckDraggingCategoryRowWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			DXVerticalGridRow uICategoryRow2VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow2VerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowParentName, uICategoryRow1VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowVisibleIndex, uICategoryRow1VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues.UICategoryRow2VerticalGridCategoryRowChildrenCount, uICategoryRow2VerticalGridCategoryRow.ChildrenCount);
		}
		public void SwitchToResizingDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToResizingDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdge()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			#endregion
			uIVGridControl1VerticalGrid.RecordWidth = this.ChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams.UIVGridControl1VerticalGridRecordWidth;
		}
		public void CheckVerticalGridRecordWidth()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridRecordWidthExpectedValues.UIVGridControl1VerticalGridRecordWidth, uIVGridControl1VerticalGrid.RecordWidth);
		}
		public void ChangeVerticalGridRecordWidthViaRecordWidthSpinEdit()
		{
			#region Variable Declarations
			DXTextEdit uISpinEdit1Edit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIPanel2Client.UISpinEdit1Edit;
			#endregion
			uISpinEdit1Edit.ValueAsString = this.ChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams.UISpinEdit1EditValueAsString;
		}
		public void ChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdge()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			#endregion
			uIVGridControl1VerticalGrid.RowHeaderWidth = this.ChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams.UIVGridControl1VerticalGridRowHeaderWidth;
		}
		public void CheckVerticalGridRowHeaderWidth()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridRowHeaderWidthExpectedValues.UIVGridControl1VerticalGridRowHeaderWidth, uIVGridControl1VerticalGrid.RowHeaderWidth);
		}
		public void ChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEdit()
		{
			#region Variable Declarations
			DXTextEdit uISpinEdit2Edit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIPanel2Client.UISpinEdit2Edit;
			#endregion
			uISpinEdit2Edit.ValueAsString = this.ChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams.UISpinEdit2EditValueAsString;
		}
		public void ChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdge()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uICategoryRow1VerticalGridRow.RowHeight = this.ChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams.UICategoryRow1VerticalGridRowRowHeight;
		}
		public void CheckVerticalGridCategoryRowHeaderHeight()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridCategoryRowHeaderHeightExpectedValues.UICategoryRow1VerticalGridCategoryRowRowHeight, uICategoryRow1VerticalGridCategoryRow.RowHeight);
		}
		public void ChangeVerticalGridRowHeightViaDraggingRowEdge()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			uIRowTitle_Of_CourtesyVerticalGridRow.RowHeight = this.ChangeVerticalGridRowHeightViaDraggingRowEdgeParams.UIRowTitle_Of_CourtesyVerticalGridRowRowHeight;
		}
		public void CheckVerticalGridRowHeight()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridRowHeightExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowRowHeight, uIRowTitle_Of_CourtesyVerticalGridRow.RowHeight);
		}
		public void ChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEdit()
		{
			#region Variable Declarations
			DXTextEdit uISpinEdit3Edit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIPanel2Client.UISpinEdit3Edit;
			#endregion
			uISpinEdit3Edit.ValueAsString = this.ChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams.UISpinEdit3EditValueAsString;
		}
		public void CheckVerticalGridRecordsInterval()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridRecordsIntervalExpectedValues.UIVGridControl1VerticalGridRecordsInterval, uIVGridControl1VerticalGrid.RecordsInterval);
		}
		public void SwitchToLayoutAndPaintStylesDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToLayoutAndPaintStylesDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void SwitchToBandsViewLayoutStyle()
		{
			#region Variable Declarations
			DXRadioGroup uIRadioGroup1RadioGroup = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UILayoutAndPaintStylesCustom.UIPanel2Client.UIRadioGroup1RadioGroup;
			#endregion
			uIRadioGroup1RadioGroup.SelectedIndex = this.SwitchToBandsViewLayoutStyleParams.UIRadioGroup1RadioGroupSelectedIndex;
		}
		public void ChangeVerticalGridBandWidthViaDraggingBandEdge()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UILayoutAndPaintStylesCustom.UIVGridControl1VerticalGrid;
			#endregion
			uIVGridControl1VerticalGrid.RecordWidth = this.ChangeVerticalGridBandWidthViaDraggingBandEdgeParams.UIVGridControl1VerticalGridRecordWidth;
		}
		public void CheckVerticalGridBandWidth()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UILayoutAndPaintStylesCustom.UIVGridControl1VerticalGrid;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridBandWidthExpectedValues.UIVGridControl1VerticalGridRecordWidth, uIVGridControl1VerticalGrid.RecordWidth);
		}
		public void SwitchToMultiEditorsRowDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToMultiEditorsRowDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeMultiEditorsCellVerticalLineSeparatorsPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow2VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow1VerticalGridRow;
			#endregion
			uIMultiEditorRow2VerticalGridRow.CellLengths = this.ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams.UIMultiEditorRow2VerticalGridRowCellLengths;
			uIMultiEditorRow2VerticalGridRow.CellLengths = this.ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams.UIMultiEditorRow2VerticalGridRowCellLengths1;
			uIMultiEditorRow1VerticalGridRow.CellLengths = this.ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams.UIMultiEditorRow1VerticalGridRowCellLengths;
		}
		public void CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow1VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow2VerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues.UIMultiEditorRow1VerticalGridRowCellLengths, uIMultiEditorRow1VerticalGridRow.GetProperty("CellLengths").ToString());
			Assert.AreEqual(this.CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues.UIMultiEditorRow2VerticalGridRowCellLengths, uIMultiEditorRow2VerticalGridRow.GetProperty("CellLengths").ToString());
		}
		public void ChangeMultiEditorsCellStringSeparatorsPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow5VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow5VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow6VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow6VerticalGridRow;
			#endregion
			uIMultiEditorRow5VerticalGridRow.CellLengths = this.ChangeMultiEditorsCellStringSeparatorsPositionParams.UIMultiEditorRow5VerticalGridRowCellLengths;
			uIMultiEditorRow6VerticalGridRow.CellLengths = this.ChangeMultiEditorsCellStringSeparatorsPositionParams.UIMultiEditorRow6VerticalGridRowCellLengths;
		}
		public void CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow5VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow5VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow6VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow6VerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues.UIMultiEditorRow5VerticalGridRowCellLengths, uIMultiEditorRow5VerticalGridRow.GetProperty("CellLengths").ToString());
			Assert.AreEqual(this.CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues.UIMultiEditorRow6VerticalGridRowCellLengths, uIMultiEditorRow6VerticalGridRow.GetProperty("CellLengths").ToString());
		}
		public void ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow1VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow2VerticalGridRow;
			#endregion
			uIMultiEditorRow1VerticalGridRow.HeaderCellLengths = this.ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams.UIMultiEditorRow1VerticalGridRowHeaderCellLengths;
			uIMultiEditorRow2VerticalGridRow.HeaderCellLengths = this.ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams.UIMultiEditorRow2VerticalGridRowHeaderCellLengths;
		}
		public void CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow1VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow2VerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues.UIMultiEditorRow1VerticalGridRowHeaderCellLengths, uIMultiEditorRow1VerticalGridRow.GetProperty("HeaderCellLengths").ToString());
			Assert.AreEqual(this.CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues.UIMultiEditorRow2VerticalGridRowHeaderCellLengths, uIMultiEditorRow2VerticalGridRow.GetProperty("HeaderCellLengths").ToString());
		}
		public void ChangeMultiEditorsHeaderCellStringSeparatorsPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow3VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow3VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow5VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow5VerticalGridRow;
			#endregion
			uIMultiEditorRow3VerticalGridRow.HeaderCellLengths = this.ChangeMultiEditorsHeaderCellStringSeparatorsPositionParams.UIMultiEditorRow3VerticalGridRowHeaderCellLengths;
			uIMultiEditorRow5VerticalGridRow.HeaderCellLengths = this.ChangeMultiEditorsHeaderCellStringSeparatorsPositionParams.UIMultiEditorRow5VerticalGridRowHeaderCellLengths;
		}
		public void CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPosition()
		{
			#region Variable Declarations
			DXVerticalGridRow uIMultiEditorRow3VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow3VerticalGridRow;
			DXVerticalGridRow uIMultiEditorRow5VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow5VerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues.UIMultiEditorRow3VerticalGridRowHeaderCellLengths, uIMultiEditorRow3VerticalGridRow.GetProperty("HeaderCellLengths").ToString());
			Assert.AreEqual(this.CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues.UIMultiEditorRow5VerticalGridRowHeaderCellLengths, uIMultiEditorRow5VerticalGridRow.GetProperty("HeaderCellLengths").ToString());
		}
		public void ChangeMultiEditorsSeparatorString()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid;
			DXTextEdit uITextBox1Edit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIPanel2Client.UITextBox1Edit;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeMultiEditorsSeparatorStringParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uITextBox1Edit.ValueAsString = this.ChangeMultiEditorsSeparatorStringParams.UITextBox1EditValueAsString;
		}
		public void CheckChangedMultiEditorsSeparatorString()
		{
			#region Variable Declarations
			DXTestControl uIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiEditorsRowCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow5VerticalGridRow.UIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator;
			#endregion
			Assert.AreEqual(this.CheckChangedMultiEditorsSeparatorStringExpectedValues.UIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparatorText, uIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator.Text);
		}
		public void SwitchToRowCustomizationDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToRowCustomizationDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void CheckVerticalGridRowInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uIPhotoListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpRowsClient.UILbRowsList.UIPhotoListItem;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridRowInCustomizationFormExpectedValues.UIPhotoListItemText, uIPhotoListItem.Text);
			Assert.AreEqual(this.CheckVerticalGridRowInCustomizationFormExpectedValues.UIPhotoListItemParentName, uIPhotoListItem.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
		}
		public void CheckVerticalGridCategoryRowInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uIEmployeeListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UIEmployeeListItem;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridCategoryRowInCustomizationFormExpectedValues.UIEmployeeListItemText, uIEmployeeListItem.Text);
			Assert.AreEqual(this.CheckVerticalGridCategoryRowInCustomizationFormExpectedValues.UIEmployeeListItemParentName, uIEmployeeListItem.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
		}
		public void CheckDraggingRowFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowParentName, uIRowTitle_Of_CourtesyVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex, uIRowTitle_Of_CourtesyVerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingRowFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowLast_NameVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowLast_NameVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowLast_NameVerticalGridRowParentName, uIRowLast_NameVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowLast_NameVerticalGridRowVisibleIndex, uIRowLast_NameVerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingRowFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowHire_DateVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowHire_DateVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowHire_DateVerticalGridRowParentName, uIRowHire_DateVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowHire_DateVerticalGridRowVisibleIndex, uIRowHire_DateVerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowExtensionVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowExtensionVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowExtensionVerticalGridRowParentName, uIRowExtensionVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowExtensionVerticalGridRowVisibleIndex, uIRowExtensionVerticalGridRow.VisibleIndex);
		}
		public void SwitchToRowsTabInCustomizationForm()
		{
			#region Variable Declarations
			DXTestControl uIXtraTabControlHeaderTabPage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UIXtraTabControlHeaderTabPage;
			#endregion
			Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(31, 13));
		}
		public void CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowParentName, uICategoryRow1VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowVisibleIndex, uICategoryRow1VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowParentName, uIRowTitle_Of_CourtesyVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex, uIRowTitle_Of_CourtesyVerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowParentName, uICategoryRow1VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowVisibleIndex, uICategoryRow1VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowParentName, uIRowTitle_Of_CourtesyVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex, uIRowTitle_Of_CourtesyVerticalGridRow.VisibleIndex);
		}
		public void CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowParentName, uICategoryRow1VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowVisibleIndex, uICategoryRow1VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowParentName, uIRowTitle_Of_CourtesyVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex, uIRowTitle_Of_CourtesyVerticalGridRow.VisibleIndex);
		}
		public void SwitchToCategoriesTabInCustomizationForm()
		{
			#region Variable Declarations
			DXTestControl uIXtraTabControlHeaderTabPage1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UIXtraTabControlHeaderTabPage1;
			#endregion
			Mouse.Click(uIXtraTabControlHeaderTabPage1, new Point(55, 4));
		}
		public void CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowParentName, uICategoryRow1VerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryRow1VerticalGridCategoryRowVisibleIndex, uICategoryRow1VerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowParentName, uIRowTitle_Of_CourtesyVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex, uIRowTitle_Of_CourtesyVerticalGridRow.VisibleIndex);
		}
		public void AddNewCategoryRowViaCustomizationFormOkButton()
		{
			#region Variable Declarations
			DXButton uINewButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UINewButton;
			DXTextEdit uITextEditEdit = this.UIItemWindow.UITextEditEdit;
			DXButton uISimpleButtonButton = this.UIItemWindow.UISimpleButtonButton;
			#endregion
			Mouse.Click(uINewButton, new Point(1, 1));
			uITextEditEdit.ValueAsString = this.AddNewCategoryRowViaCustomizationFormOkButtonParams.UITextEditEditValueAsString;
			Mouse.Click(uISimpleButtonButton, new Point(1, 1));
		}
		public void CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryTestCategoryVerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowText, uICategoryTestCategoryVerticalGridCategoryRow.Text);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowParentName, uICategoryTestCategoryVerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowVisibleIndex, uICategoryTestCategoryVerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowStyle, uICategoryTestCategoryVerticalGridCategoryRow.Style);
		}
		public void CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryTestCategoryVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryTestCategoryVerticalGridRowText, uICategoryTestCategoryVerticalGridRow.Text);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryTestCategoryVerticalGridRowParentName, uICategoryTestCategoryVerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryTestCategoryVerticalGridRowVisibleIndex, uICategoryTestCategoryVerticalGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryTestCategoryVerticalGridRowStyle, uICategoryTestCategoryVerticalGridRow.Style);
		}
		public void CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryTestCategoryVerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowText, uICategoryTestCategoryVerticalGridCategoryRow.Text);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowParentName, uICategoryTestCategoryVerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowVisibleIndex, uICategoryTestCategoryVerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowStyle, uICategoryTestCategoryVerticalGridCategoryRow.Style);
		}
		public void DragVerticalGridRowWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowHome_PhoneVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowHome_PhoneVerticalGridRow;
			#endregion
			uIRowHome_PhoneVerticalGridRow.DraggingDestination = this.DragVerticalGridRowWithMoveToEndDragActionParams.UIRowHome_PhoneVerticalGridRowDraggingDestination;
		}
		public void CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryTestCategoryVerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowText, uICategoryTestCategoryVerticalGridCategoryRow.Text);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowParentName, uICategoryTestCategoryVerticalGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowVisibleIndex, uICategoryTestCategoryVerticalGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryTestCategoryVerticalGridCategoryRowStyle, uICategoryTestCategoryVerticalGridCategoryRow.Style);
		}
		public void DragAnotherVerticalGridCategoryRowToCustomizationForm()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryRow2VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow2VerticalGridCategoryRow;
			#endregion
			uICategoryRow2VerticalGridCategoryRow.DraggingDestination = this.DragAnotherVerticalGridCategoryRowToCustomizationFormParams.UICategoryRow2VerticalGridCategoryRowDraggingDestination;
		}
		public void DeleteVerticalGridCategoryRowInCustomizationForm()
		{
			#region Variable Declarations
			DXListBox uILbCategoriesList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList;
			DXButton uIDeleteButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UIDeleteButton;
			#endregion
			uILbCategoriesList.SelectedIndicesAsString = this.DeleteVerticalGridCategoryRowInCustomizationFormParams.UILbCategoriesListSelectedIndicesAsString;
			Mouse.Click(uIDeleteButton, new Point(1, 1));
		}
		public void CheckDeletedVerticalGridCategoryRowInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uIAddressListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UIAddressListItem;
			#endregion
			Assert.AreEqual(this.CheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues.UIAddressListItemText, uIAddressListItem.Text);
			Assert.AreEqual(this.CheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues.UIAddressListItemIndex, uIAddressListItem.Index);
		}
		public void CheckAnotherVerticalGridCategoryRowInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uIAddressListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UIAddressListItem;
			#endregion
			Assert.AreEqual(this.CheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues.UIAddressListItemText, uIAddressListItem.Text);
			Assert.AreEqual(this.CheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues.UIAddressListItemIndex, uIAddressListItem.Index);
		}
		public void CollapseCategoryRowViaDoubleClickHeaderCell()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.CollapseCategoryRowViaDoubleClickHeaderCellParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.Expanded = this.CollapseCategoryRowViaDoubleClickHeaderCellParams.UICategoryRow1VerticalGridRowExpanded;
		}
		public void ExpandCategoryRowViaDoubleClickHeaderCellImage()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ExpandCategoryRowViaDoubleClickHeaderCellImageParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.Expanded = this.ExpandCategoryRowViaDoubleClickHeaderCellImageParams.UICategoryRow1VerticalGridRowExpanded;
		}
		public void CollapseCategoryRowViaDoubleClick()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridCategoryRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.CollapseCategoryRowViaDoubleClickParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridCategoryRow.Expanded = this.CollapseCategoryRowViaDoubleClickParams.UICategoryRow1VerticalGridCategoryRowExpanded;
		}
		public void CollapseCategoryRowViaClickExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIVerticalGridExpandBuVerticalGridExpandButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIVerticalGridExpandBuVerticalGridExpandButton;
			#endregion
			Mouse.Click(uIVerticalGridExpandBuVerticalGridExpandButton, new Point(6, 2));
		}
		public void ExpandCategoryRowViaClickExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIVerticalGridExpandBuVerticalGridExpandButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIVerticalGridExpandBuVerticalGridExpandButton;
			#endregion
			Mouse.Click(uIVerticalGridExpandBuVerticalGridExpandButton, new Point(6, 11));
		}
		public void CheckAddedCategoryRowInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uITestCategoryListItem1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UITestCategoryListItem1;
			#endregion
			Assert.AreEqual(this.CheckAddedCategoryRowInCustomizationFormExpectedValues.UITestCategoryListItem1Text, uITestCategoryListItem1.Text);
			Assert.AreEqual(this.CheckAddedCategoryRowInCustomizationFormExpectedValues.UITestCategoryListItem1Index, uITestCategoryListItem1.Index);
			Assert.AreEqual(this.CheckAddedCategoryRowInCustomizationFormExpectedValues.UITestCategoryListItem1ParentName, uITestCategoryListItem1.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
		}
		public void AddNewCategoryRowViaEnterKey()
		{
			#region Variable Declarations
			DXButton uINewButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIVGridControl1CustomiWindow.UITabControl1TabList.UITpCategoriesClient.UINewButton;
			DXTextEdit uITextEditEdit = this.UIItemWindow.UITextEditEdit;
			#endregion
			Mouse.Click(uINewButton, new Point(1, 1));
			uITextEditEdit.ValueAsString = this.AddNewCategoryRowViaEnterKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.AddNewCategoryRowViaEnterKeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CollapseCategoryRowViaMinusKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIEmployeeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIEmployeeVerticalGridHeaderCell;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.CollapseCategoryRowViaMinusKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIEmployeeVerticalGridHeaderCell, new Point(52, 4));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.CollapseCategoryRowViaMinusKeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
		}
		public void ExpandCategoryRowViaPlusKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIEmployeeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICategoryRowButtonsCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIEmployeeVerticalGridHeaderCell;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ExpandCategoryRowViaPlusKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIEmployeeVerticalGridHeaderCell, new Point(51, 6));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ExpandCategoryRowViaPlusKeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
		}
		public void ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uITitleVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid.UIRowTitleVerticalGridRow.UITitleVerticalGridHeaderCell;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uITitleVerticalGridHeaderCell, new Point(60, 11));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys1, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys2, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys3, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys4, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys5, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys6, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys7, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys8, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams.UIVGridControl1VerticalGridSendKeys9, ModifierKeys.Control);
		}
		public void CheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues.UIVGridControl1VerticalGridRowHeaderWidth, uIVGridControl1VerticalGrid.RowHeaderWidth);
		}
		public void ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIHomePhoneVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid.UIRowHome_PhoneVerticalGridRow.UIHomePhoneVerticalGridHeaderCell;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIHomePhoneVerticalGridHeaderCell, new Point(115, 8));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys1, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys2, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys3, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys4, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys5, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys6, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys7, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys8, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys9, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys10, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys11, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys12, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys13, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams.UIVGridControl1VerticalGridSendKeys14, ModifierKeys.Control);
		}
		public void CheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIResizingCustom.UIVGridControl1VerticalGrid;
			#endregion
			Assert.AreEqual(this.CheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues.UIVGridControl1VerticalGridRowHeaderWidth, uIVGridControl1VerticalGrid.RowHeaderWidth);
		}
		public void SwitchToDataModeDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToDataModeDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeVerticalGridFocusedCellEditorValueViaEnterKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIPerformanceAttributeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIPerformanceAttributeVerticalGridHeaderCell;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UITextEditEdit;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIPerformanceAttributeVerticalGridHeaderCell, new Point(124, 3));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams.UITextEditEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams.UIVGridControl1VerticalGridSendKeys1, ModifierKeys.None);
		}
		public void CheckChangedVerticalGridCellValue()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem355VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UIRowHPVerticalGridRow.UIItem355VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueExpectedValues.UIItem355VerticalGridCellValueAsString, uIItem355VerticalGridCell.ValueAsString);
		}
		public void ChangeVerticalGridFocusedCellEditorValueViaF2Key()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIPerformanceAttributeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIPerformanceAttributeVerticalGridHeaderCell;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UITextEditEdit;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIPerformanceAttributeVerticalGridHeaderCell, new Point(126, 5));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void ChangeVerticalGridFocusedCellEditorValueViaCharacterKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIPerformanceAttributeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIPerformanceAttributeVerticalGridHeaderCell;
			DXTextEdit uITextEditEdit1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UITextEditEdit1;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIPerformanceAttributeVerticalGridHeaderCell, new Point(106, 10));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit1.ValueAsString = this.ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams.UITextEditEdit1ValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams.UIVGridControl1VerticalGridFocusedCellAsString1;
			Mouse.Click(uIPerformanceAttributeVerticalGridHeaderCell, new Point(145, 5));
		}
		public void CheckChangedVerticalGridCellValueViaCharacterKeys()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem125VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UIRowCylVerticalGridRow.UIItem125VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues.UIItem125VerticalGridCellValueAsString, uIItem125VerticalGridCell.ValueAsString);
		}
		public void CheckChangedVerticalGridCellValueViaEscKey()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem24VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UIRowMPGVerticalGridRow.UIItem24VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaEscKeyExpectedValues.UIItem24VerticalGridCellValueAsString, uIItem24VerticalGridCell.ValueAsString);
		}
		public void SwitchToRowFormatDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToRowFormatDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeVerticalGridCellDateFormatValue()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowFormatCustom.UIVGridControl1VerticalGrid;
			DXDateTimePicker uIDateEditDateTimeEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowFormatCustom.UIVGridControl1VerticalGrid.UIDateEditDateTimeEdit;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellDateFormatValueParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIDateEditDateTimeEdit.ValueAsString = this.ChangeVerticalGridCellDateFormatValueParams.UIDateEditDateTimeEditValueAsString;
		}
		public void CheckChangedVerticalGridCellDateFormatValue()
		{
			#region Variable Declarations
			DXDateTimePicker uIDateEditDateTimeEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowFormatCustom.UIVGridControl1VerticalGrid.UIDateEditDateTimeEdit;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellDateFormatValueExpectedValues.UIDateEditDateTimeEditValueAsString, uIDateEditDateTimeEdit.ValueAsString);
		}
		public void ChangeVerticalGridCellDecimalFormatValue()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowFormatCustom.UIVGridControl1VerticalGrid;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowFormatCustom.UIVGridControl1VerticalGrid.UITextEditEdit;
			DXVerticalGridCell uIItem10099VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowFormatCustom.UIVGridControl1VerticalGrid.UIRowPayment1VerticalGridRow.UIItem10099VerticalGridCell;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellDecimalFormatValueParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uITextEditEdit.ValueAsString = this.ChangeVerticalGridCellDecimalFormatValueParams.UITextEditEditValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellDecimalFormatValueParams.UIVGridControl1VerticalGridFocusedCellAsString1;
			Mouse.Click(uIItem10099VerticalGridCell, new Point(11, 13));
			uIItem10099VerticalGridCell.ValueTypeName = this.ChangeVerticalGridCellDecimalFormatValueParams.UIItem10099VerticalGridCellValueTypeName;
			uIItem10099VerticalGridCell.ActiveEditorValue = this.ChangeVerticalGridCellDecimalFormatValueParams.UIItem10099VerticalGridCellActiveEditorValue;
		}
		public void CheckChangedVerticalGridCellDecimalFormatValue()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem55500VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowFormatCustom.UIVGridControl1VerticalGrid.UIRowPayment1VerticalGridRow.UIItem55500VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellDecimalFormatValueExpectedValues.UIItem55500VerticalGridCellValueAsString, uIItem55500VerticalGridCell.ValueAsString);
		}
		public void SwitchToEditorsDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToEditorsDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeVerticalGridCellValueViaSpinEditor()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIEditorsCustom.UIVGridControl1VerticalGrid;
			DXTextEdit uISpinEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIEditorsCustom.UIVGridControl1VerticalGrid.UISpinEditEdit;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellValueViaSpinEditorParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uISpinEditEdit.ValueAsString = this.ChangeVerticalGridCellValueViaSpinEditorParams.UISpinEditEditValueAsString;
		}
		public void CheckChangedVerticalGridCellValueViaSpinEditor()
		{
			#region Variable Declarations
			DXTextEdit uISpinEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIEditorsCustom.UIVGridControl1VerticalGrid.UISpinEditEdit;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaSpinEditorExpectedValues.UISpinEditEditValueAsString, uISpinEditEdit.ValueAsString);
		}
		public void ChangeVerticalGridCellValueViaImageComboBoxEditor()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIEditorsCustom.UIVGridControl1VerticalGrid;
			DXComboBox uIImageComboBoxEditComboBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIEditorsCustom.UIVGridControl1VerticalGrid.UIImageComboBoxEditComboBox;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellValueViaImageComboBoxEditorParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIImageComboBoxEditComboBox.ValueAsString = this.ChangeVerticalGridCellValueViaImageComboBoxEditorParams.UIImageComboBoxEditComboBoxValueAsString;
			Keyboard.SendKeys(uIImageComboBoxEditComboBox, this.ChangeVerticalGridCellValueViaImageComboBoxEditorParams.UIImageComboBoxEditComboBoxSendKeys, ModifierKeys.None);
		}
		public void CheckChangedVerticalGridCellValueViaImageComboBoxEditor()
		{
			#region Variable Declarations
			DXVerticalGridCell uINOVerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIEditorsCustom.UIVGridControl1VerticalGrid.UIRowTransmiss_AutomatVerticalGridRow.UINOVerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues.UINOVerticalGridCellValueAsString, uINOVerticalGridCell.ValueAsString);
		}
		public void SwitchToRowsNavigationDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToRowsNavigationDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeVerticalGridFirstCellValueViaHomeKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIEmployeeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIEmployeeVerticalGridHeaderCell;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridFirstCellValueViaHomeKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIEmployeeVerticalGridHeaderCell, new Point(148, 3));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridFirstCellValueViaHomeKeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeVerticalGridFirstCellValueViaHomeKeyParams.UITextEditEditValueAsString;
		}
		public void CheckChangedVerticalGridFirstCellValueViaHomeKey()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem123VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIRowTitleVerticalGridRow.UIItem123VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues.UIItem123VerticalGridCellValueAsString, uIItem123VerticalGridCell.ValueAsString);
		}
		public void ChangeVerticalGridLastCellValueViaEndKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIEmployeeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIEmployeeVerticalGridHeaderCell;
			DXTextEdit uITextEditEdit1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit1;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridLastCellValueViaEndKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIEmployeeVerticalGridHeaderCell, new Point(79, 9));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridLastCellValueViaEndKeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit1.ValueAsString = this.ChangeVerticalGridLastCellValueViaEndKeyParams.UITextEditEdit1ValueAsString;
		}
		public void CheckChangedVerticalGridLastCellValueViaEndKey()
		{
			#region Variable Declarations
			DXTextEdit uITextEditEdit1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit1;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues.UITextEditEdit1ValueAsString, uITextEditEdit1.ValueAsString);
		}
		public void ChangeVerticalGridCellValueViaPageDownKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIEmployeeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIEmployeeVerticalGridHeaderCell;
			DXTextEdit uITextEditEdit2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit2;
			DXTextEdit uITextEditEdit3 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit3;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellValueViaPageDownKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIEmployeeVerticalGridHeaderCell, new Point(94, 7));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCellValueViaPageDownKeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit2.ValueAsString = this.ChangeVerticalGridCellValueViaPageDownKeyParams.UITextEditEdit2ValueAsString;
			Keyboard.SendKeys(uITextEditEdit3, this.ChangeVerticalGridCellValueViaPageDownKeyParams.UITextEditEdit3SendKeys, ModifierKeys.None);
		}
		public void CheckChangedVerticalGridCellValueViaPageDownKey()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem123VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIRowExtensionVerticalGridRow.UIItem123VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues.UIItem123VerticalGridCellValueAsString, uIItem123VerticalGridCell.ValueAsString);
		}
		public void ChangeVerticalGridCellValueViaPageUpKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid;
			DXPopupEdit uIMemoExEditPopupEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIMemoExEditPopupEdit;
			DXTextEdit uITextEditEdit4 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit4;
			DXTextEdit uITextEditEdit5 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit5;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellValueViaPageUpKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIMemoExEditPopupEdit, new Point(31, 9));
			Keyboard.SendKeys(uIMemoExEditPopupEdit, this.ChangeVerticalGridCellValueViaPageUpKeyParams.UIMemoExEditPopupEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCellValueViaPageUpKeyParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit4.ValueAsString = this.ChangeVerticalGridCellValueViaPageUpKeyParams.UITextEditEdit4ValueAsString;
			Keyboard.SendKeys(uITextEditEdit5, this.ChangeVerticalGridCellValueViaPageUpKeyParams.UITextEditEdit5SendKeys, ModifierKeys.None);
		}
		public void CheckChangedVerticalGridCellValueViaPageUpKey()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem123VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIRowFirst_NameVerticalGridRow.UIItem123VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues.UIItem123VerticalGridCellValueAsString, uIItem123VerticalGridCell.ValueAsString);
		}
		public void ChangeVerticalGridCellValueViaCtrlEndShortcut()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridHeaderCell uIEmployeeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIEmployeeVerticalGridHeaderCell;
			DXTextEdit uITextEditEdit6 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit6;
			DXTextEdit uITextEditEdit7 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit7;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellValueViaCtrlEndShortcutParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIEmployeeVerticalGridHeaderCell, new Point(85, 11));
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCellValueViaCtrlEndShortcutParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCellValueViaCtrlEndShortcutParams.UIVGridControl1VerticalGridSendKeys1, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCellValueViaCtrlEndShortcutParams.UIVGridControl1VerticalGridSendKeys2, ModifierKeys.None);
			uITextEditEdit6.ValueAsString = this.ChangeVerticalGridCellValueViaCtrlEndShortcutParams.UITextEditEdit6ValueAsString;
			Keyboard.SendKeys(uITextEditEdit7, this.ChangeVerticalGridCellValueViaCtrlEndShortcutParams.UITextEditEdit7SendKeys, ModifierKeys.None);
		}
		public void CheckChangedVerticalGridCellValueViaCtrlEndShortcut()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem123VerticalGridCell1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIRowExtensionVerticalGridRow.UIItem123VerticalGridCell1;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues.UIItem123VerticalGridCell1ValueAsString, uIItem123VerticalGridCell1.ValueAsString);
		}
		public void ChangeVerticalGridCellValueViaCtrlHomeShortcut()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid;
			DXPopupEdit uIMemoExEditPopupEdit1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIMemoExEditPopupEdit1;
			DXPopupEdit uIMemoExEditPopupEdit2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIMemoExEditPopupEdit2;
			DXTextEdit uITextEditEdit8 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit8;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellValueViaCtrlHomeShortcutParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIMemoExEditPopupEdit1, new Point(32, 5));
			Keyboard.SendKeys(uIMemoExEditPopupEdit2, this.ChangeVerticalGridCellValueViaCtrlHomeShortcutParams.UIMemoExEditPopupEdit2SendKeys, ModifierKeys.Control);
			Keyboard.SendKeys(uIVGridControl1VerticalGrid, this.ChangeVerticalGridCellValueViaCtrlHomeShortcutParams.UIVGridControl1VerticalGridSendKeys, ModifierKeys.None);
			uITextEditEdit8.ValueAsString = this.ChangeVerticalGridCellValueViaCtrlHomeShortcutParams.UITextEditEdit8ValueAsString;
		}
		public void CheckChangedVerticalGridCellValueViaCtrlHomeShortcut()
		{
			#region Variable Declarations
			DXTextEdit uITextEditEdit8 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit8;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues.UITextEditEdit8ValueAsString, uITextEditEdit8.ValueAsString);
		}
		public void EditingVerticalGridCellValueViaArrowKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid;
			DXTextEdit uITextEditEdit9 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit9;
			DXTextEdit uITextEditEdit10 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UITextEditEdit10;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.EditingVerticalGridCellValueViaArrowKeysParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uITextEditEdit9.ValueAsString = this.EditingVerticalGridCellValueViaArrowKeysParams.UITextEditEdit9ValueAsString;
			Keyboard.SendKeys(uITextEditEdit10, this.EditingVerticalGridCellValueViaArrowKeysParams.UITextEditEdit10SendKeys, ModifierKeys.None);
		}
		public void CheckChangedVerticalGridCellValueViaArrowKeys()
		{
			#region Variable Declarations
			DXVerticalGridCell uIBuchan123anVerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowsNavigationCustom.UIVGridControl1VerticalGrid.UIRowLast_NameVerticalGridRow.UIBuchan123anVerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaArrowKeysExpectedValues.UIBuchan123anVerticalGridCellValueAsString, uIBuchan123anVerticalGridCell.ValueAsString);
		}
		public void SwitchToScrollVisibilityDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToScrollVisibilityDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void SwitchToHorizontalScrollVisibility()
		{
			#region Variable Declarations
			DXRadioGroup uIRadioGroup1RadioGroup = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIScrollVisibilitySampCustom.UIPanel2Client.UIRadioGroup1RadioGroup;
			#endregion
			uIRadioGroup1RadioGroup.SelectedIndex = this.SwitchToHorizontalScrollVisibilityParams.UIRadioGroup1RadioGroupSelectedIndex;
		}
		public void ScrollVerticalGridRecords()
		{
			#region Variable Declarations
			DXScrollBar uIVGridHorzScrollBarScrollBarControl = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIScrollVisibilitySampCustom.UIVGridControl1VerticalGrid.UIVGridHorzScrollBarScrollBarControl;
			#endregion
			uIVGridHorzScrollBarScrollBarControl.ValueAsString = this.ScrollVerticalGridRecordsParams.UIVGridHorzScrollBarScrollBarControlValueAsString;
		}
		public void ChangeVerticalGridCellValueAfterScrollingRecords()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIScrollVisibilitySampCustom.UIVGridControl1VerticalGrid;
			DXComboBox uIComboBoxEditComboBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIScrollVisibilitySampCustom.UIVGridControl1VerticalGrid.UIComboBoxEditComboBox;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellValueAfterScrollingRecordsParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIComboBoxEditComboBox.ValueAsString = this.ChangeVerticalGridCellValueAfterScrollingRecordsParams.UIComboBoxEditComboBoxValueAsString;
		}
		public void CheckChangedVerticalGridCellValueViaScrollingRecords()
		{
			#region Variable Declarations
			DXComboBox uIComboBoxEditComboBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIScrollVisibilitySampCustom.UIVGridControl1VerticalGrid.UIComboBoxEditComboBox;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues.UIComboBoxEditComboBoxValueAsString, uIComboBoxEditComboBox.ValueAsString);
		}
		public void SwitchVerticalGridLayoutStyleToBandsView()
		{
			#region Variable Declarations
			DXRadioGroup uIRadioGroup2RadioGroup = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIScrollVisibilitySampCustom.UIPanel2Client.UIRadioGroup2RadioGroup;
			#endregion
			uIRadioGroup2RadioGroup.SelectedIndex = this.SwitchVerticalGridLayoutStyleToBandsViewParams.UIRadioGroup2RadioGroupSelectedIndex;
		}
		public void SwitchVerticalGridLayoutStyleToSingleRecordView()
		{
			#region Variable Declarations
			DXRadioGroup uIRadioGroup2RadioGroup = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIScrollVisibilitySampCustom.UIPanel2Client.UIRadioGroup2RadioGroup;
			#endregion
			uIRadioGroup2RadioGroup.SelectedIndex = this.SwitchVerticalGridLayoutStyleToSingleRecordViewParams.UIRadioGroup2RadioGroupSelectedIndex;
		}
		public void SwitchToUnboundExpressionsDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIUnboundExpressionsAccordionControlItem = this.UIXtraVerticalGridFeatWindow1.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIMainAccordionControlGroup.UIUnboundExpressionsAccordionControlItem;
			#endregion
			Mouse.Click(uIUnboundExpressionsAccordionControlItem, new Point(0, 0));
		}
		public void CreateExpressionsViaExpressionsEditor()
		{
			#region Variable Declarations
			DXButton uIAddNewRowButton = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIPanelControl1Client.UIAddNewRowButton;
			DXListBox uIListOfInputTypesList = this.UIExpressioneditorWindow.UIListOfInputTypesList;
			DXListBox uIListOfInputParameterList = this.UIExpressioneditorWindow.UIListOfInputParameterList;
			#endregion
			Mouse.Click(uIAddNewRowButton, new Point(1, 1));
			uIListOfInputTypesList.SelectedIndicesAsString = this.CreateExpressionsViaExpressionsEditorParams.UIListOfInputTypesListSelectedIndicesAsString;
			uIListOfInputParameterList.SelectedIndicesAsString = this.CreateExpressionsViaExpressionsEditorParams.UIListOfInputParameterListSelectedIndicesAsString;
		}
		public void CheckAddedUnboundRow()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem26VerticalGridCell = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid.UIRow7VerticalGridRow.UIItem26VerticalGridCell;
			DXVerticalGridCell uIItem198VerticalGridCell = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid.UIRow7VerticalGridRow.UIItem198VerticalGridCell;
			DXVerticalGridRow uIRow7VerticalGridRow = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid.UIRow7VerticalGridRow;
			#endregion
			Assert.AreEqual(this.CheckAddedUnboundRowExpectedValues.UIItem26VerticalGridCellValueAsString, uIItem26VerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckAddedUnboundRowExpectedValues.UIItem198VerticalGridCellValueAsString, uIItem198VerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckAddedUnboundRowExpectedValues.UIRow7VerticalGridRowText, uIRow7VerticalGridRow.Text);
			Assert.AreEqual(this.CheckAddedUnboundRowExpectedValues.UIRow7VerticalGridRowParentName, uIRow7VerticalGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckAddedUnboundRowExpectedValues.UIRow7VerticalGridRowVisibleIndex, uIRow7VerticalGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckAddedUnboundRowExpectedValues.UIRow7VerticalGridRowStyle, uIRow7VerticalGridRow.Style);
			Assert.AreEqual(this.CheckAddedUnboundRowExpectedValues.UIRow7VerticalGridRowChildrenCount, uIRow7VerticalGridRow.ChildrenCount);
		}
		public void ChangeVerticalGridCellsValuesForCheckUnboundRowsChanges()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid;
			DXTextEdit uITextEditEdit = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid.UITextEditEdit;
			DXTextEdit uITextEditEdit1 = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid.UITextEditEdit1;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uITextEditEdit.ValueAsString = this.ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams.UITextEditEditValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams.UIVGridControl1VerticalGridFocusedCellAsString1;
			uITextEditEdit1.ValueAsString = this.ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams.UITextEditEdit1ValueAsString;
			Keyboard.SendKeys(uITextEditEdit1, this.ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams.UITextEditEdit1SendKeys, ModifierKeys.None);
		}
		public void CheckUnboundRowsChanges()
		{
			#region Variable Declarations
			DXVerticalGridCell uIItem392000VerticalGridCell = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid.UIRowTotalVerticalGridRow.UIItem392000VerticalGridCell;
			DXVerticalGridCell uIItem490000VerticalGridCell = this.UIXtraVerticalGridFeatWindow.UIPanelControl1Client.UIGcContainerClient.UIUnboundExpressionsCustom.UIVGridControl1VerticalGrid.UIRowTotalAmountVerticalGridRow.UIItem490000VerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckUnboundRowsChangesExpectedValues.UIItem392000VerticalGridCellValueAsString, uIItem392000VerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckUnboundRowsChangesExpectedValues.UIItem490000VerticalGridCellValueAsString, uIItem490000VerticalGridCell.ValueAsString);
		}
		public void SwitchToLayoutDemoModule()
		{
			#region Variable Declarations
			DXTestControl uILayoutAccordionControlItem = this.UIXtraVerticalGridFeatWindow2.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIMainAccordionControlGroup.UILayoutAccordionControlItem;
			#endregion
			Mouse.Click(uILayoutAccordionControlItem, new Point(0, 0));
		}
		public void SwitchToVerticalGridSimpleMode()
		{
			#region Variable Declarations
			DXTestControl uIXtraTabControlHeaderTabPage = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UIXtraTabControlHeaderTabPage;
			#endregion
			Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(38, 6));
		}
		public void ChangeVerticalGridCellsValuesInSimpleMode()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl2VerticalGrid = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid;
			DXTextEdit uITextEditEdit = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UITextEditEdit;
			DXTextEdit uITextEditEdit1 = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UITextEditEdit1;
			DXCheckBox uICheckEditCheckBox = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UICheckEditCheckBox;
			DXComboBox uIImageComboBoxEditComboBox = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIImageComboBoxEditComboBox;
			DXComboBox uIImageComboBoxEditComboBox1 = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIImageComboBoxEditComboBox1;
			DXVerticalGridCell uIItem12072012VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIEditorRow8VerticalGridRow.UIItem12072012VerticalGridCell;
			DXDateTimePicker uIDateEditDateTimeEdit = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIDateEditDateTimeEdit;
			DXVerticalGridCell uIItem5559561566VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIEditorRow6VerticalGridRow.UIItem5559561566VerticalGridCell;
			DXTextEdit uITextEditEdit2 = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UITextEditEdit2;
			DXComboBox uIImageComboBoxEditComboBox2 = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIImageComboBoxEditComboBox2;
			#endregion
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString;
			uITextEditEdit.ValueAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UITextEditEditValueAsString;
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString1;
			uITextEditEdit1.ValueAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UITextEditEdit1ValueAsString;
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString2;
			uICheckEditCheckBox.Checked = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UICheckEditCheckBoxChecked;
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString3;
			uIImageComboBoxEditComboBox.ValueAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIImageComboBoxEditComboBoxValueAsString;
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString4;
			uIImageComboBoxEditComboBox1.ValueTypeName = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIImageComboBoxEditComboBox1ValueTypeName;
			uIImageComboBoxEditComboBox1.ValueAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIImageComboBoxEditComboBox1ValueAsString;
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString5;
			Mouse.Click(uIItem12072012VerticalGridCell, new Point(193, 7));
			uIDateEditDateTimeEdit.ValueAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIDateEditDateTimeEditValueAsString;
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString6;
			Mouse.Click(uIItem5559561566VerticalGridCell, new Point(94, 7));
			uITextEditEdit2.ValueAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UITextEditEdit2ValueAsString;
			uIVGridControl2VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIVGridControl2VerticalGridFocusedCellAsString7;
			uIImageComboBoxEditComboBox2.ValueAsString = this.ChangeVerticalGridCellsValuesInSimpleModeParams.UIImageComboBoxEditComboBox2ValueAsString;
		}
		public void CheckChangedVerticalGridCellsValuesInSimpleMode()
		{
			#region Variable Declarations
			DXVerticalGridCell uIJohnTestVerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIMultiEditorRow1VerticalGridRow.UIJohnTestVerticalGridCell;
			DXVerticalGridCell uIDoeEnterprisesDXVerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIEditorRow2VerticalGridRow.UIDoeEnterprisesDXVerticalGridCell;
			DXVerticalGridCell uIUncheckedVerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIEditorRow3VerticalGridRow.UIUncheckedVerticalGridCell;
			DXVerticalGridCell uIUnknownVerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIEditorRow5VerticalGridRow.UIUnknownVerticalGridCell;
			DXVerticalGridCell uIHighVerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIMultiEditorRow2VerticalGridRow.UIHighVerticalGridCell;
			DXVerticalGridCell uIItem12072012VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIEditorRow8VerticalGridRow.UIItem12072012VerticalGridCell;
			DXVerticalGridCell uIItem5559561566VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIEditorRow6VerticalGridRow.UIItem5559561566VerticalGridCell;
			DXComboBox uIImageComboBoxEditComboBox2 = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage5Client.UIVGridControl2VerticalGrid.UIImageComboBoxEditComboBox2;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIJohnTestVerticalGridCellValueAsString, uIJohnTestVerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIDoeEnterprisesDXVerticalGridCellValueAsString, uIDoeEnterprisesDXVerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIUncheckedVerticalGridCellValueAsString, uIUncheckedVerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIUncheckedVerticalGridCellText, uIUncheckedVerticalGridCell.Text);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIUnknownVerticalGridCellText, uIUnknownVerticalGridCell.Text);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIUnknownVerticalGridCellValueAsString, uIUnknownVerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIHighVerticalGridCellText, uIHighVerticalGridCell.Text);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIItem12072012VerticalGridCellValueAsString, uIItem12072012VerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIItem5559561566VerticalGridCellValueAsString, uIItem5559561566VerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIImageComboBoxEditComboBox2ValueAsString, uIImageComboBoxEditComboBox2.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues.UIImageComboBoxEditComboBox2Text, uIImageComboBoxEditComboBox2.Text);
		}
		public void SwitchToVerticalGridDataBindingMode()
		{
			#region Variable Declarations
			DXTestControl uIXtraTabControlHeaderTabPage1 = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UIXtraTabControlHeaderTabPage1;
			#endregion
			Mouse.Click(uIXtraTabControlHeaderTabPage1, new Point(48, 11));
		}
		public void SwitchButtonModeToShowForFocusedRecord()
		{
			#region Variable Declarations
			DXCheckBox uIRadioButton9CheckBox = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UIPnlLeftClient.UIGroupBox3Client.UIRadioButton9CheckBox;
			#endregion
			uIRadioButton9CheckBox.Checked = this.SwitchButtonModeToShowForFocusedRecordParams.UIRadioButton9CheckBoxChecked;
		}
		public void ChangeVerticalGridCellsValuesInDataBindingMode()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid;
			DXComboBox uIImageComboBoxEditComboBox = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIImageComboBoxEditComboBox;
			DXTextEdit uISpinEditEdit = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UISpinEditEdit;
			DXVerticalGridCell uIItem1VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRowTransmiss_Speed_CVerticalGridRow.UIItem1VerticalGridCell;
			DXTextEdit uISpinEditEdit1 = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UISpinEditEdit1;
			DXRadioGroup uIRadioGroupRadioGroup = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRadioGroupRadioGroup;
			DXPopupEdit uICalcEditPopupEdit = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UICalcEditPopupEdit;
			DXDateTimePicker uIDateEditDateTimeEdit = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIDateEditDateTimeEdit;
			DXCheckBox uICheckCheckBox = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UICheckCheckBox;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIImageComboBoxEditComboBox.ValueAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIImageComboBoxEditComboBoxValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIVGridControl1VerticalGridFocusedCellAsString1;
			uISpinEditEdit.ValueAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UISpinEditEditValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIVGridControl1VerticalGridFocusedCellAsString2;
			Mouse.Click(uIItem1VerticalGridCell, new Point(80, 10));
			uISpinEditEdit1.ValueAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UISpinEditEdit1ValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIVGridControl1VerticalGridFocusedCellAsString3;
			uIRadioGroupRadioGroup.SelectedIndex = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIRadioGroupRadioGroupSelectedIndex;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIVGridControl1VerticalGridFocusedCellAsString4;
			uICalcEditPopupEdit.ValueAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UICalcEditPopupEditValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIVGridControl1VerticalGridFocusedCellAsString5;
			uIDateEditDateTimeEdit.ValueAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIDateEditDateTimeEditValueAsString;
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UIVGridControl1VerticalGridFocusedCellAsString6;
			uICheckCheckBox.Checked = this.ChangeVerticalGridCellsValuesInDataBindingModeParams.UICheckCheckBoxChecked;
		}
		public void CheckChangedVerticalGridCellsValuesInDataBindingMode()
		{
			#region Variable Declarations
			DXVerticalGridCell uITruckVerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRowCategoryVerticalGridRow.UITruckVerticalGridCell;
			DXVerticalGridCell uIItem12VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRowCylVerticalGridRow.UIItem12VerticalGridCell;
			DXVerticalGridCell uIItem1VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRowTransmiss_Speed_CVerticalGridRow.UIItem1VerticalGridCell;
			DXVerticalGridCell uINOVerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRowTransmiss_AutomatVerticalGridRow.UINOVerticalGridCell;
			DXVerticalGridCell uIItem560000VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRowPriceVerticalGridRow.UIItem560000VerticalGridCell;
			DXVerticalGridCell uIItem11072002VerticalGridCell = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UIRowDelivery_DateVerticalGridRow.UIItem11072002VerticalGridCell;
			DXCheckBox uICheckCheckBox = this.UIXtraVerticalGridFeatWindow2.UIPanelControl1Client.UIGcContainerClient.UILayoutCustom.UITcMainTabList.UITabPage1Client.UIVGridControl1VerticalGrid.UICheckCheckBox;
			#endregion
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues.UITruckVerticalGridCellValueAsString, uITruckVerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues.UIItem12VerticalGridCellValueAsString, uIItem12VerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues.UIItem1VerticalGridCellValueAsString, uIItem1VerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues.UINOVerticalGridCellValueAsString, uINOVerticalGridCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues.UIItem560000VerticalGridCellValueAsString, uIItem560000VerticalGridCell.ValueAsString);
			StringAssert.Contains(uIItem11072002VerticalGridCell.ValueAsString, this.CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues.UIItem11072002VerticalGridCellValueAsString);
			Assert.AreEqual(this.CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues.UICheckCheckBoxChecked, uICheckCheckBox.Checked);
		}
		public void SwitchToUnboundDataRowsDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIUnboundDataRowsAccordionControlItem = this.UIXtraVerticalGridFeatWindow3.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIMainAccordionControlGroup.UIUnboundDataRowsAccordionControlItem;
			#endregion
			Mouse.Click(uIUnboundDataRowsAccordionControlItem, new Point(0, 0));
		}
		public void ChangeVerticalGridFirstNameCellValueForCheckFullNameChanges()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UIXtraVerticalGridFeatWindow4.UIPanelControl1Client.UIGcContainerClient.UIUnboundFieldCustom.UIVGridControl1VerticalGrid;
			DXTextEdit uITextEditEdit = this.UIXtraVerticalGridFeatWindow4.UIPanelControl1Client.UIGcContainerClient.UIUnboundFieldCustom.UIVGridControl1VerticalGrid.UITextEditEdit;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uITextEditEdit.ValueAsString = this.ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CheckFullNameValueAfterChangingFirstNameCellValue()
		{
			#region Variable Declarations
			DXVerticalGridCell uINancyTestDavolioVerticalGridCell = this.UIXtraVerticalGridFeatWindow4.UIPanelControl1Client.UIGcContainerClient.UIUnboundFieldCustom.UIVGridControl1VerticalGrid.UIRow13VerticalGridRow.UINancyTestDavolioVerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckFullNameValueAfterChangingFirstNameCellValueExpectedValues.UINancyTestDavolioVerticalGridCellValueAsString, uINancyTestDavolioVerticalGridCell.ValueAsString);
		}
		public void ChangeFullNameFormat()
		{
			#region Variable Declarations
			DXComboBox uICbNameOrderComboBox = this.UIXtraVerticalGridFeatWindow4.UIPanelControl1Client.UIGcContainerClient.UIUnboundFieldCustom.UIPanelControl1Client.UICbNameOrderComboBox;
			#endregion
			uICbNameOrderComboBox.ValueAsString = this.ChangeFullNameFormatParams.UICbNameOrderComboBoxValueAsString;
		}
		public void CheckFullNameValue()
		{
			#region Variable Declarations
			DXVerticalGridCell uINancyTestDavolioVerticalGridCell = this.UIXtraVerticalGridFeatWindow4.UIPanelControl1Client.UIGcContainerClient.UIUnboundFieldCustom.UIVGridControl1VerticalGrid.UIRow13VerticalGridRow.UINancyTestDavolioVerticalGridCell;
			#endregion
			Assert.AreEqual(this.CheckFullNameValueExpectedValues.UINancyTestDavolioVerticalGridCellValueAsString, uINancyTestDavolioVerticalGridCell.ValueAsString);
		}
		public void SwitchToPropertyGridDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIPropertyGridAccordionControlItem = this.UIXtraVerticalGridFeatWindow1.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIMainAccordionControlGroup.UIPropertyGridAccordionControlItem;
			#endregion
			Mouse.Click(uIPropertyGridAccordionControlItem, new Point(0, 0));
		}
		public void CollapsePropertyGridCategoryRowViaClickExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIPropertyGridExpandBuPropertyGridExpandButton = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow.UIPropertyGridExpandBuPropertyGridExpandButton;
			#endregion
			Mouse.Click(uIPropertyGridExpandBuPropertyGridExpandButton, new Point(4, 4));
		}
		public void CheckPropertyGridCategoryRowCollapsedState()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridCategoryRowCollapsedStateExpectedValues.UICategoryAppearancePropertyGridCategoryRowExpanded, uICategoryAppearancePropertyGridCategoryRow.Expanded);
		}
		public void ExpandPropertyGridCategoryRowViaClickExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIPropertyGridExpandBuPropertyGridExpandButton = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow.UIPropertyGridExpandBuPropertyGridExpandButton;
			#endregion
			Mouse.Click(uIPropertyGridExpandBuPropertyGridExpandButton, new Point(4, 1));
		}
		public void CheckPropertyGridCategoryRowExpandedState()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridCategoryRowExpandedStateExpectedValues.UICategoryAppearancePropertyGridCategoryRowExpanded, uICategoryAppearancePropertyGridCategoryRow.Expanded);
		}
		public void CollapsePropertyGridCategoryRowViaDoubleClickHeaderCell()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryAppearancePropertyGridRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.CollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryAppearancePropertyGridRow.Expanded = this.CollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams.UICategoryAppearancePropertyGridRowExpanded;
		}
		public void CollapsePropertyGridCategoryRowViaDoubleClick()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.CollapsePropertyGridCategoryRowViaDoubleClickParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryAppearancePropertyGridCategoryRow.Expanded = this.CollapsePropertyGridCategoryRowViaDoubleClickParams.UICategoryAppearancePropertyGridCategoryRowExpanded;
		}
		public void ExpandPropertyGridCategoryRowViaDoubleClick()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ExpandPropertyGridCategoryRowViaDoubleClickParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryAppearancePropertyGridCategoryRow.Expanded = this.ExpandPropertyGridCategoryRowViaDoubleClickParams.UICategoryAppearancePropertyGridCategoryRowExpanded;
		}
		public void CollapsePropertyGridCategoryRowViaMinusKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridHeaderCell uIAppearancePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow.UIAppearancePropertyGridHeaderCell;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.CollapsePropertyGridCategoryRowViaMinusKeyParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIAppearancePropertyGridHeaderCell, new Point(72, 9));
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.CollapsePropertyGridCategoryRowViaMinusKeyParams.UIPropertyGridControl1PropertyGridSendKeys, ModifierKeys.None);
		}
		public void ExpandPropertyGridCategoryRowViaPlusKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridHeaderCell uIAppearancePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow.UIAppearancePropertyGridHeaderCell;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ExpandPropertyGridCategoryRowViaPlusKeyParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIAppearancePropertyGridHeaderCell, new Point(76, 8));
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ExpandPropertyGridCategoryRowViaPlusKeyParams.UIPropertyGridControl1PropertyGridSendKeys, ModifierKeys.None);
		}
		public void ExpandPropertyGridRowViaClickExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIPropertyGridExpandBuPropertyGridExpandButton = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow.UIPropertyGridExpandBuPropertyGridExpandButton;
			#endregion
			Mouse.Click(uIPropertyGridExpandBuPropertyGridExpandButton, new Point(7, 4));
		}
		public void CheckPropertyGridRowExpandedState()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowExpandedStateExpectedValues.UIRowFontPropertyGridRowExpanded, uIRowFontPropertyGridRow.Expanded);
		}
		public void CollapsePropertyGridRowViaClickExpandButton()
		{
			#region Variable Declarations
			DXTestControl uIPropertyGridExpandBuPropertyGridExpandButton = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow.UIPropertyGridExpandBuPropertyGridExpandButton;
			#endregion
			Mouse.Click(uIPropertyGridExpandBuPropertyGridExpandButton, new Point(6, 6));
		}
		public void CheckPropertyGridRowCollapsedState()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowCollapsedStateExpectedValues.UIRowFontPropertyGridRowExpanded, uIRowFontPropertyGridRow.Expanded);
		}
		public void ExpandPropertyGridRowViaDoubleClick()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ExpandPropertyGridRowViaDoubleClickParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowFontPropertyGridRow.Expanded = this.ExpandPropertyGridRowViaDoubleClickParams.UIRowFontPropertyGridRowExpanded;
		}
		public void CollapsePropertyGridRowViaDoubleClickHeaderCell()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.CollapsePropertyGridRowViaDoubleClickHeaderCellParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowFontPropertyGridRow.Expanded = this.CollapsePropertyGridRowViaDoubleClickHeaderCellParams.UIRowFontPropertyGridRowExpanded;
		}
		public void ExpandPropertyGridRowViaPlusKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridHeaderCell uIFontPropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow.UIFontPropertyGridHeaderCell;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ExpandPropertyGridRowViaPlusKeyParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIFontPropertyGridHeaderCell, new Point(15, 5));
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ExpandPropertyGridRowViaPlusKeyParams.UIPropertyGridControl1PropertyGridSendKeys, ModifierKeys.None);
		}
		public void CollapsePropertyGridRowViaMinusKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.CollapsePropertyGridRowViaMinusKeyParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIRowFontPropertyGridRow, new Point(4, 7));
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.CollapsePropertyGridRowViaMinusKeyParams.UIPropertyGridControl1PropertyGridSendKeys, ModifierKeys.None);
		}
		public void ChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdge()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			#endregion
			uIPropertyGridControl1PropertyGrid.RowHeaderWidth = this.ChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams.UIPropertyGridControl1PropertyGridRowHeaderWidth;
		}
		public void CheckPropertyGridRowHeaderWidth()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowHeaderWidthExpectedValues.UIPropertyGridControl1PropertyGridRowHeaderWidth, uIPropertyGridControl1PropertyGrid.RowHeaderWidth);
		}
		public void ChangePropertyGridRowHeaderHeightViaCTRLLeftKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridHeaderCell uIBorderStylePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow.UIBorderStylePropertyGridHeaderCell;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIBorderStylePropertyGridHeaderCell, new Point(72, 13));
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys1, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys2, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys3, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys4, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys5, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys6, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys7, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys8, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys9, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys10, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams.UIPropertyGridControl1PropertyGridSendKeys11, ModifierKeys.Control);
		}
		public void CheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues.UIPropertyGridControl1PropertyGridRowHeaderWidth, uIPropertyGridControl1PropertyGrid.RowHeaderWidth);
		}
		public void ChangePropertyGridRowHeaderHeightViaCTRLRightKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridHeaderCell uIBorderStylePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow.UIBorderStylePropertyGridHeaderCell;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIBorderStylePropertyGridHeaderCell, new Point(57, 7));
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys1, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys2, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys3, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys4, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys5, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys6, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys7, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys8, ModifierKeys.Control);
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams.UIPropertyGridControl1PropertyGridSendKeys9, ModifierKeys.Control);
		}
		public void CheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeys()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues.UIPropertyGridControl1PropertyGridRowHeaderWidth, uIPropertyGridControl1PropertyGrid.RowHeaderWidth);
		}
		public void SwitchToFixedRowsDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIFixedRowsAccordionControlItem = this.UIXtraVerticalGridFeatWindow1.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIMainAccordionControlGroup.UIFixedRowsAccordionControlItem;
			#endregion
			Mouse.Click(uIFixedRowsAccordionControlItem, new Point(0, 0));
		}
		public void ChangePropertyGridRowHeightViaDraggingRowEdge()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			uIRowFontPropertyGridRow.RowHeight = this.ChangePropertyGridRowHeightViaDraggingRowEdgeParams.UIRowFontPropertyGridRowRowHeight;
		}
		public void CheckPropertyGridRowHeight()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowHeightExpectedValues.UIRowFontPropertyGridRowVisibleIndex, uIRowFontPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridRowHeightExpectedValues.UIRowFontPropertyGridRowRowHeight, uIRowFontPropertyGridRow.RowHeight);
		}
		public void ChangePropertyGridCategoryRowHeightViaDraggingRowEdge()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryAppearancePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow;
			#endregion
			uICategoryAppearancePropertyGridRow.RowHeight = this.ChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams.UICategoryAppearancePropertyGridRowRowHeight;
		}
		public void CheckPropertyGridCategoryRowHeight()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridCategoryRowHeightExpectedValues.UICategoryAppearancePropertyGridCategoryRowRowHeight, uICategoryAppearancePropertyGridCategoryRow.RowHeight);
		}
		public void ChangePropertyGridFixedRowHeightViaDraggingRowEdge()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowProperties_PicturPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowProperties_PicturPropertyGridRow;
			#endregion
			uIRowProperties_PicturPropertyGridRow.RowHeight = this.ChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams.UIRowProperties_PicturPropertyGridRowRowHeight;
		}
		public void CheckPropertyGridFixedRowHeight()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowProperties_PicturPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowProperties_PicturPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridFixedRowHeightExpectedValues.UIRowProperties_PicturPropertyGridRowRowHeight, uIRowProperties_PicturPropertyGridRow.RowHeight);
		}
		public void ChangePropertyGridCellValueViaArrowKeysAndEnterKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridHeaderCell uIAppearancePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow.UIAppearancePropertyGridHeaderCell;
			DXPopupEdit uIPGPopupContainerEditPopupEdit = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIPGPopupContainerEditPopupEdit;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIAppearancePropertyGridHeaderCell, new Point(171, 4));
			Keyboard.SendKeys(uIPropertyGridControl1PropertyGrid, this.ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams.UIPropertyGridControl1PropertyGridSendKeys, ModifierKeys.None);
			uIPGPopupContainerEditPopupEdit.ValueAsString = this.ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams.UIPGPopupContainerEditPopupEditValueAsString;
			Keyboard.SendKeys(uIPGPopupContainerEditPopupEdit, this.ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams.UIPGPopupContainerEditPopupEditSendKeys, ModifierKeys.None);
		}
		public void CheckChangedPropertyGridCellValueViaArrowKeys()
		{
			#region Variable Declarations
			DXVerticalGridCell uITestPropertyGridCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowToolTipPropertyGridRow.UITestPropertyGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedPropertyGridCellValueViaArrowKeysExpectedValues.UITestPropertyGridCellValueAsString, uITestPropertyGridCell.ValueAsString);
		}
		public void CheckChangedPropertyGridCellValueViaEscKey()
		{
			#region Variable Declarations
			DXVerticalGridCell uIWhitePropertyGridCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowBackColorPropertyGridRow.UIWhitePropertyGridCell;
			#endregion
			Assert.AreEqual(this.CheckChangedPropertyGridCellValueViaEscKeyExpectedValues.UIWhitePropertyGridCellValueAsString, uIWhitePropertyGridCell.ValueAsString);
		}
		public void ChangePropertyDescriptionControlValueViaChangingFocusedRow()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridHeaderCell uIUseWaitCursorPropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowUseWaitCursorPropertyGridRow.UIUseWaitCursorPropertyGridHeaderCell;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ChangePropertyDescriptionControlValueViaChangingFocusedRowParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIUseWaitCursorPropertyGridHeaderCell, new Point(50, 0));
		}
		public void CheckPropertyDescriptionControlProperties()
		{
			#region Variable Declarations
			DXTestControl uIPropertyGridControl1PropertyDescriptionControl = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyDescriptionControl;
			#endregion
			Assert.AreEqual(this.CheckPropertyDescriptionControlPropertiesExpectedValues.UIPropertyGridControl1PropertyDescriptionControlText, uIPropertyGridControl1PropertyDescriptionControl.Text);
			Assert.AreEqual(this.CheckPropertyDescriptionControlPropertiesExpectedValues.UIPropertyGridControl1PropertyDescriptionControlParentName, uIPropertyGridControl1PropertyDescriptionControl.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyDescriptionControlPropertiesExpectedValues.UIPropertyGridControl1PropertyDescriptionControlDisplayedProperty, uIPropertyGridControl1PropertyDescriptionControl.GetProperty(DXTestControl.PropertyNames.DisplayedProperty).ToString());
		}
		public void MakePropertyGridCategoryRowFixedTop()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIBarManagerPropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridRow.UIBarManagerPropertyGridHeaderCell;
			DXMenuBaseButtonItem uIFixedTopMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedTopMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIBarManagerPropertyGridHeaderCell, MouseButtons.Right, ModifierKeys.None, new Point(43, 11));
			Mouse.Click(uIFixedTopMenuBaseButtonItem, new Point(40, 11));
		}
		public void CheckPropertyGridCategoryRowFixedTopState()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryBarManagerPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridCategoryRow;
			DXVerticalGridRow uIRowMenuManagerPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowMenuManagerPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowText, uICategoryBarManagerPropertyGridCategoryRow.Text);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowExpanded, uICategoryBarManagerPropertyGridCategoryRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowParentName, uICategoryBarManagerPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowVisibleIndex, uICategoryBarManagerPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowFixed, uICategoryBarManagerPropertyGridCategoryRow.Fixed);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UIRowMenuManagerPropertyGridRowText, uIRowMenuManagerPropertyGridRow.Text);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UIRowMenuManagerPropertyGridRowExpanded, uIRowMenuManagerPropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UIRowMenuManagerPropertyGridRowParentName, uIRowMenuManagerPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UIRowMenuManagerPropertyGridRowVisibleIndex, uIRowMenuManagerPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedTopStateExpectedValues.UIRowMenuManagerPropertyGridRowFixed, uIRowMenuManagerPropertyGridRow.Fixed);
		}
		public void MakePropertyGridCategoryRowFixedBottom()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIBarManagerPropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridRow.UIBarManagerPropertyGridHeaderCell;
			DXMenuBaseButtonItem uIFixedBottomMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedBottomMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIBarManagerPropertyGridHeaderCell, MouseButtons.Right, ModifierKeys.None, new Point(34, 10));
			Mouse.Click(uIFixedBottomMenuBaseButtonItem, new Point(37, 4));
		}
		public void CheckPropertyGridCategoryRowFixedBottomState()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryBarManagerPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridCategoryRow;
			DXVerticalGridRow uIRowMenuManagerPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowMenuManagerPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowExpanded, uICategoryBarManagerPropertyGridCategoryRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowParentName, uICategoryBarManagerPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowVisibleIndex, uICategoryBarManagerPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowChildrenCount, uICategoryBarManagerPropertyGridCategoryRow.ChildrenCount);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UICategoryBarManagerPropertyGridCategoryRowFixed, uICategoryBarManagerPropertyGridCategoryRow.Fixed);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UIRowMenuManagerPropertyGridRowExpanded, uIRowMenuManagerPropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UIRowMenuManagerPropertyGridRowParentName, uIRowMenuManagerPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UIRowMenuManagerPropertyGridRowVisibleIndex, uIRowMenuManagerPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowFixedBottomStateExpectedValues.UIRowMenuManagerPropertyGridRowFixed, uIRowMenuManagerPropertyGridRow.Fixed);
		}
		public void MakePropertyGridFixedRowNotFixed()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIImagePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowImagePropertyGridRow.UIImagePropertyGridHeaderCell;
			DXMenuBaseButtonItem uINotFixedMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UINotFixedMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIImagePropertyGridHeaderCell, MouseButtons.Right, ModifierKeys.None, new Point(65, 28));
			Mouse.Click(uINotFixedMenuBaseButtonItem, new Point(49, 13));
		}
		public void CheckPropertyGridRowNotFixedState()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowImagePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowImagePropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowNotFixedStateExpectedValues.UIRowImagePropertyGridRowExpanded, uIRowImagePropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridRowNotFixedStateExpectedValues.UIRowImagePropertyGridRowParentName, uIRowImagePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridRowNotFixedStateExpectedValues.UIRowImagePropertyGridRowVisibleIndex, uIRowImagePropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridRowNotFixedStateExpectedValues.UIRowImagePropertyGridRowChildrenCount, uIRowImagePropertyGridRow.ChildrenCount);
			Assert.AreEqual(this.CheckPropertyGridRowNotFixedStateExpectedValues.UIRowImagePropertyGridRowFixed, uIRowImagePropertyGridRow.Fixed);
		}
		public void ResetPropertyGridFixedRows()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIImagePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowImagePropertyGridRow.UIImagePropertyGridHeaderCell;
			DXMenuBaseButtonItem uIResetMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIResetMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIImagePropertyGridHeaderCell, MouseButtons.Right, ModifierKeys.None, new Point(71, 29));
			Mouse.Click(uIResetMenuBaseButtonItem, new Point(14, 11));
		}
		public void CheckPropertyGridFixedRowsAfterReset()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowImagePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowImagePropertyGridRow;
			DXVerticalGridRow uIRowProperties_PicturPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowProperties_PicturPropertyGridRow;
			DXVerticalGridRow uIRowProperties_SizeMoPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowProperties_SizeMoPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowImagePropertyGridRowExpanded, uIRowImagePropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowImagePropertyGridRowParentName, uIRowImagePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowImagePropertyGridRowVisibleIndex, uIRowImagePropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowImagePropertyGridRowFixed, uIRowImagePropertyGridRow.Fixed);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_PicturPropertyGridRowExpanded, uIRowProperties_PicturPropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_PicturPropertyGridRowParentName, uIRowProperties_PicturPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_PicturPropertyGridRowVisibleIndex, uIRowProperties_PicturPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_PicturPropertyGridRowFixed, uIRowProperties_PicturPropertyGridRow.Fixed);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_SizeMoPropertyGridRowExpanded, uIRowProperties_SizeMoPropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_SizeMoPropertyGridRowParentName, uIRowProperties_SizeMoPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_SizeMoPropertyGridRowVisibleIndex, uIRowProperties_SizeMoPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridFixedRowsAfterResetExpectedValues.UIRowProperties_SizeMoPropertyGridRowFixed, uIRowProperties_SizeMoPropertyGridRow.Fixed);
		}
		public void MakePropertyGridFixedTopRowFixedBottom()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIPictureAlignmentPropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowProperties_PicturPropertyGridRow.UIPictureAlignmentPropertyGridHeaderCell;
			DXMenuBaseButtonItem uIFixedBottomMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedBottomMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIPictureAlignmentPropertyGridHeaderCell, MouseButtons.Right, ModifierKeys.None, new Point(91, 9));
			Mouse.Click(uIFixedBottomMenuBaseButtonItem, new Point(59, 11));
		}
		public void CheckPropertyGridRowFixedBottomState()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowProperties_PicturPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowProperties_PicturPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowFixedBottomStateExpectedValues.UIRowProperties_PicturPropertyGridRowExpanded, uIRowProperties_PicturPropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridRowFixedBottomStateExpectedValues.UIRowProperties_PicturPropertyGridRowParentName, uIRowProperties_PicturPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridRowFixedBottomStateExpectedValues.UIRowProperties_PicturPropertyGridRowVisibleIndex, uIRowProperties_PicturPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridRowFixedBottomStateExpectedValues.UIRowProperties_PicturPropertyGridRowFixed, uIRowProperties_PicturPropertyGridRow.Fixed);
		}
		public void AllowFixingNestedRows()
		{
			#region Variable Declarations
			DXCheckBox uICheAllowFixingNestedCheckBox = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPanelControl1Client.UICheAllowFixingNestedCheckBox;
			#endregion
			uICheAllowFixingNestedCheckBox.Checked = this.AllowFixingNestedRowsParams.UICheAllowFixingNestedCheckBoxChecked;
		}
		public void MakePropertyGridRowFixedTop()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIBorderStylePropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow.UIBorderStylePropertyGridHeaderCell;
			DXMenuBaseButtonItem uIFixedTopMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedTopMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIBorderStylePropertyGridHeaderCell, MouseButtons.Right, ModifierKeys.None, new Point(65, 10));
			Mouse.Click(uIFixedTopMenuBaseButtonItem, new Point(66, 12));
		}
		public void CheckPropertyGridNestedRowFixedTopState()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowBorderStylePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedTopStateExpectedValues.UIRowBorderStylePropertyGridRowExpanded, uIRowBorderStylePropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedTopStateExpectedValues.UIRowBorderStylePropertyGridRowParentName, uIRowBorderStylePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedTopStateExpectedValues.UIRowBorderStylePropertyGridRowVisibleIndex, uIRowBorderStylePropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedTopStateExpectedValues.UIRowBorderStylePropertyGridRowFixed, uIRowBorderStylePropertyGridRow.Fixed);
		}
		public void MakePropertyGridRowFixedBottom()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIFontPropertyGridHeaderCell = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow.UIFontPropertyGridHeaderCell;
			DXMenuBaseButtonItem uIFixedBottomMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedBottomMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIFontPropertyGridHeaderCell, MouseButtons.Right, ModifierKeys.None, new Point(31, 10));
			Mouse.Click(uIFixedBottomMenuBaseButtonItem, new Point(42, 1));
		}
		public void CheckPropertyGridNestedRowFixedBottomState()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedBottomStateExpectedValues.UIRowFontPropertyGridRowExpanded, uIRowFontPropertyGridRow.Expanded);
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedBottomStateExpectedValues.UIRowFontPropertyGridRowParentName, uIRowFontPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedBottomStateExpectedValues.UIRowFontPropertyGridRowVisibleIndex, uIRowFontPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckPropertyGridNestedRowFixedBottomStateExpectedValues.UIRowFontPropertyGridRowFixed, uIRowFontPropertyGridRow.Fixed);
		}
		public void CollapseTreeListNodeViaClickExpandButton()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1;
			#endregion
			uINode0TreeListNode1.Expanded = this.CollapseTreeListNodeViaClickExpandButtonParams.UINode0TreeListNode1Expanded;
		}
		public void CheckNodeCollapsedState()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1;
			#endregion
			Assert.AreEqual(this.CheckNodeCollapsedStateExpectedValues.UINode0TreeListNode1Expanded, uINode0TreeListNode1.Expanded);
		}
		public void SwitchToColumnAlignmentDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToColumnAlignmentDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ExpandTreeListNodeViaClickExpandButton()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1;
			#endregion
			uINode0TreeListNode1.Expanded = this.ExpandTreeListNodeViaClickExpandButtonParams.UINode0TreeListNode1Expanded;
		}
		public void CheckNodeExpandedState()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1;
			#endregion
			Assert.AreEqual(this.CheckNodeExpandedStateExpectedValues.UINode0TreeListNode1Expanded, uINode0TreeListNode1.Expanded);
		}
		public void CollapseTreeListNodeViaDoubleClick()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeSelectImage;
			#endregion
			Mouse.DoubleClick(uINode0TreeListNodeSelectImage, new Point(15, 9));
		}
		public void ExpandTreeListNodeViaDoubleClick()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeSelectImage;
			#endregion
			Mouse.DoubleClick(uINode0TreeListNodeSelectImage, new Point(13, 9));
		}
		public void CollapseTreeListNodeViaCtrlAndLeftArrowKeys()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uINode0TreeListNodeSelectImage, new Point(9, 12));
			Keyboard.SendKeys(uITreeList1TreeList, this.CollapseTreeListNodeViaCtrlAndLeftArrowKeysParams.UITreeList1TreeListSendKeys, ModifierKeys.Control);
		}
		public void ExpandTreeListNodeViaCtrlAndRightArrowKeys()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uINode0TreeListNodeSelectImage, new Point(8, 7));
			Keyboard.SendKeys(uITreeList1TreeList, this.ExpandTreeListNodeViaCtrlAndRightArrowKeysParams.UITreeList1TreeListSendKeys, ModifierKeys.Control);
		}
		public void CollapseTreeListNodeViaMinusKey()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uINode0TreeListNodeSelectImage, new Point(9, 11));
			Keyboard.SendKeys(uITreeList1TreeList, this.CollapseTreeListNodeViaMinusKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
		}
		public void ExpandTreeListNodeViaPlusKey()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uINode0TreeListNodeSelectImage, new Point(11, 9));
			Keyboard.SendKeys(uITreeList1TreeList, this.ExpandTreeListNodeViaPlusKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
		}
		public void CollapseTreeListNodeViaDoubleClickRowIndicator()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListRowIndicator = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListRowIndicator;
			#endregion
			Mouse.DoubleClick(uINode0TreeListRowIndicator, new Point(8, 10));
		}
		public void ExpandTreeListNodeViaDoubleClickRowIndicator()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListRowIndicator = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnAlignmentCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListRowIndicator;
			#endregion
			Mouse.DoubleClick(uINode0TreeListRowIndicator, new Point(8, 9));
		}
		public void SwitchToColumnCustomizationDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToColumnCustomizationDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ReorderColumnsViaDragging()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICommonNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader;
			DXTreeListColumnHeader uISpeciesNoTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UISpeciesNoTreeListColumnHeader;
			DXTreeListColumnHeader uISpeciesNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UISpeciesNameTreeListColumnHeader;
			#endregion
			uICommonNameTreeListColumnHeader.VisibleIndex = this.ReorderColumnsViaDraggingParams.UICommonNameTreeListColumnHeaderVisibleIndex;
			uISpeciesNoTreeListColumnHeader.VisibleIndex = this.ReorderColumnsViaDraggingParams.UISpeciesNoTreeListColumnHeaderVisibleIndex;
			uISpeciesNameTreeListColumnHeader.VisibleIndex = this.ReorderColumnsViaDraggingParams.UISpeciesNameTreeListColumnHeaderVisibleIndex;
		}
		public void CheckColumnsPositionsAfterReordering()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICommonNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader;
			DXTreeListColumnHeader uILengthcmTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UILengthcmTreeListColumnHeader;
			DXTreeListColumnHeader uISpeciesNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UISpeciesNameTreeListColumnHeader;
			DXTreeListColumnHeader uICategoryTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UICategoryTreeListColumnHeader;
			DXTreeListColumnHeader uISpeciesNoTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UISpeciesNoTreeListColumnHeader;
			#endregion
			Assert.AreEqual(this.CheckColumnsPositionsAfterReorderingExpectedValues.UICommonNameTreeListColumnHeaderVisibleIndex, uICommonNameTreeListColumnHeader.VisibleIndex);
			Assert.AreEqual(this.CheckColumnsPositionsAfterReorderingExpectedValues.UILengthcmTreeListColumnHeaderVisibleIndex, uILengthcmTreeListColumnHeader.VisibleIndex);
			Assert.AreEqual(this.CheckColumnsPositionsAfterReorderingExpectedValues.UISpeciesNameTreeListColumnHeaderVisibleIndex, uISpeciesNameTreeListColumnHeader.VisibleIndex);
			Assert.AreEqual(this.CheckColumnsPositionsAfterReorderingExpectedValues.UICategoryTreeListColumnHeaderVisibleIndex, uICategoryTreeListColumnHeader.VisibleIndex);
			Assert.AreEqual(this.CheckColumnsPositionsAfterReorderingExpectedValues.UISpeciesNoTreeListColumnHeaderVisibleIndex, uISpeciesNoTreeListColumnHeader.VisibleIndex);
		}
		public void DeleteColumnsViaDragging()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uILengthcmTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UILengthcmTreeListColumnHeader;
			DXTreeListColumnHeader uICategoryTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UICategoryTreeListColumnHeader;
			DXTreeListColumnHeader uISpeciesNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UISpeciesNameTreeListColumnHeader;
			#endregion
			uILengthcmTreeListColumnHeader.VisibleIndex = this.DeleteColumnsViaDraggingParams.UILengthcmTreeListColumnHeaderVisibleIndex;
			uICategoryTreeListColumnHeader.VisibleIndex = this.DeleteColumnsViaDraggingParams.UICategoryTreeListColumnHeaderVisibleIndex;
			uISpeciesNameTreeListColumnHeader.VisibleIndex = this.DeleteColumnsViaDraggingParams.UISpeciesNameTreeListColumnHeaderVisibleIndex;
		}
		public void CheckDeletedColumnViaDragging()
		{
			#region Variable Declarations
			DXTestControl uICategoryCustom = this.UICustomizationWindow.UITreeListCustomizatioList.UICategoryCustom;
			DXTestControl uILengthcmCustom = this.UICustomizationWindow.UITreeListCustomizatioList.UILengthcmCustom;
			DXTestControl uISpeciesNameCustom = this.UICustomizationWindow.UITreeListCustomizatioList.UISpeciesNameCustom;
			#endregion
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UICategoryCustomText, uICategoryCustom.Text);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UICategoryCustomVisibleIndex, uICategoryCustom.VisibleIndex);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UICategoryCustomColumnName, uICategoryCustom.ColumnName);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UICategoryCustomIndex, uICategoryCustom.Index);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UILengthcmCustomText, uILengthcmCustom.Text);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UILengthcmCustomVisibleIndex, uILengthcmCustom.VisibleIndex);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UILengthcmCustomColumnName, uILengthcmCustom.ColumnName);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UILengthcmCustomIndex, uILengthcmCustom.Index);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UISpeciesNameCustomText, uISpeciesNameCustom.Text);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UISpeciesNameCustomVisibleIndex, uISpeciesNameCustom.VisibleIndex);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UISpeciesNameCustomColumnName, uISpeciesNameCustom.ColumnName);
			Assert.AreEqual(this.CheckDeletedColumnViaDraggingExpectedValues.UISpeciesNameCustomIndex, uISpeciesNameCustom.Index);
		}
		public void DragColumnFromCustomizationForm()
		{
			#region Variable Declarations
			DXTestControl uILengthcmCustom = this.UICustomizationWindow.UITreeListCustomizatioList.UILengthcmCustom;
			DXTestControl uIMarkCustom = this.UICustomizationWindow.UITreeListCustomizatioList.UIMarkCustom;
			#endregion
			uILengthcmCustom.VisibleIndex = this.DragColumnFromCustomizationFormParams.UILengthcmCustomVisibleIndex;
			uIMarkCustom.VisibleIndex = this.DragColumnFromCustomizationFormParams.UIMarkCustomVisibleIndex;
		}
		public void CheckColumnsPositionsAfterDraggingFromCustomizationForm()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uISpeciesNoTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UISpeciesNoTreeListColumnHeader;
			DXTreeListColumnHeader uIMarkTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UIMarkTreeListColumnHeader;
			DXTreeListColumnHeader uICommonNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader;
			DXTreeListColumnHeader uILengthcmTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnCustomizationCustom.UITreeList1TreeList.UILengthcmTreeListColumnHeader;
			#endregion
			Assert.AreEqual(this.CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues.UISpeciesNoTreeListColumnHeaderVisibleIndex, uISpeciesNoTreeListColumnHeader.VisibleIndex);
			Assert.AreEqual(this.CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues.UIMarkTreeListColumnHeaderVisibleIndex, uIMarkTreeListColumnHeader.VisibleIndex);
			Assert.AreEqual(this.CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues.UICommonNameTreeListColumnHeaderVisibleIndex, uICommonNameTreeListColumnHeader.VisibleIndex);
			Assert.AreEqual(this.CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues.UILengthcmTreeListColumnHeaderVisibleIndex, uILengthcmTreeListColumnHeader.VisibleIndex);
		}
		public void SwitchToTreeListDragAndDropDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToTreeListDragAndDropDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void DragNodesToDragAndDropArea()
		{
			#region Variable Declarations
			DXTreeListCell uIFieldOfficeEastCoastTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode.UIFieldOfficeEastCoastTreeListCell;
			DXListBox uIListBox1List = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List;
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode.UINode0TreeListNodeSelectImage;
			DXTreeListCell uIFinanceTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UIFinanceTreeListCell;
			#endregion
			uIListBox1List.EnsureClickable(new Point(34, 51));
			Mouse.StartDragging(uIFieldOfficeEastCoastTreeListCell, new Point(30, 6));
			Mouse.StopDragging(uIListBox1List, new Point(34, 51));
			uIListBox1List.EnsureClickable(new Point(51, 76));
			Mouse.StartDragging(uINode0TreeListNodeSelectImage, new Point(8, 9));
			Mouse.StopDragging(uIListBox1List, new Point(51, 76));
			uIListBox1List.EnsureClickable(new Point(78, 65));
			Mouse.StartDragging(uIFinanceTreeListCell, new Point(8, 7));
			Mouse.StopDragging(uIListBox1List, new Point(78, 65));
		}
		public void DisableDragNodesOption()
		{
			#region Variable Declarations
			DXCheckBox uICheckBox1CheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UICheckBox1CheckBox;
			#endregion
			uICheckBox1CheckBox.Checked = this.DisableDragNodesOptionParams.UICheckBox1CheckBoxChecked;
		}
		public void CheckEmptyDragAndDropListBox()
		{
			#region Variable Declarations
			DXListBox uIListBox1List = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List;
			#endregion
			Assert.AreEqual(this.CheckEmptyDragAndDropListBoxExpectedValues.UIListBox1ListSelectedItemsAsString, uIListBox1List.GetProperty(DXTestControl.PropertyNames.SelectedItemsAsString).ToString());
			Assert.AreEqual(this.CheckEmptyDragAndDropListBoxExpectedValues.UIListBox1ListSelectedIndicesAsString, uIListBox1List.SelectedIndicesAsString);
		}
		public void DragNodeWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode0TreeListNode.UINode0TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList;
			#endregion
			uITreeList1TreeList.EnsureClickable(new Point(68, 74));
			Mouse.StartDragging(uINode0TreeListNodeSelectImage, new Point(5, 7));
			Mouse.StopDragging(uITreeList1TreeList, new Point(68, 74));
		}
		public void ChangeTreeListCellCurrencyFormatValue()
		{
			#region Variable Declarations
			DXTreeListCell uIItem512000TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode1TreeListNode.UIItem512000TreeListCell;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode1TreeListNode.UIItem512000TreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uIItem512000TreeListCell, new Point(74, 10));
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListCellCurrencyFormatValueParams.UITextEditEditSendKeys, ModifierKeys.Shift);
			uITextEditEdit.ValueAsString = this.ChangeTreeListCellCurrencyFormatValueParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListCellCurrencyFormatValueParams.UITextEditEditSendKeys1, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellCurrencyFormatValue()
		{
			#region Variable Declarations
			DXTreeListCell uIItem512000TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode1TreeListNode.UIItem512000TreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellCurrencyFormatValueExpectedValues.UIItem512000TreeListCellValueAsString, uIItem512000TreeListCell.ValueAsString);
		}
		public void SwitchToColumnFormatDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToColumnFormatDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeTreeListCellPurchaseDateFormatValue()
		{
			#region Variable Declarations
			DXTreeListCell uIItem13072012TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode2TreeListNode.UIItem13072012TreeListCell;
			DXDateTimePicker uIDateEditDateTimeEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode2TreeListNode.UIItem13072012TreeListCell.UIDateEditDateTimeEdit;
			#endregion
			Mouse.Click(uIItem13072012TreeListCell, new Point(74, 5));
			uIDateEditDateTimeEdit.ValueAsString = this.ChangeTreeListCellPurchaseDateFormatValueParams.UIDateEditDateTimeEditValueAsString;
		}
		public void CheckChangedTreeListCellPurchaseDateFormatValue()
		{
			#region Variable Declarations
			DXTreeListCell uIItem13072012TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode2TreeListNode.UIItem13072012TreeListCell;
			#endregion
			StringAssert.Contains(uIItem13072012TreeListCell.ValueAsString, this.CheckChangedTreeListCellPurchaseDateFormatValueExpectedValues.UIItem13072012TreeListCellValueAsString);
		}
		public void SwitchToCustomTreeListNodeDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToCustomTreeListNodeDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void SwitchToTreeListDataModeDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToTreeListDataModeDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeTreeListCellValueViaCheckBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uICheckedTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UITreeList1TreeList.UINode0TreeListNode.UICheckedTreeListCell;
			DXCheckBox uICheckEditCheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UITreeList1TreeList.UINode0TreeListNode.UICheckedTreeListCell.UICheckEditCheckBox;
			#endregion
			Mouse.Click(uICheckedTreeListCell, new Point(32, 5));
			uICheckEditCheckBox.Checked = this.ChangeTreeListCellValueViaCheckBoxEditorParams.UICheckEditCheckBoxChecked;
		}
		public void CheckChangedTreeListCellValueViaCheckBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uICheckedTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UITreeList1TreeList.UINode0TreeListNode.UICheckedTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues.UICheckedTreeListCellText, uICheckedTreeListCell.Text);
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues.UICheckedTreeListCellValueAsString, uICheckedTreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellValueViaTextBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem6175551234TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UIItem6175551234TreeListCell;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UIItem6175551234TreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uIItem6175551234TreeListCell, new Point(87, 9));
			uITextEditEdit.ValueAsString = this.ChangeTreeListCellValueViaTextBoxEditorParams.UITextEditEditValueAsString;
		}
		public void CheckChangedTreeListCellValueViaTextBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem6175551234TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UIItem6175551234TreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaTextBoxEditorExpectedValues.UIItem6175551234TreeListCellValueAsString, uIItem6175551234TreeListCell.ValueAsString);
		}
		public void SwitchToDataStoreDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToDataStoreDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeTreeListCellValueViaComboBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uILowTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataStoreCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UILowTreeListCell;
			DXComboBox uIImageComboBoxEditComboBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataStoreCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UILowTreeListCell.UIImageComboBoxEditComboBox;
			DXTreeListCell uINormalTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataStoreCustom.UITreeList1TreeList.UINode2TreeListNode.UINode0TreeListNode.UINormalTreeListCell;
			#endregion
			Mouse.Click(uILowTreeListCell, new Point(132, 10));
			uIImageComboBoxEditComboBox.ValueTypeName = this.ChangeTreeListCellValueViaComboBoxEditorParams.UIImageComboBoxEditComboBoxValueTypeName;
			uIImageComboBoxEditComboBox.ValueAsString = this.ChangeTreeListCellValueViaComboBoxEditorParams.UIImageComboBoxEditComboBoxValueAsString;
			Mouse.Click(uINormalTreeListCell, new Point(50, 12));
		}
		public void CheckChangedTreeListCellValueViaComboBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uILowTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataStoreCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UILowTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaComboBoxEditorExpectedValues.UILowTreeListCellValueAsString, uILowTreeListCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaComboBoxEditorExpectedValues.UILowTreeListCellText, uILowTreeListCell.Text);
		}
		public void SelectNodesViaClickAndHoldingDownCtrlKey()
		{
			#region Variable Declarations
			DXTreeListCell uICustomerServicesTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode1TreeListNode.UICustomerServicesTreeListCell;
			DXTreeListCell uIResearchandDevelopmeTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UIResearchandDevelopmeTreeListCell;
			DXTreeListCell uIMarketingTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UIMarketingTreeListCell;
			#endregion
			Mouse.Click(uICustomerServicesTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(95, 3));
			Mouse.Click(uIResearchandDevelopmeTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(60, 9));
			Mouse.Click(uIMarketingTreeListCell, MouseButtons.Left, ModifierKeys.Control, new Point(54, 15));
		}
		public void CheckSelectedNodesViaClickAndHoldingDownCtrlKey()
		{
			#region Variable Declarations
			DXTestControl uILbSelectedRowsCountLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel2Client.UILbSelectedRowsCountLabel;
			DXTestControl uILbSelectedRowsLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel3Client.UILbSelectedRowsLabel;
			#endregion
			Assert.AreEqual(this.CheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues.UILbSelectedRowsCountLabelText, uILbSelectedRowsCountLabel.Text);
			Assert.AreEqual(this.CheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues.UILbSelectedRowsLabelText, uILbSelectedRowsLabel.Text);
		}
		public void SwitchToMultiSelectDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToMultiSelectDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void SelectNodesViaClickAndHoldingDownShiftKey()
		{
			#region Variable Declarations
			DXTreeListCell uIResearchandDevelopmeTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UIResearchandDevelopmeTreeListCell;
			#endregion
			Mouse.Click(uIResearchandDevelopmeTreeListCell, MouseButtons.Left, ModifierKeys.Shift, new Point(71, 4));
		}
		public void CheckSelectedNodesViaClickAndHoldingDownShiftKey()
		{
			#region Variable Declarations
			DXTestControl uILbSelectedRowsCountLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel2Client.UILbSelectedRowsCountLabel;
			DXTestControl uILbSelectedRowsLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel3Client.UILbSelectedRowsLabel;
			#endregion
			Assert.AreEqual(this.CheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues.UILbSelectedRowsCountLabelText, uILbSelectedRowsCountLabel.Text);
			Assert.AreEqual(this.CheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues.UILbSelectedRowsLabelText, uILbSelectedRowsLabel.Text);
		}
		public void MoveCellFocusViaCtrlAndArrowKey()
		{
			#region Variable Declarations
			DXTreeListCell uIResearchandDevelopmeTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UIResearchandDevelopmeTreeListCell;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uIResearchandDevelopmeTreeListCell, new Point(118, 7));
			Keyboard.SendKeys(uITreeList1TreeList, this.MoveCellFocusViaCtrlAndArrowKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.Control);
			Keyboard.SendKeys(uITreeList1TreeList, this.MoveCellFocusViaCtrlAndArrowKeyParams.UITreeList1TreeListSendKeys1, ModifierKeys.Control);
			Keyboard.SendKeys(uITreeList1TreeList, this.MoveCellFocusViaCtrlAndArrowKeyParams.UITreeList1TreeListSendKeys2, ModifierKeys.Control);
			Keyboard.SendKeys(uITreeList1TreeList, this.MoveCellFocusViaCtrlAndArrowKeyParams.UITreeList1TreeListSendKeys3, ModifierKeys.Control);
		}
		public void CheckSelectedNodesViaShiftAndUpKeys()
		{
			#region Variable Declarations
			DXTestControl uILbSelectedRowsCountLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel2Client.UILbSelectedRowsCountLabel;
			DXTestControl uILbSelectedRowsLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel3Client.UILbSelectedRowsLabel;
			#endregion
			Assert.AreEqual(this.CheckSelectedNodesViaShiftAndUpKeysExpectedValues.UILbSelectedRowsCountLabelText, uILbSelectedRowsCountLabel.Text);
			Assert.AreEqual(this.CheckSelectedNodesViaShiftAndUpKeysExpectedValues.UILbSelectedRowsLabelText, uILbSelectedRowsLabel.Text);
		}
		public void ChangeTreeListCellLongDateFormatValue()
		{
			#region Variable Declarations
			DXTreeListCell uIItem30October2008TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode1TreeListNode.UIItem30October2008TreeListCell;
			DXDateTimePicker uIDateEditDateTimeEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode1TreeListNode.UIItem30October2008TreeListCell.UIDateEditDateTimeEdit;
			DXTreeListCell uIItem1000001TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode1TreeListNode.UIItem1000001TreeListCell;
			#endregion
			Mouse.Click(uIItem30October2008TreeListCell, new Point(83, 5));
			uIDateEditDateTimeEdit.ValueAsString = this.ChangeTreeListCellLongDateFormatValueParams.UIDateEditDateTimeEditValueAsString;
			Mouse.Click(uIItem1000001TreeListCell, new Point(12, 5));
		}
		public void CheckChangedTreeListCellLongDateFormatValue()
		{
			#region Variable Declarations
			DXTreeListCell uIItem30October2008TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIColumnFormatCustom.UITreeList1TreeList.UINode1TreeListNode.UIItem30October2008TreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellLongDateFormatValueExpectedValues.UIItem30October2008TreeListCellValueAsString, uIItem30October2008TreeListCell.ValueAsString);
		}
		public void CheckSelectedNodesViaShiftAndDownKeys()
		{
			#region Variable Declarations
			DXTestControl uILbSelectedRowsCountLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel2Client.UILbSelectedRowsCountLabel;
			DXTestControl uILbSelectedRowsLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel3Client.UILbSelectedRowsLabel;
			#endregion
			Assert.AreEqual(this.CheckSelectedNodesViaShiftAndDownKeysExpectedValues.UILbSelectedRowsCountLabelText, uILbSelectedRowsCountLabel.Text);
			Assert.AreEqual(this.CheckSelectedNodesViaShiftAndDownKeysExpectedValues.UILbSelectedRowsLabelText, uILbSelectedRowsLabel.Text);
		}
		public void SelectNodesViaClickAndHoldingDownCtrlAndShiftKey()
		{
			#region Variable Declarations
			DXTreeListCell uIResearchandDevelopmeTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UIResearchandDevelopmeTreeListCell;
			#endregion
			Mouse.Click(uIResearchandDevelopmeTreeListCell, MouseButtons.Left, (ModifierKeys.Control | ModifierKeys.Shift), new Point(98, 7));
		}
		public void CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKey()
		{
			#region Variable Declarations
			DXTestControl uILbSelectedRowsCountLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel2Client.UILbSelectedRowsCountLabel;
			DXTestControl uILbSelectedRowsLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel3Client.UILbSelectedRowsLabel;
			#endregion
			Assert.AreEqual(this.CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues.UILbSelectedRowsCountLabelText, uILbSelectedRowsCountLabel.Text);
			Assert.AreEqual(this.CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues.UILbSelectedRowsLabelText, uILbSelectedRowsLabel.Text);
		}
		public void SelectNodesViaShiftCtrlAndUpKeys()
		{
			#region Variable Declarations
			DXTreeListCell uIResearchandDevelopmeTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UIResearchandDevelopmeTreeListCell;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uIResearchandDevelopmeTreeListCell, new Point(68, 3));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndUpKeysParams.UITreeList1TreeListSendKeys, (ModifierKeys.Control | ModifierKeys.Shift));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndUpKeysParams.UITreeList1TreeListSendKeys1, (ModifierKeys.Control | ModifierKeys.Shift));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndUpKeysParams.UITreeList1TreeListSendKeys2, (ModifierKeys.Control | ModifierKeys.Shift));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndUpKeysParams.UITreeList1TreeListSendKeys3, (ModifierKeys.Control | ModifierKeys.Shift));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndUpKeysParams.UITreeList1TreeListSendKeys4, (ModifierKeys.Control | ModifierKeys.Shift));
		}
		public void CheckSelectedNodesViaShiftCtrlAndUpKeys()
		{
			#region Variable Declarations
			DXTestControl uILbSelectedRowsCountLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel2Client.UILbSelectedRowsCountLabel;
			DXTestControl uILbSelectedRowsLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel3Client.UILbSelectedRowsLabel;
			#endregion
			Assert.AreEqual(this.CheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues.UILbSelectedRowsCountLabelText, uILbSelectedRowsCountLabel.Text);
			Assert.AreEqual(this.CheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues.UILbSelectedRowsLabelText, uILbSelectedRowsLabel.Text);
		}
		public void SelectNodesViaShiftCtrlAndDownKeys()
		{
			#region Variable Declarations
			DXTreeListCell uIFieldOfficeEastCoastTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode.UIFieldOfficeEastCoastTreeListCell;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uIFieldOfficeEastCoastTreeListCell, new Point(47, 9));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndDownKeysParams.UITreeList1TreeListSendKeys, (ModifierKeys.Control | ModifierKeys.Shift));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndDownKeysParams.UITreeList1TreeListSendKeys1, (ModifierKeys.Control | ModifierKeys.Shift));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndDownKeysParams.UITreeList1TreeListSendKeys2, (ModifierKeys.Control | ModifierKeys.Shift));
			Keyboard.SendKeys(uITreeList1TreeList, this.SelectNodesViaShiftCtrlAndDownKeysParams.UITreeList1TreeListSendKeys3, (ModifierKeys.Control | ModifierKeys.Shift));
		}
		public void CheckSelectedNodesViaShiftCtrlAndDownKeys()
		{
			#region Variable Declarations
			DXTestControl uILbSelectedRowsCountLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel2Client.UILbSelectedRowsCountLabel;
			DXTestControl uILbSelectedRowsLabel = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIMultiSelectCustom.UIPanel3Client.UILbSelectedRowsLabel;
			#endregion
			Assert.AreEqual(this.CheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues.UILbSelectedRowsCountLabelText, uILbSelectedRowsCountLabel.Text);
			Assert.AreEqual(this.CheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues.UILbSelectedRowsLabelText, uILbSelectedRowsLabel.Text);
		}
		public void CheckNodes()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode;
			DXTreeListNode uINode1TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode;
			DXTreeListNode uINode2TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode;
			#endregion
			uINode0TreeListNode.Checked = this.CheckNodesParams.UINode0TreeListNodeChecked;
			uINode1TreeListNode.Checked = this.CheckNodesParams.UINode1TreeListNodeChecked;
			uINode2TreeListNode.Checked = this.CheckNodesParams.UINode2TreeListNodeChecked;
		}
		public void CheckNodesCheckedStates()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1;
			DXTreeListNode uINode0TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode;
			DXTreeListNode uINode1TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode;
			DXTreeListNode uINode2TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode;
			DXTreeListNode uINode0TreeListNode2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode0TreeListNode;
			DXTreeListNode uINode1TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode;
			#endregion
			Assert.AreEqual(this.CheckNodesCheckedStatesExpectedValues.UINode0TreeListNode1Checked, uINode0TreeListNode1.Checked);
			Assert.AreEqual(this.CheckNodesCheckedStatesExpectedValues.UINode0TreeListNodeChecked, uINode0TreeListNode.Checked);
			Assert.AreEqual(this.CheckNodesCheckedStatesExpectedValues.UINode1TreeListNodeChecked, uINode1TreeListNode.Checked);
			Assert.AreEqual(this.CheckNodesCheckedStatesExpectedValues.UINode2TreeListNodeChecked, uINode2TreeListNode.Checked);
			Assert.AreEqual(this.CheckNodesCheckedStatesExpectedValues.UINode0TreeListNodeChecked1, uINode0TreeListNode2.Checked);
			Assert.AreEqual(this.CheckNodesCheckedStatesExpectedValues.UINode1TreeListNodeChecked1, uINode1TreeListNode1.Checked);
		}
		public void SwitchToNodeCheckingDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToNodeCheckingDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void DisableRecursiveNodesCheckingOption()
		{
			#region Variable Declarations
			DXCheckBox uIChkAllowRecursiveCheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UIPanel2Client.UIChkAllowRecursiveCheckBox;
			#endregion
			uIChkAllowRecursiveCheckBox.Checked = this.DisableRecursiveNodesCheckingOptionParams.UIChkAllowRecursiveCheckBoxChecked;
		}
		public void CheckNodesViaKeyboard()
		{
			#region Variable Declarations
			DXTreeListCell uISalesandMarketingTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UISalesandMarketingTreeListCell;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uISalesandMarketingTreeListCell, new Point(14, 4));
			Keyboard.SendKeys(uITreeList1TreeList, this.CheckNodesViaKeyboardParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
		}
		public void CheckChangedNodesCheckedStatesViaKeyboard()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1;
			DXTreeListNode uINode0TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode;
			DXTreeListNode uINode1TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode;
			#endregion
			Assert.AreEqual(this.CheckChangedNodesCheckedStatesViaKeyboardExpectedValues.UINode0TreeListNode1Checked, uINode0TreeListNode1.Checked);
			Assert.AreEqual(this.CheckChangedNodesCheckedStatesViaKeyboardExpectedValues.UINode0TreeListNodeChecked, uINode0TreeListNode.Checked);
			Assert.AreEqual(this.CheckChangedNodesCheckedStatesViaKeyboardExpectedValues.UINode1TreeListNodeChecked, uINode1TreeListNode.Checked);
		}
		public void EnableIndeterminateCheckStateOption()
		{
			#region Variable Declarations
			DXCheckBox uIChkAllowIndeterminatCheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UIPanel2Client.UIChkAllowIndeterminatCheckBox;
			#endregion
			uIChkAllowIndeterminatCheckBox.Checked = this.EnableIndeterminateCheckStateOptionParams.UIChkAllowIndeterminatCheckBoxChecked;
		}
		public void CheckNodesAfterEnablingIndeterminateCheckStateOption()
		{
			#region Variable Declarations
			DXTreeListNode uINode1TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode;
			DXTreeListNode uINode2TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode;
			DXTreeListNode uINode0TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode0TreeListNode;
			#endregion
			uINode1TreeListNode.Checked = this.CheckNodesAfterEnablingIndeterminateCheckStateOptionParams.UINode1TreeListNodeChecked;
			uINode2TreeListNode.Checked = this.CheckNodesAfterEnablingIndeterminateCheckStateOptionParams.UINode2TreeListNodeChecked;
			uINode0TreeListNode.Checked = this.CheckNodesAfterEnablingIndeterminateCheckStateOptionParams.UINode0TreeListNodeChecked;
			uINode0TreeListNode.Checked = this.CheckNodesAfterEnablingIndeterminateCheckStateOptionParams.UINode0TreeListNodeChecked1;
		}
		public void CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOption()
		{
			#region Variable Declarations
			DXTreeListNode uINode1TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode;
			DXTreeListNode uINode0TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode0TreeListNode;
			DXTreeListNode uINode1TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode;
			#endregion
			Assert.AreEqual(this.CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues.UINode1TreeListNodeChecked, uINode1TreeListNode.Checked);
			Assert.AreEqual(this.CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues.UINode0TreeListNodeChecked, uINode0TreeListNode.Checked);
			Assert.AreEqual(this.CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues.UINode1TreeListNodeChecked1, uINode1TreeListNode1.Checked);
		}
		public void AscendingSortDataViaMouse()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uILengthcmTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UILengthcmTreeListColumnHeader;
			#endregion
			Mouse.Click(uILengthcmTreeListColumnHeader, new Point(71, 8));
		}
		public void AscendingSortDataViaContextMenu()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uILengthcmTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UILengthcmTreeListColumnHeader;
			DXMenuBaseButtonItem uISortAscendingMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UISortAscendingMenuBaseButtonItem;
			#endregion
			Mouse.Click(uILengthcmTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(69, 9));
			Mouse.Click(uISortAscendingMenuBaseButtonItem, new Point(12, 14));
		}
		public void DescendingSortDataViaMouse()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uILengthcmTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UILengthcmTreeListColumnHeader;
			#endregion
			Mouse.Click(uILengthcmTreeListColumnHeader, new Point(76, 10));
			Mouse.Click(uILengthcmTreeListColumnHeader, new Point(76, 10));
		}
		public void DescendingSortDataViaContextMenu()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uILengthcmTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UILengthcmTreeListColumnHeader;
			DXMenuBaseButtonItem uISortDescendingMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UISortDescendingMenuBaseButtonItem;
			#endregion
			Mouse.Click(uILengthcmTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(75, 11));
			Mouse.Click(uISortDescendingMenuBaseButtonItem, new Point(41, 6));
		}
		public void AscendingSortTreeListColumnDataAndPreservePreviousAnotherColumnDataSorting()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICategoryTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UICategoryTreeListColumnHeader;
			#endregion
			Mouse.Click(uICategoryTreeListColumnHeader, MouseButtons.Left, ModifierKeys.Shift, new Point(64, 10));
		}
		public void AscendingSortTreeListColumnDataAndRemovePreviousAnotherColumnDataSorting()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICategoryTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UICategoryTreeListColumnHeader;
			#endregion
			Mouse.Click(uICategoryTreeListColumnHeader, new Point(52, 11));
		}
		public void SwitchToNodesNavigationDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToNodesNavigationDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKey()
		{
			#region Variable Declarations
			DXTreeListCell uITestTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uITestTreeListCell, new Point(84, 9));
			uITextEditEdit.ValueAsString = this.ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellValue()
		{
			#region Variable Declarations
			DXTreeListCell uITestTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueExpectedValues.UITestTreeListCellValueAsString, uITestTreeListCell.ValueAsString);
		}
		public void ChangeTreeListFocusedCellEditorValueViaF2Key()
		{
			#region Variable Declarations
			DXTestControl uINode6TreeListRowIndicator = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UINode6TreeListRowIndicator;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uINode6TreeListRowIndicator, new Point(9, 7));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListFocusedCellEditorValueViaF2KeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListFocusedCellEditorValueViaF2KeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListFocusedCellEditorValueViaF2KeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void ChangeTreeListFocusedCellEditorValueViaCharacterKeys()
		{
			#region Variable Declarations
			DXTestControl uINode6TreeListRowIndicator = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UINode6TreeListRowIndicator;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell.UITextEditEdit;
			DXTreeListCell uIRedtailSurfperchTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode7TreeListNode.UIRedtailSurfperchTreeListCell;
			#endregion
			Mouse.Click(uINode6TreeListRowIndicator, new Point(3, 10));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListFocusedCellEditorValueViaCharacterKeysParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListFocusedCellEditorValueViaCharacterKeysParams.UITextEditEditValueAsString;
			Mouse.Click(uIRedtailSurfperchTreeListCell, new Point(50, 18));
		}
		public void ChangeTreeListFocusedCellEditorValueViaEscKey()
		{
			#region Variable Declarations
			DXTestControl uINode6TreeListRowIndicator = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UINode6TreeListRowIndicator;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uINode6TreeListRowIndicator, new Point(8, 6));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListFocusedCellEditorValueViaEscKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListFocusedCellEditorValueViaEscKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListFocusedCellEditorValueViaEscKeyParams.UITreeList1TreeListSendKeys1, ModifierKeys.None);
		}
		public void ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKey()
		{
			#region Variable Declarations
			DXTestControl uINode6TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UINode6TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uINode6TreeListNodeSelectImage, new Point(10, 9));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void ChangeTreeListCellValueViaDownAndRightKeys()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListRowIndicator = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListRowIndicator;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode4TreeListNode.UICroakerTreeListCell.UITextEditEdit;
			DXTextEdit uITextEditEdit1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode4TreeListNode.UICroakerTreeListCell.UITextEditEdit1;
			#endregion
			Mouse.Click(uINode0TreeListRowIndicator, new Point(7, 10));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListCellValueViaDownAndRightKeysParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListCellValueViaDownAndRightKeysParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit1, this.ChangeTreeListCellValueViaDownAndRightKeysParams.UITextEditEdit1SendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellValueViaArrowKeys()
		{
			#region Variable Declarations
			DXTreeListCell uICroakerTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode4TreeListNode.UICroakerTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaArrowKeysExpectedValues.UICroakerTreeListCellValueAsString, uICroakerTreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellValueViaHomeKey()
		{
			#region Variable Declarations
			DXTreeListCell uICheckedTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode12TreeListNode.UICheckedTreeListCell;
			DXCheckBox uICheckEditCheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode12TreeListNode.UICheckedTreeListCell.UICheckEditCheckBox;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode12TreeListNode.UITestNodesTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uICheckedTreeListCell, new Point(21, 5));
			Keyboard.SendKeys(uICheckEditCheckBox, this.ChangeTreeListCellValueViaHomeKeyParams.UICheckEditCheckBoxSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListCellValueViaHomeKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListCellValueViaHomeKeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellValueViaHomeKey()
		{
			#region Variable Declarations
			DXTreeListCell uITestNodesTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode12TreeListNode.UITestNodesTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaHomeKeyExpectedValues.UITestNodesTreeListCellValueAsString, uITestNodesTreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellValueViaEndKey()
		{
			#region Variable Declarations
			DXTestControl uINode8TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode8TreeListNode.UINode8TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXCheckBox uICheckEditCheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode8TreeListNode.UICheckedTreeListCell.UICheckEditCheckBox;
			#endregion
			Mouse.Click(uINode8TreeListNodeSelectImage, new Point(10, 6));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListCellValueViaEndKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uICheckEditCheckBox, this.ChangeTreeListCellValueViaEndKeyParams.UICheckEditCheckBoxSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellValueViaEndKey()
		{
			#region Variable Declarations
			DXTreeListCell uICheckedTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode8TreeListNode.UICheckedTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaEndKeyExpectedValues.UICheckedTreeListCellValueAsString, uICheckedTreeListCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaEndKeyExpectedValues.UICheckedTreeListCellText, uICheckedTreeListCell.Text);
		}
		public void ChangeTreeListCellValueViaPageUpKey()
		{
			#region Variable Declarations
			DXTestControl uINode14TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode14TreeListNode.UINode14TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode0TreeListNode.UITestTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uINode14TreeListNodeSelectImage, new Point(7, 9));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListCellValueViaPageUpKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListCellValueViaPageUpKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListCellValueViaPageUpKeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellValueViaPageUpKey()
		{
			#region Variable Declarations
			DXTreeListCell uITestTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode0TreeListNode.UITestTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaPageUpKeyExpectedValues.UITestTreeListCellValueAsString, uITestTreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellValueViaPageDownKey()
		{
			#region Variable Declarations
			DXTestControl uINode9TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode9TreeListNode.UINode9TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode20TreeListNode.UITestTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uINode9TreeListNodeSelectImage, new Point(8, 6));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListCellValueViaPageDownKeyParams.UITreeList1TreeListSendKeys, ModifierKeys.None);
			uITextEditEdit.ValueAsString = this.ChangeTreeListCellValueViaPageDownKeyParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListCellValueViaPageDownKeyParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellValueViaPageDownKey()
		{
			#region Variable Declarations
			DXTreeListCell uITestTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode20TreeListNode.UITestTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaPageDownKeyExpectedValues.UITestTreeListCellValueAsString, uITestTreeListCell.ValueAsString);
		}
		public void ChangeTreeListFirstCellValueViaCtrlHomeShortcut()
		{
			#region Variable Declarations
			DXTreeListCell uIUncheckedTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode10TreeListNode.UIUncheckedTreeListCell;
			DXCheckBox uICheckEditCheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode10TreeListNode.UIUncheckedTreeListCell.UICheckEditCheckBox;
			DXTextEdit uITextEditEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode0TreeListNode.UIFirstCellTestTreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uIUncheckedTreeListCell, new Point(21, 10));
			Keyboard.SendKeys(uICheckEditCheckBox, this.ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams.UICheckEditCheckBoxSendKeys, ModifierKeys.Control);
			uITextEditEdit.ValueAsString = this.ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListFirstCellValueViaCtrlHomeShortcut()
		{
			#region Variable Declarations
			DXTreeListCell uIFirstCellTestTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode0TreeListNode.UIFirstCellTestTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues.UIFirstCellTestTreeListCellValueAsString, uIFirstCellTestTreeListCell.ValueAsString);
		}
		public void ChangeTreeListLastCellValueViaCtrlEndShortcut()
		{
			#region Variable Declarations
			DXTestControl uINode11TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode11TreeListNode.UINode11TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList;
			DXCheckBox uICheckEditCheckBox = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode20TreeListNode.UICheckedTreeListCell.UICheckEditCheckBox;
			#endregion
			Mouse.Click(uINode11TreeListNodeSelectImage, new Point(10, 5));
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListLastCellValueViaCtrlEndShortcutParams.UITreeList1TreeListSendKeys, ModifierKeys.Control);
			Keyboard.SendKeys(uITreeList1TreeList, this.ChangeTreeListLastCellValueViaCtrlEndShortcutParams.UITreeList1TreeListSendKeys1, ModifierKeys.None);
			Keyboard.SendKeys(uICheckEditCheckBox, this.ChangeTreeListLastCellValueViaCtrlEndShortcutParams.UICheckEditCheckBoxSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListLastCellValueViaCtrlEndShortcut()
		{
			#region Variable Declarations
			DXTreeListCell uICheckedTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode20TreeListNode.UICheckedTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues.UICheckedTreeListCellValueAsString, uICheckedTreeListCell.ValueAsString);
			Assert.AreEqual(this.CheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues.UICheckedTreeListCellText, uICheckedTreeListCell.Text);
		}
		public void ResizeColumnHeaderViaDraggingRightEdge()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICommonNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader;
			#endregion
			uICommonNameTreeListColumnHeader.Width = this.ResizeColumnHeaderViaDraggingRightEdgeParams.UICommonNameTreeListColumnHeaderWidth;
		}
		public void CheckColumnHeaderWidthAfterDraggingRightEdge()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICommonNameTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader;
			#endregion
			Assert.AreEqual(this.CheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues.UICommonNameTreeListColumnHeaderWidth, uICommonNameTreeListColumnHeader.Width);
		}
		public void ResizeColumnHeaderViaDoubleClickColumnHeaderRightEdge()
		{
			#region Variable Declarations
			DXTestControl uICommonNameTreeListColumnHeaderEdge = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader.UICommonNameTreeListColumnHeaderEdge;
			#endregion
			Mouse.DoubleClick(uICommonNameTreeListColumnHeaderEdge, new Point(4, 5));
		}
		public void ResizeColumnHeaderViaBestFitContextMenuOption()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uIDepartmentTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UIDepartmentTreeListColumnHeader;
			DXMenuBaseButtonItem uIBestFitMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIBestFitMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIDepartmentTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(151, 4));
			Mouse.Click(uIBestFitMenuBaseButtonItem, new Point(54, 8));
		}
		public void ResizeColumnHeadersViaBestFitAllColumnsContextMenuOption()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uIDepartmentTreeListColumnHeader = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodeCheckingCustom.UITreeList1TreeList.UIDepartmentTreeListColumnHeader;
			DXMenuBaseButtonItem uIBestFitallcolumnsMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIBestFitallcolumnsMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIDepartmentTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(190, 15));
			Mouse.Click(uIBestFitallcolumnsMenuBaseButtonItem, new Point(43, 11));
		}
		public void AddNewSummariesMinFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIMINBurlingtonVTTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIMINBurlingtonVTTreeListSummaryFooterCell;
			DXMenuBaseButtonItem uIMinMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIMinMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIMINBurlingtonVTTreeListSummaryFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(24, 20));
			Mouse.Click(uIMinMenuBaseButtonItem, new Point(32, 7));
		}
		public void CheckAddedSummariesMinFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIMINBurlingtonVTTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIMINBurlingtonVTTreeListSummaryFooterCell;
			#endregion
			Assert.AreEqual(this.CheckAddedSummariesMinFooterCellExpectedValues.UIMINBurlingtonVTTreeListSummaryFooterCellValueAsString, uIMINBurlingtonVTTreeListSummaryFooterCell.ValueAsString);
		}
		public void SwitchToSummariesDemoModule()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UITutorialsCcodeWindow.UIGcNavigationsClient.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.SwitchToSummariesDemoModuleParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void AddNewSummariesMaxFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIMINBurlingtonVTTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIMINBurlingtonVTTreeListSummaryFooterCell;
			DXMenuBaseButtonItem uIMaxMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIMaxMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIMINBurlingtonVTTreeListSummaryFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(70, 8));
			Mouse.Click(uIMaxMenuBaseButtonItem, new Point(38, 13));
		}
		public void CheckAddedSummariesMaxFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIMINBurlingtonVTTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIMINBurlingtonVTTreeListSummaryFooterCell;
			#endregion
			Assert.AreEqual(this.CheckAddedSummariesMaxFooterCellExpectedValues.UIMINBurlingtonVTTreeListSummaryFooterCellValueAsString, uIMINBurlingtonVTTreeListSummaryFooterCell.ValueAsString);
		}
		public void AddNewSummariesCountGroupFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIItem2TreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem2TreeListRowFooterCell;
			DXMenuBaseButtonItem uICountMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UICountMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIItem2TreeListRowFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(56, 15));
			Mouse.Click(uICountMenuBaseButtonItem, new Point(54, 7));
		}
		public void CheckAddedSummariesCountGroupFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIItem2TreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem2TreeListRowFooterCell;
			DXTestControl uIItem2TreeListRowFooterCell1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem2TreeListRowFooterCell;
			DXTestControl uIItem3TreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode2TreeListRowFooter.UIItem3TreeListRowFooterCell;
			DXTestControl uIItem2TreeListRowFooterCell2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem2TreeListRowFooterCell;
			#endregion
			Assert.AreEqual(this.CheckAddedSummariesCountGroupFooterCellExpectedValues.UIItem2TreeListRowFooterCellValueAsString, uIItem2TreeListRowFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckAddedSummariesCountGroupFooterCellExpectedValues.UIItem2TreeListRowFooterCellValueAsString1, uIItem2TreeListRowFooterCell1.ValueAsString);
			Assert.AreEqual(this.CheckAddedSummariesCountGroupFooterCellExpectedValues.UIItem3TreeListRowFooterCellValueAsString, uIItem3TreeListRowFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckAddedSummariesCountGroupFooterCellExpectedValues.UIItem2TreeListRowFooterCellValueAsString2, uIItem2TreeListRowFooterCell2.ValueAsString);
		}
		public void RemoveSummariesFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIItemTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItemTreeListSummaryFooterCell;
			DXMenuBaseButtonItem uINoneMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UINoneMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIItemTreeListSummaryFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(280, 6));
			Mouse.Click(uINoneMenuBaseButtonItem, new Point(58, 10));
		}
		public void CheckRemovedSummariesFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIItemTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItemTreeListSummaryFooterCell;
			#endregion
			Assert.AreEqual(this.CheckRemovedSummariesFooterCellExpectedValues.UIItemTreeListSummaryFooterCellValueAsString, uIItemTreeListSummaryFooterCell.ValueAsString);
		}
		public void RemoveSummariesGroupFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIItem200000000TreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem200000000TreeListRowFooterCell;
			DXMenuBaseButtonItem uINoneMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UINoneMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIItem200000000TreeListRowFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(37, 10));
			Mouse.Click(uINoneMenuBaseButtonItem, new Point(52, 8));
		}
		public void CheckRemovedSummariesGroupFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIItem200000000TreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem200000000TreeListRowFooterCell;
			DXTestControl uIItemTreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UINode1TreeListRowFooter.UIItemTreeListRowFooterCell;
			DXTestControl uIItemTreeListRowFooterCell1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode2TreeListRowFooter.UIItemTreeListRowFooterCell;
			DXTestControl uIItemTreeListRowFooterCell2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode1TreeListNode.UINode1TreeListRowFooter.UIItemTreeListRowFooterCell;
			#endregion
			Assert.AreEqual(this.CheckRemovedSummariesGroupFooterCellExpectedValues.UIItem200000000TreeListRowFooterCellValueAsString, uIItem200000000TreeListRowFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckRemovedSummariesGroupFooterCellExpectedValues.UIItemTreeListRowFooterCellValueAsString, uIItemTreeListRowFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckRemovedSummariesGroupFooterCellExpectedValues.UIItemTreeListRowFooterCellValueAsString1, uIItemTreeListRowFooterCell1.ValueAsString);
			Assert.AreEqual(this.CheckRemovedSummariesGroupFooterCellExpectedValues.UIItemTreeListRowFooterCellValueAsString2, uIItemTreeListRowFooterCell2.ValueAsString);
		}
		public void DisableSummariesFooterCellsAllNodesContextOption()
		{
			#region Variable Declarations
			DXTestControl uIItemTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItemTreeListSummaryFooterCell;
			DXMenuBaseButtonItem uIAllNodesMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIAllNodesMenuBaseButtonItem;
			DXTestControl uISum185000000TreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UISum185000000TreeListSummaryFooterCell;
			DXMenuBaseButtonItem uIAllNodesMenuBaseButtonItem1 = this.UIItemWindow1.UIPopupMenuBarControlMenu1.UIAllNodesMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIItemTreeListSummaryFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(251, 13));
			Mouse.Click(uIAllNodesMenuBaseButtonItem, new Point(55, 9));
			Mouse.Click(uISum185000000TreeListSummaryFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(72, 11));
			Mouse.Click(uIAllNodesMenuBaseButtonItem1, new Point(30, 10));
		}
		public void CheckSummariesFooterCell()
		{
			#region Variable Declarations
			DXTestControl uIItemTreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItemTreeListSummaryFooterCell;
			DXTestControl uISum185000000TreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UISum185000000TreeListSummaryFooterCell;
			#endregion
			Assert.AreEqual(this.CheckSummariesFooterCellExpectedValues.UIItemTreeListSummaryFooterCellValueAsString, uIItemTreeListSummaryFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckSummariesFooterCellExpectedValues.UISum185000000TreeListSummaryFooterCellValueAsString, uISum185000000TreeListSummaryFooterCell.ValueAsString);
		}
		public void ModifySummariesFooterCellsType()
		{
			#region Variable Declarations
			DXTestControl uISum185000000TreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UISum185000000TreeListSummaryFooterCell;
			DXMenuBaseButtonItem uIAverageMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIAverageMenuBaseButtonItem;
			#endregion
			Mouse.Click(uISum185000000TreeListSummaryFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(69, 10));
			Mouse.Click(uIAverageMenuBaseButtonItem, new Point(24, 11));
		}
		public void CheckModifiedSummariesFooterCells()
		{
			#region Variable Declarations
			DXTestControl uISum185000000TreeListSummaryFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UISum185000000TreeListSummaryFooterCell;
			#endregion
			Assert.AreEqual(this.CheckModifiedSummariesFooterCellsExpectedValues.UISum185000000TreeListSummaryFooterCellValueAsString, uISum185000000TreeListSummaryFooterCell.ValueAsString);
		}
		public void ModifySummariesGroupFooterCellsType()
		{
			#region Variable Declarations
			DXTestControl uIItem200000000TreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem200000000TreeListRowFooterCell;
			DXMenuBaseButtonItem uIAverageMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIAverageMenuBaseButtonItem;
			#endregion
			Mouse.Click(uIItem200000000TreeListRowFooterCell, MouseButtons.Right, ModifierKeys.None, new Point(125, 10));
			Mouse.Click(uIAverageMenuBaseButtonItem, new Point(13, 13));
		}
		public void CheckModifiedSummariesGroupFooterCellsType()
		{
			#region Variable Declarations
			DXTestControl uIItem200000000TreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode1TreeListNode.UINode1TreeListRowFooter.UIItem200000000TreeListRowFooterCell;
			DXTestControl uIItemTreeListRowFooterCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UINode1TreeListRowFooter.UIItemTreeListRowFooterCell;
			DXTestControl uIItemTreeListRowFooterCell1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode2TreeListRowFooter.UIItemTreeListRowFooterCell;
			DXTestControl uIItemTreeListRowFooterCell2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UISummariesCustom.UITreeList1TreeList.UINode1TreeListNode.UINode1TreeListRowFooter.UIItemTreeListRowFooterCell;
			#endregion
			Assert.AreEqual(this.CheckModifiedSummariesGroupFooterCellsTypeExpectedValues.UIItem200000000TreeListRowFooterCellValueAsString, uIItem200000000TreeListRowFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckModifiedSummariesGroupFooterCellsTypeExpectedValues.UIItemTreeListRowFooterCellValueAsString, uIItemTreeListRowFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckModifiedSummariesGroupFooterCellsTypeExpectedValues.UIItemTreeListRowFooterCellValueAsString1, uIItemTreeListRowFooterCell1.ValueAsString);
			Assert.AreEqual(this.CheckModifiedSummariesGroupFooterCellsTypeExpectedValues.UIItemTreeListRowFooterCellValueAsString2, uIItemTreeListRowFooterCell2.ValueAsString);
		}
		public void SwitchToNodesFilteringDemoModule()
		{
			#region Variable Declarations
			DXTestControl uINodesFilteringAccordionControlItem = this.UIXtraTreeListFeaturesWindow7.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIDataFilteringAccordionControlGroup.UINodesFilteringAccordionControlItem;
			#endregion
			Mouse.Click(uINodesFilteringAccordionControlItem, new Point(0, 0));
		}
		public void ChangeFilterMode()
		{
			#region Variable Declarations
			DXComboBox uICbFilterModeComboBox = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UIPanelControl1Client.UICbFilterModeComboBox;
			#endregion
			uICbFilterModeComboBox.ValueTypeName = this.ChangeFilterModeParams.UICbFilterModeComboBoxValueTypeName;
			uICbFilterModeComboBox.ValueAsString = this.ChangeFilterModeParams.UICbFilterModeComboBoxValueAsString;
		}
		public void ModifyFilterExpressionViaFilterEditor()
		{
			#region Variable Declarations
			DXTestControl uITreeListFilterPanelCTreeListElement = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListFilterPanelCustom.UITreeListFilterPanelCTreeListElement;
			DXFilterControl uIFilterControlFilterControl = this.UIFilterEditorWindow.UIFilterControlFilterControl;
			DXTextEdit uITextEditEdit = this.UIFilterEditorWindow.UIFilterControlFilterControl.UITextEditEdit;
			DXButton uISimpleButtonButton = this.UIFilterEditorWindow.UIPanelControlClient.UISimpleButtonButton;
			#endregion
			Mouse.Click(uITreeListFilterPanelCTreeListElement, new Point(22, 11));
			uIFilterControlFilterControl.FilterString = this.ModifyFilterExpressionViaFilterEditorParams.UIFilterControlFilterControlFilterString;
			uIFilterControlFilterControl.FilterString = this.ModifyFilterExpressionViaFilterEditorParams.UIFilterControlFilterControlFilterString1;
			uIFilterControlFilterControl.FilterString = this.ModifyFilterExpressionViaFilterEditorParams.UIFilterControlFilterControlFilterString2;
			uITextEditEdit.ValueAsString = this.ModifyFilterExpressionViaFilterEditorParams.UITextEditEditValueAsString;
			Mouse.Click(uISimpleButtonButton, new Point(1, 1));
		}
		public void CheckModifiedFilterExpressionFilterResults()
		{
			#region Variable Declarations
			DXTestControl uIItem19TreeListSummaryFooterCell = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItem19TreeListSummaryFooterCell;
			#endregion
			Assert.AreEqual(this.CheckModifiedFilterExpressionFilterResultsExpectedValues.UIItem19TreeListSummaryFooterCellValueAsString, uIItem19TreeListSummaryFooterCell.ValueAsString);
		}
		public void DeactivateFilter()
		{
			#region Variable Declarations
			DXTestControl uITreeListFilterPanelATreeListElement = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListFilterPanelCustom.UITreeListFilterPanelATreeListElement;
			#endregion
			Mouse.Click(uITreeListFilterPanelATreeListElement, new Point(7, 11));
		}
		public void CheckDeactivatedFilter()
		{
			#region Variable Declarations
			DXTestControl uIItem19TreeListSummaryFooterCell = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItem19TreeListSummaryFooterCell;
			DXTestControl uITreeListFilterPanelATreeListElement = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListFilterPanelCustom.UITreeListFilterPanelATreeListElement;
			#endregion
			Assert.AreEqual(this.CheckDeactivatedFilterExpectedValues.UIItem19TreeListSummaryFooterCellValueAsString, uIItem19TreeListSummaryFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckDeactivatedFilterExpectedValues.UITreeListFilterPanelATreeListElementChecked, uITreeListFilterPanelATreeListElement.Checked);
		}
		public void DeleteFilterViaClickCloseFilterPanelButton()
		{
			#region Variable Declarations
			DXTestControl uITreeListFilterPanelCTreeListElement1 = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListFilterPanelCustom.UITreeListFilterPanelCTreeListElement1;
			#endregion
			Mouse.Click(uITreeListFilterPanelCTreeListElement1, new Point(7, 10));
		}
		public void CheckDeletedFilter()
		{
			#region Variable Declarations
			DXTestControl uIItem19TreeListSummaryFooterCell = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItem19TreeListSummaryFooterCell;
			DXTreeListColumnHeader uIJobTitleTreeListColumnHeader = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UIJobTitleTreeListColumnHeader;
			#endregion
			Assert.AreEqual(this.CheckDeletedFilterExpectedValues.UIItem19TreeListSummaryFooterCellValueAsString, uIItem19TreeListSummaryFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckDeletedFilterExpectedValues.UIJobTitleTreeListColumnHeaderFilterString, uIJobTitleTreeListColumnHeader.FilterString);
		}
		public void SwitchToBusinessObjectBindingDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIBusinessObjectBindinAccordionControlItem = this.UIXtraTreeListFeaturesWindow.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIDataSourcesAccordionControlGroup.UIBusinessObjectBindinAccordionControlItem;
			#endregion
			Mouse.Click(uIBusinessObjectBindinAccordionControlItem, new Point(0, 0));
		}
		public void ChangeTreeListCellsValueForControlPropertyGrindChanges()
		{
			#region Variable Declarations
			DXTreeListCell uIMarkettestTreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode11.UINode0TreeListNode.UIMarkettestTreeListCell;
			DXTextEdit uINode000ColumntreeLisEdit = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode12.UINode0TreeListNode.UIMarkettestTreeListCell.UINode000ColumntreeLisEdit;
			DXTreeListCell uIItem5122011TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode13.UINode0TreeListNode.UIItem5122011TreeListCell;
			DXDateTimePicker uINode000ColumntreeLisDateTimeEdit = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode14.UINode0TreeListNode.UIItem5122011TreeListCell.UINode000ColumntreeLisDateTimeEdit;
			DXTreeListCell uIItem9222011TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode15.UINode0TreeListNode.UIItem9222011TreeListCell;
			DXDateTimePicker uINode000ColumntreeLisDateTimeEdit1 = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode16.UINode0TreeListNode.UIItem9222011TreeListCell.UINode000ColumntreeLisDateTimeEdit;
			DXTreeListCell uIHighTreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode17.UINode0TreeListNode.UIHighTreeListCell;
			DXComboBox uINode000ColumntreeLisComboBox = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode18.UINode0TreeListNode.UIHighTreeListCell.UINode000ColumntreeLisComboBox;
			DXComboBox uINode000ColumntreeLisComboBox1 = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode19.UINode0TreeListNode.UIHighTreeListCell.UINode000ColumntreeLisComboBox;
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient1.UIPropertyGridControl1PropertyGrid;
			#endregion
			Mouse.Click(uIMarkettestTreeListCell, new Point(85, 9));
			uINode000ColumntreeLisEdit.ValueAsString = this.ChangeTreeListCellsValueForControlPropertyGrindChangesParams.UINode000ColumntreeLisEditValueAsString;
			Mouse.Click(uIItem5122011TreeListCell, new Point(77, 7));
			uINode000ColumntreeLisDateTimeEdit.ValueAsString = this.ChangeTreeListCellsValueForControlPropertyGrindChangesParams.UINode000ColumntreeLisDateTimeEditValueAsString;
			Mouse.Click(uIItem9222011TreeListCell, new Point(66, 14));
			uINode000ColumntreeLisDateTimeEdit1.ValueAsString = this.ChangeTreeListCellsValueForControlPropertyGrindChangesParams.UINode000ColumntreeLisDateTimeEditValueAsString1;
			Mouse.Click(uIHighTreeListCell, new Point(93, 9));
			uINode000ColumntreeLisComboBox.ValueTypeName = this.ChangeTreeListCellsValueForControlPropertyGrindChangesParams.UINode000ColumntreeLisComboBoxValueTypeName;
			uINode000ColumntreeLisComboBox1.ValueAsString = this.ChangeTreeListCellsValueForControlPropertyGrindChangesParams.UINode000ColumntreeLisComboBoxValueAsString;
			Mouse.Click(uIPropertyGridControl1PropertyGrid, new Point(81, 235));
		}
		public void SwitchToTreeListMultiEditorsRowDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIMultiEditorsAccordionControlItem = this.UIXtraTreeListFeaturesWindow9.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIDataEditingAccordionControlGroup.UIMultiEditorsAccordionControlItem;
			#endregion
			Mouse.Click(uIMultiEditorsAccordionControlItem, new Point(0, 0));
		}
		public void ChangeTreeListCellsValueViaCalcEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem1800TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UIItem1800TreeListCell;
			DXPopupEdit uICalcEditPopupEdit = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UIItem1800TreeListCell.UICalcEditPopupEdit;
			DXPopupEdit uICalcEditPopupEdit1 = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UIItem1800TreeListCell.UICalcEditPopupEdit1;
			DXTreeList uITreeList1TreeList = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uIItem1800TreeListCell, new Point(188, 8));
			uICalcEditPopupEdit.ValueAsString = this.ChangeTreeListCellsValueViaCalcEditorParams.UICalcEditPopupEditValueAsString;
			Keyboard.SendKeys(uICalcEditPopupEdit1, this.ChangeTreeListCellsValueViaCalcEditorParams.UICalcEditPopupEdit1SendKeys, ModifierKeys.None);
			Mouse.Click(uITreeList1TreeList, new Point(452, 320));
		}
		public void CheckChangedTreeListCellsValueViaCalcEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem1800TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UIItem1800TreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellsValueViaCalcEditorExpectedValues.UIItem1800TreeListCellValueAsString, uIItem1800TreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellsValueViaSpinEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem50TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UIItem50TreeListCell;
			DXTextEdit uISpinEditEdit = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UIItem50TreeListCell.UISpinEditEdit;
			DXTreeList uITreeList1TreeList = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList;
			#endregion
			Mouse.Click(uIItem50TreeListCell, new Point(182, 7));
			uISpinEditEdit.ValueAsString = this.ChangeTreeListCellsValueViaSpinEditorParams.UISpinEditEditValueAsString;
			Mouse.Click(uITreeList1TreeList, new Point(391, 319));
		}
		public void CheckChangedTreeListCellsValueViaSpinEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem50TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UIItem50TreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellsValueViaSpinEditorExpectedValues.UIItem50TreeListCellValueAsString, uIItem50TreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellsValueViaImageComboBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIConfectionsTreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode1TreeListNode.UIConfectionsTreeListCell;
			DXComboBox uIImageComboBoxEditComboBox = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode1TreeListNode.UIConfectionsTreeListCell.UIImageComboBoxEditComboBox;
			#endregion
			Mouse.Click(uIConfectionsTreeListCell, new Point(185, 8));
			uIImageComboBoxEditComboBox.ValueTypeName = this.ChangeTreeListCellsValueViaImageComboBoxEditorParams.UIImageComboBoxEditComboBoxValueTypeName;
			uIImageComboBoxEditComboBox.ValueAsString = this.ChangeTreeListCellsValueViaImageComboBoxEditorParams.UIImageComboBoxEditComboBoxValueAsString;
		}
		public void CheckChangedTreeListCellsValueViaImageComboBoxEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIConfectionsTreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode1TreeListNode.UIConfectionsTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues.UIConfectionsTreeListCellValueAsString, uIConfectionsTreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellsValueViaTextEditorWithMask()
		{
			#region Variable Declarations
			DXTreeListCell uIItem1005512345TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode2TreeListNode.UINode1TreeListNode.UIItem1005512345TreeListCell;
			DXTextEdit uITextEditEdit = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode2TreeListNode.UINode1TreeListNode.UIItem1005512345TreeListCell.UITextEditEdit;
			#endregion
			Mouse.Click(uIItem1005512345TreeListCell, new Point(140, 9));
			uITextEditEdit.ValueAsString = this.ChangeTreeListCellsValueViaTextEditorWithMaskParams.UITextEditEditValueAsString;
			Keyboard.SendKeys(uITextEditEdit, this.ChangeTreeListCellsValueViaTextEditorWithMaskParams.UITextEditEditSendKeys, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellsValueViaTextEditorWithMask()
		{
			#region Variable Declarations
			DXTreeListCell uIItem1005512345TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode2TreeListNode.UINode1TreeListNode.UIItem1005512345TreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues.UIItem1005512345TreeListCellValueAsString, uIItem1005512345TreeListCell.ValueAsString);
		}
		public void ScrollTreeListForControlFixedColumn()
		{
			#region Variable Declarations
			DXScrollBar uIHTLScrollBarScrollBarControl = this.UIXtraTreeListFeaturesWindow3.UIPanelControl1Client.UIGcContainerClient.UIFixedColumnsCustom.UITreeList1TreeList.UIHTLScrollBarScrollBarControl;
			#endregion
			uIHTLScrollBarScrollBarControl.ValueAsString = this.ScrollTreeListForControlFixedColumnParams.UIHTLScrollBarScrollBarControlValueAsString;
		}
		public void SwitchToFixedColumnsDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIFixedColumnsAccordionControlItem = this.UIXtraTreeListFeaturesWindow6.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UILayoutAccordionControlGroup.UIFixedColumnsAccordionControlItem;
			#endregion
			Mouse.Click(uIFixedColumnsAccordionControlItem, new Point(0, 0));
		}
		public void ModifyFixedColumnFixedStyle()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICommonNameTreeListColumnHeader = this.UIXtraTreeListFeaturesWindow3.UIPanelControl1Client.UIGcContainerClient.UIFixedColumnsCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader;
			DXMenuBaseButtonItem uIFixedRightMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedRightMenuBaseButtonItem;
			#endregion
			Mouse.Click(uICommonNameTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(106, 12));
			Mouse.Click(uIFixedRightMenuBaseButtonItem, new Point(31, 10));
		}
		public void MakeFixedColumnNotFixed()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICommonNameTreeListColumnHeader = this.UIXtraTreeListFeaturesWindow3.UIPanelControl1Client.UIGcContainerClient.UIFixedColumnsCustom.UITreeList1TreeList.UICommonNameTreeListColumnHeader;
			DXMenuBaseButtonItem uINotFixedMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UINotFixedMenuBaseButtonItem;
			#endregion
			Mouse.Click(uICommonNameTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(95, 12));
			Mouse.Click(uINotFixedMenuBaseButtonItem, new Point(21, 17));
		}
		public void MakeColumnFixedLeft()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICategoryTreeListColumnHeader = this.UIXtraTreeListFeaturesWindow3.UIPanelControl1Client.UIGcContainerClient.UIFixedColumnsCustom.UITreeList1TreeList.UICategoryTreeListColumnHeader;
			DXMenuBaseButtonItem uIFixedLeftMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedLeftMenuBaseButtonItem;
			#endregion
			Mouse.Click(uICategoryTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(77, 7));
			Mouse.Click(uIFixedLeftMenuBaseButtonItem, new Point(22, 8));
		}
		public void MakeColumnFixedRight()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uICategoryTreeListColumnHeader = this.UIXtraTreeListFeaturesWindow3.UIPanelControl1Client.UIGcContainerClient.UIFixedColumnsCustom.UITreeList1TreeList.UICategoryTreeListColumnHeader;
			DXMenuBaseButtonItem uIFixedRightMenuBaseButtonItem = this.UIItemWindow1.UIPopupMenuBarControlMenu.UIFixedRightMenuBaseButtonItem;
			#endregion
			Mouse.Click(uICategoryTreeListColumnHeader, MouseButtons.Right, ModifierKeys.None, new Point(84, 4));
			Mouse.Click(uIFixedRightMenuBaseButtonItem, new Point(52, 16));
		}
		public void SwitchToDragDropDemoModule()
		{
			#region Variable Declarations
			DXTestControl uIDragDropAccordionControlItem = this.UIXtraTreeListFeaturesWindow.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIMiscellaneousAccordionControlGroup.UIDragDropAccordionControlItem;
			#endregion
			Mouse.Click(uIDragDropAccordionControlItem, new Point(0, 0));
		}
		public void DragAndDropNewTreeListNodes()
		{
			#region Variable Declarations
			DXListBoxItem uIDeliverableListItem = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UIPanel1Client.UIPanelControl1Client.UIImageListBoxControl1List.UIDeliverableListItem;
			DXTreeListCell uIPlanningTreeListCell = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode11.UIPlanningTreeListCell;
			#endregion
			uIPlanningTreeListCell.EnsureClickable(new Point(33, 5));
			Mouse.StartDragging(uIDeliverableListItem, new Point(30, 7));
			Mouse.StopDragging(uIPlanningTreeListCell, new Point(33, 5));
		}
		public void ReorderTreeListNodesViaDragging()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeStateImage = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeStateImage;
			DXTestControl uINode1TreeListNodeStateImage = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode1TreeListNode.UINode1TreeListNode1.UINode1TreeListNodeStateImage;
			DXTestControl uINode0TreeListNodeStateImage1 = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode2TreeListNode.UINode0TreeListNode.UINode2TreeListNode.UINode0TreeListNode.UINode0TreeListNodeStateImage;
			DXTestControl uINode1TreeListNodeStateImage1 = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode2TreeListNode.UINode0TreeListNode.UINode1TreeListNode.UINode1TreeListNodeStateImage;
			#endregion
			uINode1TreeListNodeStateImage.EnsureClickable(new Point(8, 8));
			Mouse.StartDragging(uINode0TreeListNodeStateImage, new Point(8, 6));
			Mouse.StopDragging(uINode1TreeListNodeStateImage, new Point(8, 8));
			uINode1TreeListNodeStateImage1.EnsureClickable(new Point(8, 8));
			Mouse.StartDragging(uINode0TreeListNodeStateImage1, new Point(10, 6));
			Mouse.StopDragging(uINode1TreeListNodeStateImage1, new Point(8, 8));
		}
		public void DeleteTreeListNodesViaDraggingToRecycleBin()
		{
			#region Variable Declarations
			DXTreeListCell uIDeliverableTreeListCell = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode2TreeListNode.UIDeliverableTreeListCell;
			DXTestControl uILabel1Label = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UIPanel1Client.UILabel1Label;
			DXTestControl uINode2TreeListNodeStateImage = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode1TreeListNode.UINode2TreeListNode.UINode2TreeListNodeStateImage;
			DXTestControl uINode0TreeListRowIndicator = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode2TreeListNode.UINode0TreeListNode.UINode1TreeListNode.UINode0TreeListNode.UINode0TreeListRowIndicator;
			#endregion
			uILabel1Label.EnsureClickable(new Point(16, 14));
			Mouse.StartDragging(uIDeliverableTreeListCell, new Point(12, 6));
			Mouse.StopDragging(uILabel1Label, new Point(16, 14));
			uILabel1Label.EnsureClickable(new Point(10, 16));
			Mouse.StartDragging(uINode2TreeListNodeStateImage, new Point(9, 10));
			Mouse.StopDragging(uILabel1Label, new Point(10, 16));
			uILabel1Label.EnsureClickable(new Point(15, 18));
			Mouse.StartDragging(uINode0TreeListRowIndicator, new Point(9, 6));
			Mouse.StopDragging(uILabel1Label, new Point(15, 18));
		}
		public void SwitchToNodesVisibilityDemoModule()
		{
			#region Variable Declarations
			DXTestControl uINodesVisibilityAccordionControlItem = this.UIXtraTreeListFeaturesWindow7.UIGcNavigationsClient.UIAccordionControl1AccordionControl.UIDataFilteringAccordionControlGroup.UINodesVisibilityAccordionControlItem;
			#endregion
			Mouse.Click(uINodesVisibilityAccordionControlItem, new Point(0, 0));
		}
		public void HideNodesViaDoubleClick()
		{
			#region Variable Declarations
			DXTreeListCell uIFieldOfficeJapanTreeListCell = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode2TreeListNode.UINode1TreeListNode.UIFieldOfficeJapanTreeListCell;
			DXTreeListCell uIConsumerElectronicsDTreeListCell = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode0TreeListNode.UIConsumerElectronicsDTreeListCell;
			DXTreeListCell uISalesandMarketingTreeListCell = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UISalesandMarketingTreeListCell;
			#endregion
			Mouse.DoubleClick(uIFieldOfficeJapanTreeListCell, new Point(44, 6));
			Mouse.DoubleClick(uIConsumerElectronicsDTreeListCell, new Point(44, 7));
			Mouse.DoubleClick(uISalesandMarketingTreeListCell, new Point(34, 11));
		}
		public void CheckHiddenNodesViaDoubleClick()
		{
			#region Variable Declarations
			DXListBoxItem uICustomerServicesListItem = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UIListBoxControl1List.UICustomerServicesListItem;
			DXListBoxItem uIFieldOfficeJapanListItem = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UIListBoxControl1List.UIFieldOfficeJapanListItem;
			DXListBoxItem uIConsumerElectronicsDListItem = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UIListBoxControl1List.UIConsumerElectronicsDListItem;
			DXListBoxItem uISalesandMarketingListItem = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UIListBoxControl1List.UISalesandMarketingListItem;
			#endregion
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UICustomerServicesListItemText, uICustomerServicesListItem.Text);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UICustomerServicesListItemIndex, uICustomerServicesListItem.Index);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UICustomerServicesListItemSelected, uICustomerServicesListItem.Selected);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UIFieldOfficeJapanListItemText, uIFieldOfficeJapanListItem.Text);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UIFieldOfficeJapanListItemIndex, uIFieldOfficeJapanListItem.Index);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UIConsumerElectronicsDListItemText, uIConsumerElectronicsDListItem.Text);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UIConsumerElectronicsDListItemIndex, uIConsumerElectronicsDListItem.Index);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UISalesandMarketingListItemText, uISalesandMarketingListItem.Text);
			Assert.AreEqual(this.CheckHiddenNodesViaDoubleClickExpectedValues.UISalesandMarketingListItemIndex, uISalesandMarketingListItem.Index);
		}
		public void MakeNodeVisibleViaHiddenListItemDoubleClick()
		{
			#region Variable Declarations
			DXListBox uIListBoxControl1List = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UIListBoxControl1List;
			#endregion
			uIListBoxControl1List.SelectedIndicesAsString = this.MakeNodeVisibleViaHiddenListItemDoubleClickParams.UIListBoxControl1ListSelectedIndicesAsString;
		}
		public void CheckVisibleNode()
		{
			#region Variable Declarations
			DXTreeListNode uINode3TreeListNode = this.UIXtraTreeListFeaturesWindow5.UIPanelControl1Client.UIGcContainerClient.UINodesVisibilityCustom.UITreeList1TreeList.UINode0TreeListNode.UINode2TreeListNode.UINode1TreeListNode.UINode3TreeListNode;
			#endregion
			Assert.AreEqual(this.CheckVisibleNodeExpectedValues.UINode3TreeListNodeChecked, uINode3TreeListNode.Checked);
			Assert.AreEqual(this.CheckVisibleNodeExpectedValues.UINode3TreeListNodeExpanded, uINode3TreeListNode.Expanded);
		}
		public void ScrollPropertyGridViaMouse()
		{
			#region Variable Declarations
			DXScrollBar uIVGridVertScrollBarScrollBarControl = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIVGridVertScrollBarScrollBarControl;
			#endregion
			uIVGridVertScrollBarScrollBarControl.ValueAsString = this.ScrollPropertyGridViaMouseParams.UIVGridVertScrollBarScrollBarControlValueAsString;
		}
		public void DragRowWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowLast_NameVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowLast_NameVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragRowWithMoveToEndDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowLast_NameVerticalGridRow.DraggingDestination = this.DragRowWithMoveToEndDragActionParams.UIRowLast_NameVerticalGridRowDraggingDestination;
		}
		public void DragCategoryRowWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow2VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow2VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragCategoryRowWithMoveToEndDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow2VerticalGridRow.DraggingDestination = this.DragCategoryRowWithMoveToEndDragActionParams.UICategoryRow2VerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridRowToCustomizationForm()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowPhotoVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowPhotoVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridRowToCustomizationFormParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowPhotoVerticalGridRow.DraggingDestination = this.DragVerticalGridRowToCustomizationFormParams.UIRowPhotoVerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridCategoryRowToCustomizationForm()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridCategoryRowToCustomizationFormParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.DraggingDestination = this.DragVerticalGridCategoryRowToCustomizationFormParams.UICategoryRow1VerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridRowFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowLast_NameVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowLast_NameVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowLast_NameVerticalGridRow.DraggingDestination = this.DragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams.UIRowLast_NameVerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.DraggingDestination = this.DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams.UICategoryRow1VerticalGridRowDraggingDestination;
		}
		public void DragAddedCategoryFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryTestCategoryVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryTestCategoryVerticalGridRow.DraggingDestination = this.DragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams.UICategoryTestCategoryVerticalGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridRowsWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowBorderStylePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow;
			DXVerticalGridRow uIRowCursorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowCursorPropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues.UIRowBorderStylePropertyGridRowParentName, uIRowBorderStylePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues.UIRowBorderStylePropertyGridRowVisibleIndex, uIRowBorderStylePropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues.UIRowCursorPropertyGridRowParentName, uIRowCursorPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues.UIRowCursorPropertyGridRowVisibleIndex, uIRowCursorPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues.UIRowFontPropertyGridRowExpanded, uIRowFontPropertyGridRow.Expanded);
		}
		public void DragPropertyGridRowsWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXScrollBar uIVGridVertScrollBarScrollBarControl = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIVGridVertScrollBarScrollBarControl;
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowPropertiesPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowPropertiesPropertyGridRow;
			DXVerticalGridRow uIRowSizePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowSizePropertyGridRow;
			#endregion
			uIVGridVertScrollBarScrollBarControl.ValueAsString = this.DragPropertyGridRowsWithMoveToEndDragActionParams.UIVGridVertScrollBarScrollBarControlValueAsString;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithMoveToEndDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowPropertiesPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithMoveToEndDragActionParams.UIRowPropertiesPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithMoveToEndDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowSizePropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithMoveToEndDragActionParams.UIRowSizePropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridRowsWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowPropertiesPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowPropertiesPropertyGridRow;
			DXVerticalGridRow uIRowSizePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowSizePropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues.UIRowPropertiesPropertyGridRowParentName, uIRowPropertiesPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues.UIRowPropertiesPropertyGridRowVisibleIndex, uIRowPropertiesPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues.UIRowSizePropertyGridRowParentName, uIRowSizePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues.UIRowSizePropertyGridRowVisibleIndex, uIRowSizePropertyGridRow.VisibleIndex);
		}
		public void CheckDraggingPropertyRowsWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowBackgroundImagePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBackgroundImagePropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues.UIRowBackgroundImagePropertyGridRowParentName, uIRowBackgroundImagePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues.UIRowBackgroundImagePropertyGridRowVisibleIndex, uIRowBackgroundImagePropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues.UIRowFontPropertyGridRowParentName, uIRowFontPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues.UIRowFontPropertyGridRowVisibleIndex, uIRowFontPropertyGridRow.VisibleIndex);
		}
		public void CheckDraggingPropertyCategoryRowWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryBarManagerPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridCategoryRow;
			DXVerticalGridRow uIRowMenuManagerPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowMenuManagerPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues.UICategoryBarManagerPropertyGridCategoryRowParentName, uICategoryBarManagerPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues.UICategoryBarManagerPropertyGridCategoryRowVisibleIndex, uICategoryBarManagerPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues.UIRowMenuManagerPropertyGridRowParentName, uIRowMenuManagerPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues.UIRowMenuManagerPropertyGridRowVisibleIndex, uIRowMenuManagerPropertyGridRow.VisibleIndex);
		}
		public void CheckDraggingPropertyGridCategoryRowWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			DXVerticalGridRow uICategoryBarManagerPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridCategoryRow;
			DXVerticalGridRow uIRowBorderStylePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowParentName, uICategoryAppearancePropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowVisibleIndex, uICategoryAppearancePropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues.UICategoryBarManagerPropertyGridCategoryRowChildrenCount, uICategoryBarManagerPropertyGridCategoryRow.ChildrenCount);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues.UIRowBorderStylePropertyGridRowParentName, uIRowBorderStylePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues.UIRowBorderStylePropertyGridRowVisibleIndex, uIRowBorderStylePropertyGridRow.VisibleIndex);
		}
		public void DragPropertyGridRowsToCustomizationForm()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowBorderStylePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsToCustomizationFormParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowBorderStylePropertyGridRow.DraggingDestination = this.DragPropertyGridRowsToCustomizationFormParams.UIRowBorderStylePropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsToCustomizationFormParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowFontPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsToCustomizationFormParams.UIRowFontPropertyGridRowDraggingDestination;
		}
		public void CheckPropertyGridRowsInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uIBorderStyleListItem = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpRowsClient.UILbRowsList.UIBorderStyleListItem;
			DXListBoxItem uIFontListItem = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpRowsClient.UILbRowsList.UIFontListItem;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridRowsInCustomizationFormExpectedValues.UIBorderStyleListItemText, uIBorderStyleListItem.Text);
			Assert.AreEqual(this.CheckPropertyGridRowsInCustomizationFormExpectedValues.UIBorderStyleListItemIndex, uIBorderStyleListItem.Index);
			Assert.AreEqual(this.CheckPropertyGridRowsInCustomizationFormExpectedValues.UIFontListItemText, uIFontListItem.Text);
			Assert.AreEqual(this.CheckPropertyGridRowsInCustomizationFormExpectedValues.UIFontListItemIndex, uIFontListItem.Index);
		}
		public void SwitchToRowsTabInPropertyGridCustomizationForm()
		{
			#region Variable Declarations
			DXTestControl uIXtraTabControlHeaderTabPage = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UIXtraTabControlHeaderTabPage;
			#endregion
			Mouse.Click(uIXtraTabControlHeaderTabPage, new Point(23, 12));
		}
		public void CheckFilteringAfterChangingFilterMode()
		{
			#region Variable Declarations
			DXTestControl uIItem19TreeListSummaryFooterCell = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItem19TreeListSummaryFooterCell;
			#endregion
			Assert.AreEqual(this.CheckFilteringAfterChangingFilterModeExpectedValues.UIItem19TreeListSummaryFooterCellValueAsString, uIItem19TreeListSummaryFooterCell.ValueAsString);
		}
		public void CheckFilteringAfterChangingFilterExpression()
		{
			#region Variable Declarations
			DXTestControl uIItem19TreeListSummaryFooterCell = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListSummaryFooteTreeListSummaryFooter.UIItem19TreeListSummaryFooterCell;
			DXTestControl uITreeListFilterPanelTTreeListElement = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListFilterPanelCustom.UITreeListFilterPanelTTreeListElement;
			#endregion
			Assert.AreEqual(this.CheckFilteringAfterChangingFilterExpressionExpectedValues.UIItem19TreeListSummaryFooterCellValueAsString, uIItem19TreeListSummaryFooterCell.ValueAsString);
			Assert.AreEqual(this.CheckFilteringAfterChangingFilterExpressionExpectedValues.UITreeListFilterPanelTTreeListElementFilterString, uITreeListFilterPanelTTreeListElement.FilterString);
		}
		public void CopyTreeListNodeViaDraggingAndHoldingDownCtrlKey()
		{
			#region Variable Declarations
			DXTreeListCell uIMarketresearchTreeListCell = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode11.UINode0TreeListNode.UIMarketresearchTreeListCell;
			DXTreeListCell uIDesignofawebpagesTreeListCell = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UINode0TreeListNode.UIDesignofawebpagesTreeListCell;
			#endregion
			uIDesignofawebpagesTreeListCell.EnsureClickable(new Point(23, 7));
			Mouse.StartDragging(uIMarketresearchTreeListCell, new Point(25, 7), MouseButtons.Left, ModifierKeys.Control);
			Mouse.StopDragging(uIDesignofawebpagesTreeListCell, new Point(23, 7));
		}
		public void CheckChangedTreeListCellValueViaEscKey()
		{
			#region Variable Declarations
			DXTreeListCell uITestTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UITestTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaEscKeyExpectedValues.UITestTreeListCellValueAsString, uITestTreeListCell.ValueAsString);
		}
		public void DragPropertyGridCategoryRowWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryAppearancePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryAppearancePropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowWithInsertAfterDragActionParams.UICategoryAppearancePropertyGridRowDraggingDestination;
		}
		public void DragPropertyGridCategoryRowWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryBarManagerPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryBarManagerPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowWithInsertBeforeDragActionParams.UICategoryBarManagerPropertyGridRowDraggingDestination;
		}
		public void DragPropertyGridRowsWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowTabIndexPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowTabIndexPropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowTabIndexPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithInsertAfterDragActionParams.UIRowTabIndexPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowFontPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithInsertAfterDragActionParams.UIRowFontPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridRowsWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXVerticalGridRow uIRowTabIndexPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowTabIndexPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues.UIRowFontPropertyGridRowParentName, uIRowFontPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues.UIRowFontPropertyGridRowVisibleIndex, uIRowFontPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues.UIRowTabIndexPropertyGridRowParentName, uIRowTabIndexPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues.UIRowTabIndexPropertyGridRowVisibleIndex, uIRowTabIndexPropertyGridRow.VisibleIndex);
		}
		public void DragPropertyGridRowsWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowBackgroundImagePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBackgroundImagePropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowBackgroundImagePropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithInsertBeforeDragActionParams.UIRowBackgroundImagePropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowFontPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithInsertBeforeDragActionParams.UIRowFontPropertyGridRowDraggingDestination;
		}
		public void DragAddedCategoryFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryTestCategoryVerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridCategoryRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryTestCategoryVerticalGridCategoryRow.DraggingDestination = this.DragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams.UICategoryTestCategoryVerticalGridCategoryRowDraggingDestination;
		}
		public void DragAddedCategoryFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryTestCategoryVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryTestCategoryVerticalGridRow.DraggingDestination = this.DragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams.UICategoryTestCategoryVerticalGridRowDraggingDestination;
		}
		public void DragAddedCategoryFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryTestCategoryVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryTestCategoryVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryTestCategoryVerticalGridRow.DraggingDestination = this.DragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams.UICategoryTestCategoryVerticalGridRowDraggingDestination;
		}
		public void DragCategoryRowWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow3VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow3VerticalGridCategoryRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragCategoryRowWithInsertBeforeDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow3VerticalGridCategoryRow.DraggingDestination = this.DragCategoryRowWithInsertBeforeDragActionParams.UICategoryRow3VerticalGridCategoryRowDraggingDestination;
		}
		public void DragCategoryRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow3VerticalGridCategoryRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow3VerticalGridCategoryRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragCategoryRowWithMoveChildDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow3VerticalGridCategoryRow.DraggingDestination = this.DragCategoryRowWithMoveChildDragActionParams.UICategoryRow3VerticalGridCategoryRowDraggingDestination;
		}
		public void DragRowWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragRowWithInsertAfterDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowTitle_Of_CourtesyVerticalGridRow.DraggingDestination = this.DragRowWithInsertAfterDragActionParams.UIRowTitle_Of_CourtesyVerticalGridRowDraggingDestination;
		}
		public void DragRowWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowPhotoVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowPhotoVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragRowWithInsertBeforeDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowPhotoVerticalGridRow.DraggingDestination = this.DragRowWithInsertBeforeDragActionParams.UIRowPhotoVerticalGridRowDraggingDestination;
		}
		public void DragRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowLast_NameVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowLast_NameVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragRowWithMoveChildDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowLast_NameVerticalGridRow.DraggingDestination = this.DragRowWithMoveChildDragActionParams.UIRowLast_NameVerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.DraggingDestination = this.DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams.UICategoryRow1VerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.DraggingDestination = this.DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams.UICategoryRow1VerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowExtensionVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowExtensionVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowExtensionVerticalGridRow.DraggingDestination = this.DragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIRowExtensionVerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridRowFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowTitle_Of_CourtesyVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowTitle_Of_CourtesyVerticalGridRow.DraggingDestination = this.DragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams.UIRowTitle_Of_CourtesyVerticalGridRowDraggingDestination;
		}
		public void DragCategoryRowWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragCategoryRowWithInsertAfterDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.DraggingDestination = this.DragCategoryRowWithInsertAfterDragActionParams.UICategoryRow1VerticalGridRowDraggingDestination;
		}
		public void CheckTreeListColumnsFilterStringProperties()
		{
			#region Variable Declarations
			DXTreeListColumnHeader uIOriginCityTreeListColumnHeader = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UIOriginCityTreeListColumnHeader;
			DXTestControl uITreeListFilterPanelTTreeListElement = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListFilterPanelCustom.UITreeListFilterPanelTTreeListElement;
			#endregion
			Assert.AreEqual(this.CheckTreeListColumnsFilterStringPropertiesExpectedValues.UIOriginCityTreeListColumnHeaderFilterString, uIOriginCityTreeListColumnHeader.FilterString);
			StringAssert.Contains(uITreeListFilterPanelTTreeListElement.FilterString, this.CheckTreeListColumnsFilterStringPropertiesExpectedValues.UITreeListFilterPanelTTreeListElementFilterString);
		}
		public void DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uIRowHire_DateVerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UIRowHire_DateVerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uIRowHire_DateVerticalGridRow.DraggingDestination = this.DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams.UIRowHire_DateVerticalGridRowDraggingDestination;
		}
		public void DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridRow uICategoryRow1VerticalGridRow = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIRowCustomizationCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams.UIVGridControl1VerticalGridFocusedCellAsString;
			uICategoryRow1VerticalGridRow.DraggingDestination = this.DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams.UICategoryRow1VerticalGridRowDraggingDestination;
		}
		public void DragPropertyGridRowsWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowBorderStylePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBorderStylePropertyGridRow;
			DXVerticalGridRow uIRowCursorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowCursorPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowBorderStylePropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithMoveChildDragActionParams.UIRowBorderStylePropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowCursorPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsWithMoveChildDragActionParams.UIRowCursorPropertyGridRowDraggingDestination;
		}
		public void DragPropertyGridCategoryRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryBehaviorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBehaviorPropertyGridRow;
			DXVerticalGridRow uICategoryBarManagerPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryBehaviorPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowWithMoveChildDragActionParams.UICategoryBehaviorPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryBarManagerPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowWithMoveChildDragActionParams.UICategoryBarManagerPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridCategoryRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowBackgroundImageLaPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBackgroundImageLaPropertyGridRow;
			DXVerticalGridRow uICategoryBehaviorPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBehaviorPropertyGridCategoryRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXVerticalGridRow uICategoryBarManagerPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues.UIRowBackgroundImageLaPropertyGridRowChildrenCount, uIRowBackgroundImageLaPropertyGridRow.ChildrenCount);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues.UICategoryBehaviorPropertyGridCategoryRowParentName, uICategoryBehaviorPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues.UICategoryBehaviorPropertyGridCategoryRowVisibleIndex, uICategoryBehaviorPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues.UIRowFontPropertyGridRowChildrenCount, uIRowFontPropertyGridRow.ChildrenCount);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues.UICategoryBarManagerPropertyGridCategoryRowParentName, uICategoryBarManagerPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues.UICategoryBarManagerPropertyGridCategoryRowVisibleIndex, uICategoryBarManagerPropertyGridCategoryRow.VisibleIndex);
		}
		public void DragPropertyGridRowsFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXVerticalGridRow uIRowBackgroundImagePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBackgroundImagePropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowFontPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams.UIRowFontPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowBackgroundImagePropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams.UIRowBackgroundImagePropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowBackgroundImagePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowBackgroundImagePropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXVerticalGridRow uIRowTabIndexPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowTabIndexPropertyGridRow;
			DXVerticalGridRow uIRowMenuManagerPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowMenuManagerPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowBackgroundImagePropertyGridRowParentName, uIRowBackgroundImagePropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowBackgroundImagePropertyGridRowVisibleIndex, uIRowBackgroundImagePropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowFontPropertyGridRowParentName, uIRowFontPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowFontPropertyGridRowVisibleIndex, uIRowFontPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowTabIndexPropertyGridRowChildrenCount, uIRowTabIndexPropertyGridRow.ChildrenCount);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues.UIRowMenuManagerPropertyGridRowChildrenCount, uIRowMenuManagerPropertyGridRow.ChildrenCount);
		}
		public void DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowRightToLeftPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowRightToLeftPropertyGridRow;
			DXVerticalGridRow uIRowUseWaitCursorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowUseWaitCursorPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowRightToLeftPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams.UIRowRightToLeftPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowUseWaitCursorPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams.UIRowUseWaitCursorPropertyGridRowDraggingDestination;
		}
		public void DragNodesToDragAndDropAreaWithDisabledDragAndDropOption()
		{
			#region Variable Declarations
			DXTreeListCell uIFieldOfficeEastCoastTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode.UIFieldOfficeEastCoastTreeListCell;
			DXListBox uIListBox1List = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List;
			DXTreeListCell uIFinanceTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UIFinanceTreeListCell;
			DXTreeListCell uICustomerServicesTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode1TreeListNode.UICustomerServicesTreeListCell;
			#endregion
			uIListBox1List.EnsureClickable(new Point(38, 55));
			Mouse.StartDragging(uIFieldOfficeEastCoastTreeListCell, new Point(42, 6));
			Mouse.StopDragging(uIListBox1List, new Point(38, 55));
			uIListBox1List.EnsureClickable(new Point(57, 100));
			Mouse.StartDragging(uIFinanceTreeListCell, new Point(50, 13));
			Mouse.StopDragging(uIListBox1List, new Point(57, 100));
			uIListBox1List.EnsureClickable(new Point(94, 170));
			Mouse.StartDragging(uICustomerServicesTreeListCell, new Point(50, 3));
			Mouse.StopDragging(uIListBox1List, new Point(94, 170));
		}
		public void CheckDraggingNodeWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode.UINode0TreeListNode1;
			#endregion
			Assert.AreEqual(this.CheckDraggingNodeWithMoveChildDragActionExpectedValues.UINode0TreeListNode1Exists, uINode0TreeListNode1.Exists);
		}
		public void DragNodeWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXTestControl uINode0TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNodeSelectImage;
			DXTestControl uINode1TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UINode1TreeListNodeSelectImage;
			#endregion
			uINode1TreeListNodeSelectImage.EnsureClickable(new Point(15, 17));
			Mouse.StartDragging(uINode0TreeListNodeSelectImage, new Point(7, 8));
			Mouse.StopDragging(uINode1TreeListNodeSelectImage, new Point(15, 17));
		}
		public void CheckDraggingNodeWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXTreeListNode uINode1TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode;
			DXTreeListNode uINode0TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UINode0TreeListNode;
			DXTreeListNode uINode1TreeListNode1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UINode1TreeListNode1;
			#endregion
			Assert.AreEqual(this.CheckDraggingNodeWithInsertBeforeDragActionExpectedValues.UINode1TreeListNodeExists, uINode1TreeListNode.Exists);
			Assert.AreEqual(this.CheckDraggingNodeWithInsertBeforeDragActionExpectedValues.UINode0TreeListNodeExists, uINode0TreeListNode.Exists);
			Assert.AreEqual(this.CheckDraggingNodeWithInsertBeforeDragActionExpectedValues.UINode1TreeListNode1Exists, uINode1TreeListNode1.Exists);
		}
		public void DragNodeWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXTestControl uINode1TreeListNodeSelectImage = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UINode1TreeListNodeSelectImage;
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList;
			#endregion
			uITreeList1TreeList.EnsureClickable(new Point(61, 170));
			Mouse.StartDragging(uINode1TreeListNodeSelectImage, new Point(29, 11));
			Mouse.StopDragging(uITreeList1TreeList, new Point(61, 170));
		}
		public void CheckDraggingNodeWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXTreeListNode uINode2TreeListNode = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UINode2TreeListNode;
			#endregion
			Assert.AreEqual(this.CheckDraggingNodeWithInsertAfterDragActionExpectedValues.UINode2TreeListNodeExists, uINode2TreeListNode.Exists);
		}
		public void DragPropertyGridCategoryRowsToCustomizationForm()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryAppearancePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow;
			DXVerticalGridRow uICategoryDataPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridRow;
			DXVerticalGridRow uICategoryLayoutPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsToCustomizationFormParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryAppearancePropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsToCustomizationFormParams.UICategoryAppearancePropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsToCustomizationFormParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryDataPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsToCustomizationFormParams.UICategoryDataPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsToCustomizationFormParams.UIPropertyGridControl1PropertyGridFocusedCellAsString2;
			uICategoryLayoutPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsToCustomizationFormParams.UICategoryLayoutPropertyGridRowDraggingDestination;
		}
		public void CheckPropertyGridCategoryRowsInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uIAppearanceListItem = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UIAppearanceListItem;
			DXListBoxItem uIDataListItem = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UIDataListItem;
			DXListBoxItem uILayoutListItem = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UILayoutListItem;
			#endregion
			Assert.AreEqual(this.CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIAppearanceListItemText, uIAppearanceListItem.Text);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIAppearanceListItemIndex, uIAppearanceListItem.Index);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIDataListItemText, uIDataListItem.Text);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIDataListItemIndex, uIDataListItem.Index);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues.UILayoutListItemText, uILayoutListItem.Text);
			Assert.AreEqual(this.CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues.UILayoutListItemIndex, uILayoutListItem.Index);
		}
		public void CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowRightToLeftPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowRightToLeftPropertyGridRow;
			DXVerticalGridRow uIRowUseWaitCursorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowUseWaitCursorPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowRightToLeftPropertyGridRowParentName, uIRowRightToLeftPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowRightToLeftPropertyGridRowVisibleIndex, uIRowRightToLeftPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowUseWaitCursorPropertyGridRowParentName, uIRowUseWaitCursorPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UIRowUseWaitCursorPropertyGridRowVisibleIndex, uIRowUseWaitCursorPropertyGridRow.VisibleIndex);
		}
		public void DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowAnchorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowAnchorPropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXVerticalGridRow uIRowRightToLeftPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowRightToLeftPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowAnchorPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIRowAnchorPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowFontPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIRowFontPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString2;
			uIRowRightToLeftPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIRowRightToLeftPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowAnchorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowAnchorPropertyGridRow;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXVerticalGridRow uIRowRightToLeftPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowRightToLeftPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowAnchorPropertyGridRowParentName, uIRowAnchorPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowAnchorPropertyGridRowVisibleIndex, uIRowAnchorPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowFontPropertyGridRowParentName, uIRowFontPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowFontPropertyGridRowVisibleIndex, uIRowFontPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowRightToLeftPropertyGridRowParentName, uIRowRightToLeftPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UIRowRightToLeftPropertyGridRowVisibleIndex, uIRowRightToLeftPropertyGridRow.VisibleIndex);
		}
		public void DragPropertyGridRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXScrollBar uIVScrollBarScrollBarControl = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpRowsClient.UILbRowsList.UIVScrollBarScrollBarControl;
			DXVerticalGridRow uIRowLocationPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowLocationPropertyGridRow;
			DXVerticalGridRow uIRowUseWaitCursorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowUseWaitCursorPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowFontPropertyGridRow.DraggingDestination = this.DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIRowFontPropertyGridRowDraggingDestination;
			uIVScrollBarScrollBarControl.ValueAsString = this.DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIVScrollBarScrollBarControlValueAsString;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowLocationPropertyGridRow.DraggingDestination = this.DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIRowLocationPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString2;
			uIRowUseWaitCursorPropertyGridRow.DraggingDestination = this.DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams.UIRowUseWaitCursorPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowFontPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowFontPropertyGridRow;
			DXVerticalGridRow uIRowLocationPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowLocationPropertyGridRow;
			DXVerticalGridRow uIRowUseWaitCursorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowUseWaitCursorPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowFontPropertyGridRowParentName, uIRowFontPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowFontPropertyGridRowVisibleIndex, uIRowFontPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowLocationPropertyGridRowParentName, uIRowLocationPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowLocationPropertyGridRowVisibleIndex, uIRowLocationPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowUseWaitCursorPropertyGridRowParentName, uIRowUseWaitCursorPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UIRowUseWaitCursorPropertyGridRowVisibleIndex, uIRowUseWaitCursorPropertyGridRow.VisibleIndex);
		}
		public void DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowForeColorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowForeColorPropertyGridRow;
			DXVerticalGridRow uIRowLocationPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowLocationPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowForeColorPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UIRowForeColorPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uIRowLocationPropertyGridRow.DraggingDestination = this.DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UIRowLocationPropertyGridRowDraggingDestination;
		}
		public void ExpandCollapsedRow()
		{
			#region Variable Declarations
			DXTestControl uIPropertyGridExpandBuPropertyGridExpandButton = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowPropertiesPropertyGridRow.UIPropertyGridExpandBuPropertyGridExpandButton;
			#endregion
			Mouse.Click(uIPropertyGridExpandBuPropertyGridExpandButton, new Point(3, 7));
		}
		public void CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uIRowForeColorPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowForeColorPropertyGridRow;
			DXVerticalGridRow uIRowLocationPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowLocationPropertyGridRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UIRowForeColorPropertyGridRowParentName, uIRowForeColorPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UIRowForeColorPropertyGridRowVisibleIndex, uIRowForeColorPropertyGridRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UIRowLocationPropertyGridRowParentName, uIRowLocationPropertyGridRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UIRowLocationPropertyGridRowVisibleIndex, uIRowLocationPropertyGridRow.VisibleIndex);
		}
		public void DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryAppearancePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow;
			DXVerticalGridRow uICategoryLayoutPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridRow;
			DXVerticalGridRow uICategoryDataPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryAppearancePropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams.UICategoryAppearancePropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryLayoutPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams.UICategoryLayoutPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString2;
			uICategoryDataPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams.UICategoryDataPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryLayoutPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridCategoryRow;
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			DXVerticalGridRow uICategoryDataPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowParentName, uICategoryLayoutPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowVisibleIndex, uICategoryLayoutPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowParentName, uICategoryAppearancePropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowVisibleIndex, uICategoryAppearancePropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowParentName, uICategoryDataPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowVisibleIndex, uICategoryDataPropertyGridCategoryRow.VisibleIndex);
		}
		public void DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryLayoutPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridRow;
			DXVerticalGridRow uICategoryAppearancePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow;
			DXVerticalGridRow uICategoryDataPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryLayoutPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UICategoryLayoutPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryAppearancePropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UICategoryAppearancePropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString2;
			uICategoryDataPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams.UICategoryDataPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			DXVerticalGridRow uICategoryDataPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridCategoryRow;
			DXVerticalGridRow uICategoryLayoutPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowParentName, uICategoryAppearancePropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowVisibleIndex, uICategoryAppearancePropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowParentName, uICategoryDataPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowVisibleIndex, uICategoryDataPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowParentName, uICategoryLayoutPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowVisibleIndex, uICategoryLayoutPropertyGridCategoryRow.VisibleIndex);
		}
		public void DragLastPropertyGridCategoryRowsToCustomizationForm()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryPropertiesPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryPropertiesPropertyGridRow;
			DXVerticalGridRow uICategoryToolTipPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryToolTipPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragLastPropertyGridCategoryRowsToCustomizationFormParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryPropertiesPropertyGridRow.DraggingDestination = this.DragLastPropertyGridCategoryRowsToCustomizationFormParams.UICategoryPropertiesPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragLastPropertyGridCategoryRowsToCustomizationFormParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryToolTipPropertyGridRow.DraggingDestination = this.DragLastPropertyGridCategoryRowsToCustomizationFormParams.UICategoryToolTipPropertyGridRowDraggingDestination;
		}
		public void CheckLastPropertyGridCategoryRowsInCustomizationForm()
		{
			#region Variable Declarations
			DXListBoxItem uIPropertiesListItem = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UIPropertiesListItem;
			DXListBoxItem uIToolTipListItem = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIPropertyGridControl1Window.UITabControl1TabList.UITpCategoriesClient.UILbCategoriesList.UIToolTipListItem;
			#endregion
			Assert.AreEqual(this.CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIPropertiesListItemText, uIPropertiesListItem.Text);
			Assert.AreEqual(this.CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIPropertiesListItemIndex, uIPropertiesListItem.Index);
			Assert.AreEqual(this.CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIToolTipListItemText, uIToolTipListItem.Text);
			Assert.AreEqual(this.CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues.UIToolTipListItemIndex, uIToolTipListItem.Index);
		}
		public void DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryToolTipPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryToolTipPropertyGridRow;
			DXVerticalGridRow uICategoryPropertiesPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryPropertiesPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryToolTipPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams.UICategoryToolTipPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryPropertiesPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams.UICategoryPropertiesPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryPropertiesPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryPropertiesPropertyGridCategoryRow;
			DXVerticalGridRow uICategoryToolTipPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryToolTipPropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryPropertiesPropertyGridCategoryRowParentName, uICategoryPropertiesPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryPropertiesPropertyGridCategoryRowVisibleIndex, uICategoryPropertiesPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryToolTipPropertyGridCategoryRowParentName, uICategoryToolTipPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues.UICategoryToolTipPropertyGridCategoryRowVisibleIndex, uICategoryToolTipPropertyGridCategoryRow.VisibleIndex);
		}
		public void DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryAppearancePropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridRow;
			DXVerticalGridRow uICategoryDataPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridRow;
			DXVerticalGridRow uICategoryLayoutPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryAppearancePropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams.UICategoryAppearancePropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryDataPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams.UICategoryDataPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString2;
			uICategoryLayoutPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams.UICategoryLayoutPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryAppearancePropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryAppearancePropertyGridCategoryRow;
			DXVerticalGridRow uICategoryDataPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridCategoryRow;
			DXVerticalGridRow uICategoryLayoutPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowParentName, uICategoryAppearancePropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryAppearancePropertyGridCategoryRowVisibleIndex, uICategoryAppearancePropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowParentName, uICategoryDataPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowVisibleIndex, uICategoryDataPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowParentName, uICategoryLayoutPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowVisibleIndex, uICategoryLayoutPropertyGridCategoryRow.VisibleIndex);
		}
		public void DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryDataPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridRow;
			DXVerticalGridRow uICategoryLayoutPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryDataPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams.UICategoryDataPropertyGridRowDraggingDestination;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryLayoutPropertyGridRow.DraggingDestination = this.DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams.UICategoryLayoutPropertyGridRowDraggingDestination;
		}
		public void CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragAction()
		{
			#region Variable Declarations
			DXVerticalGridRow uICategoryDataPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryDataPropertyGridCategoryRow;
			DXVerticalGridRow uICategoryLayoutPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryLayoutPropertyGridCategoryRow;
			#endregion
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowParentName, uICategoryDataPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryDataPropertyGridCategoryRowVisibleIndex, uICategoryDataPropertyGridCategoryRow.VisibleIndex);
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowParentName, uICategoryLayoutPropertyGridCategoryRow.GetProperty(DXTestControl.PropertyNames.ParentName).ToString());
			Assert.AreEqual(this.CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues.UICategoryLayoutPropertyGridCategoryRowVisibleIndex, uICategoryLayoutPropertyGridCategoryRow.VisibleIndex);
		}
		public void CheckDragAndDropListBoxItems()
		{
			#region Variable Declarations
			DXListBoxItem uIHomePhone2065559857ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIHomePhone2065559857ListItem;
			DXListBoxItem uIEngineering1100000MoListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIEngineering1100000MoListItem;
			DXListBoxItem uICustomerServices8500ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UICustomerServices8500ListItem;
			#endregion
			Assert.AreEqual(this.CheckDragAndDropListBoxItemsExpectedValues.UIHomePhone2065559857ListItemText, uIHomePhone2065559857ListItem.Text);
			Assert.AreEqual(this.CheckDragAndDropListBoxItemsExpectedValues.UIHomePhone2065559857ListItemIndex, uIHomePhone2065559857ListItem.Index);
			Assert.AreEqual(this.CheckDragAndDropListBoxItemsExpectedValues.UIHomePhone2065559857ListItemSelected, uIHomePhone2065559857ListItem.Selected);
			Assert.AreEqual(this.CheckDragAndDropListBoxItemsExpectedValues.UIEngineering1100000MoListItemText, uIEngineering1100000MoListItem.Text);
			Assert.AreEqual(this.CheckDragAndDropListBoxItemsExpectedValues.UIEngineering1100000MoListItemIndex, uIEngineering1100000MoListItem.Index);
			Assert.AreEqual(this.CheckDragAndDropListBoxItemsExpectedValues.UICustomerServices8500ListItemText, uICustomerServices8500ListItem.Text);
			Assert.AreEqual(this.CheckDragAndDropListBoxItemsExpectedValues.UICustomerServices8500ListItemIndex, uICustomerServices8500ListItem.Index);
		}
		public void CollapseExpandedCategoryRow()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uICategoryBarManagerPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridCategoryRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.CollapseExpandedCategoryRowParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uICategoryBarManagerPropertyGridCategoryRow.Expanded = this.CollapseExpandedCategoryRowParams.UICategoryBarManagerPropertyGridCategoryRowExpanded;
		}
		public void ExpandCollapsedRows()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridRow uIRowPropertiesPropertyGridRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIRowPropertiesPropertyGridRow;
			DXScrollBar uIVGridVertScrollBarScrollBarControl = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UIVGridVertScrollBarScrollBarControl;
			DXVerticalGridRow uICategoryBarManagerPropertyGridCategoryRow = this.UIXtraVerticalGridFeatWindow5.UIPanelControl1Client.UIGcContainerClient.UIFixedRowsCustom.UIPropertyGridControl1PropertyGrid.UICategoryBarManagerPropertyGridCategoryRow;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ExpandCollapsedRowsParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			uIRowPropertiesPropertyGridRow.Expanded = this.ExpandCollapsedRowsParams.UIRowPropertiesPropertyGridRowExpanded;
			uIVGridVertScrollBarScrollBarControl.ValueAsString = this.ExpandCollapsedRowsParams.UIVGridVertScrollBarScrollBarControlValueAsString;
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ExpandCollapsedRowsParams.UIPropertyGridControl1PropertyGridFocusedCellAsString1;
			uICategoryBarManagerPropertyGridCategoryRow.Expanded = this.ExpandCollapsedRowsParams.UICategoryBarManagerPropertyGridCategoryRowExpanded;
		}
		public void ChangeTreeListCellsValueViaProgressBarEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem58TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode4TreeListNode.UIItem58TreeListCell;
			DXTestControl uINode4ColumntreeListCProgressBar = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode4TreeListNode.UIItem58TreeListCell.UINode4ColumntreeListCProgressBar;
			#endregion
			Mouse.Click(uIItem58TreeListCell, new Point(132, 5));
			uINode4ColumntreeListCProgressBar.ValueAsString = this.ChangeTreeListCellsValueViaProgressBarEditorParams.UINode4ColumntreeListCProgressBarValueAsString;
		}
		public void CheckChangedTreeListCellsValueViaProgressBarEditor()
		{
			#region Variable Declarations
			DXTreeListCell uIItem58TreeListCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode4TreeListNode.UIItem58TreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues.UIItem58TreeListCellValueAsString, uIItem58TreeListCell.ValueAsString);
		}
		public void ChangeTreeListCellValueViaUpAndLeftKeys()
		{
			#region Variable Declarations
			DXTreeListCell uICodTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode11TreeListNode.UICodTreeListCell;
			DXTextEdit uINode11ColumntreeListEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode11TreeListNode.UICodTreeListCell.UINode11ColumntreeListEdit;
			DXTextEdit uINode10ColumntreeListEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode10TreeListNode.UIGreenlingTreeListCell.UINode10ColumntreeListEdit;
			DXTextEdit uINode9ColumntreeListCEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode9TreeListNode.UIRayTreeListCell.UINode9ColumntreeListCEdit;
			DXTextEdit uINode8ColumntreeListCEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode8TreeListNode.UITriggerfishTreeListCell.UINode8ColumntreeListCEdit;
			DXTextEdit uINode7ColumntreeListCEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode7TreeListNode.UISurfperchTreeListCell.UINode7ColumntreeListCEdit;
			DXTextEdit uINode6ColumntreeListCEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode6TreeListNode.UIScorpionfishTreeListCell.UINode6ColumntreeListCEdit;
			DXTextEdit uINode5ColumntreeListCEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode5TreeListNode.UIGruntTreeListCell.UINode5ColumntreeListCEdit;
			DXTextEdit uINode5ColumntreeListCEdit1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode5TreeListNode.UIHaemulonflavolineatuTreeListCell.UINode5ColumntreeListCEdit;
			DXTextEdit uINode5ColumntreeListCEdit2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode5TreeListNode.UITestTreeListCell.UINode5ColumntreeListCEdit;
			#endregion
			Mouse.Click(uICodTreeListCell, new Point(77, 11));
			Keyboard.SendKeys(uINode11ColumntreeListEdit, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode11ColumntreeListEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uINode10ColumntreeListEdit, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode10ColumntreeListEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uINode9ColumntreeListCEdit, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode9ColumntreeListCEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uINode8ColumntreeListCEdit, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode8ColumntreeListCEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uINode7ColumntreeListCEdit, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode7ColumntreeListCEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uINode6ColumntreeListCEdit, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode6ColumntreeListCEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uINode5ColumntreeListCEdit, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode5ColumntreeListCEditSendKeys, ModifierKeys.None);
			Keyboard.SendKeys(uINode5ColumntreeListCEdit1, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode5ColumntreeListCEditSendKeys1, ModifierKeys.None);
			uINode5ColumntreeListCEdit2.ValueAsString = this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode5ColumntreeListCEditValueAsString;
			Keyboard.SendKeys(uINode5ColumntreeListCEdit2, this.ChangeTreeListCellValueViaUpAndLeftKeysParams.UINode5ColumntreeListCEditSendKeys2, ModifierKeys.None);
		}
		public void CheckChangedTreeListCellValueViaUpAndLeftKeys()
		{
			#region Variable Declarations
			DXTreeListCell uITestTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UINodesNavigationCustom.UITreeList1TreeList.UINode5TreeListNode.UITestTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues.UITestTreeListCellValueAsString, uITestTreeListCell.ValueAsString);
		}
		public void ResizeNodesViaDraggingIndicatorRowBottomEdge()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UITreeListMultiEditorsCustom.UITreeList1TreeList.UINode0TreeListNode;
			#endregion
			uINode0TreeListNode.Height = this.ResizeNodesViaDraggingIndicatorRowBottomEdgeParams.UINode0TreeListNodeHeight;
		}
		public void ChangePropertyGridCellValueViaEscKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridCell uIWhitePropertyGridCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowBackColorPropertyGridRow.UIWhitePropertyGridCell;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ChangePropertyGridCellValueViaEscKeyParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIWhitePropertyGridCell, new Point(89, 15));
		}
		public void ChangeVerticalGridFocusedCellEditorValueViaEscKey()
		{
			#region Variable Declarations
			DXVerticalGrid uIVGridControl1VerticalGrid = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid;
			DXVerticalGridCell uIItem24VerticalGridCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UIRowMPGVerticalGridRow.UIItem24VerticalGridCell;
			DXTextEdit uITextEditEdit2 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDataModeCustom.UIVGridControl1VerticalGrid.UITextEditEdit2;
			#endregion
			uIVGridControl1VerticalGrid.FocusedCellAsString = this.ChangeVerticalGridFocusedCellEditorValueViaEscKeyParams.UIVGridControl1VerticalGridFocusedCellAsString;
			Mouse.Click(uIItem24VerticalGridCell, new Point(32, 7));
			Keyboard.SendKeys(uITextEditEdit2, this.ChangeVerticalGridFocusedCellEditorValueViaEscKeyParams.UITextEditEdit2SendKeys, ModifierKeys.None);
		}
		public void ChangePropertyGridCellValueViaMouse()
		{
			#region Variable Declarations
			DXVerticalGrid uIPropertyGridControl1PropertyGrid = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid;
			DXVerticalGridCell uIWhitePropertyGridCell = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIRowBackColorPropertyGridRow.UIWhitePropertyGridCell;
			DXColorEdit uIColorEditColorEdit = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIColorEditColorEdit;
			#endregion
			uIPropertyGridControl1PropertyGrid.FocusedCellAsString = this.ChangePropertyGridCellValueViaMouseParams.UIPropertyGridControl1PropertyGridFocusedCellAsString;
			Mouse.Click(uIWhitePropertyGridCell, new Point(289, 6));
			uIColorEditColorEdit.ValueAsString = this.ChangePropertyGridCellValueViaMouseParams.UIColorEditColorEditValueAsString;
		}
		public void CheckChangedPropertyGridCellValueViaMouse()
		{
			#region Variable Declarations
			DXColorEdit uIColorEditColorEdit = this.UIXtraVerticalGridFeatWindow3.UIPanelControl1Client.UIGcContainerClient.UIPropertyGridCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient.UIPropertyGridControl1PropertyGrid.UIColorEditColorEdit;
			#endregion
			Assert.AreEqual(this.CheckChangedPropertyGridCellValueViaMouseExpectedValues.UIColorEditColorEditValueAsString, uIColorEditColorEdit.ValueAsString);
		}
		public void ClickExpressionEditorOkButton()
		{
			#region Variable Declarations
			DXButton uISimpleButtonButton = this.UIExpressioneditorWindow.UISimpleButtonButton;
			#endregion
			Mouse.Click(uISimpleButtonButton, new Point(1, 1));
		}
		public void DragRowsToDragAndDropArea()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uITitleOfCourtesyVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowTitle_Of_CourtesyVerticalGridRow.UITitleOfCourtesyVerticalGridHeaderCell;
			DXListBox uIListBox1List = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List;
			DXVerticalGridHeaderCell uICityVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIMultiEditorRow1VerticalGridRow.UICityVerticalGridHeaderCell;
			DXVerticalGridHeaderCell uIHomePhoneVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowHome_PhoneVerticalGridRow.UIHomePhoneVerticalGridHeaderCell;
			DXListBoxItem uIEngineering1100000MoListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIEngineering1100000MoListItem;
			DXVerticalGridHeaderCell uIFirstNameVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UIRowFirst_NameVerticalGridRow.UIFirstNameVerticalGridHeaderCell;
			DXListBoxItem uIHomePhone2065559857ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIHomePhone2065559857ListItem;
			#endregion
			uIListBox1List.EnsureClickable(new Point(83, 21));
			Mouse.StartDragging(uITitleOfCourtesyVerticalGridHeaderCell, new Point(121, 10));
			Mouse.StopDragging(uIListBox1List, new Point(83, 21));
			uIListBox1List.EnsureClickable(new Point(82, 43));
			Mouse.StartDragging(uITitleOfCourtesyVerticalGridHeaderCell, new Point(126, 10));
			Mouse.StopDragging(uIListBox1List, new Point(82, 43));
			uIListBox1List.EnsureClickable(new Point(117, 84));
			Mouse.StartDragging(uICityVerticalGridHeaderCell, new Point(66, 8));
			Mouse.StopDragging(uIListBox1List, new Point(117, 84));
			uIEngineering1100000MoListItem.EnsureClickable(new Point(64, 12));
			Mouse.StartDragging(uIHomePhoneVerticalGridHeaderCell, new Point(5, 9));
			Mouse.StopDragging(uIEngineering1100000MoListItem, new Point(64, 12));
			uIHomePhone2065559857ListItem.EnsureClickable(new Point(27, 6));
			Mouse.StartDragging(uIFirstNameVerticalGridHeaderCell, new Point(45, 9));
			Mouse.StopDragging(uIHomePhone2065559857ListItem, new Point(27, 6));
		}
		public void CheckDraggingRowsToDragAndDropArea()
		{
			#region Variable Declarations
			DXListBoxItem uIHomePhone2065559857ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIHomePhone2065559857ListItem;
			DXListBoxItem uIEngineering1100000MoListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIEngineering1100000MoListItem;
			DXListBoxItem uICustomerServices8500ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UICustomerServices8500ListItem;
			DXListBoxItem uICorporateHeadquarterListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UICorporateHeadquarterListItem;
			DXListBoxItem uICustomerServices8500ListItem1 = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UICustomerServices8500ListItem1;
			#endregion
			Assert.AreEqual(this.CheckDraggingRowsToDragAndDropAreaExpectedValues.UIHomePhone2065559857ListItemIndex, uIHomePhone2065559857ListItem.Index);
			Assert.AreEqual(this.CheckDraggingRowsToDragAndDropAreaExpectedValues.UIEngineering1100000MoListItemIndex, uIEngineering1100000MoListItem.Index);
			Assert.AreEqual(this.CheckDraggingRowsToDragAndDropAreaExpectedValues.UIEngineering1100000MoListItemSelected, uIEngineering1100000MoListItem.Selected);
			Assert.AreEqual(this.CheckDraggingRowsToDragAndDropAreaExpectedValues.UICustomerServices8500ListItemIndex, uICustomerServices8500ListItem.Index);
			Assert.AreEqual(this.CheckDraggingRowsToDragAndDropAreaExpectedValues.UICorporateHeadquarterListItemIndex, uICorporateHeadquarterListItem.Index);
			Assert.AreEqual(this.CheckDraggingRowsToDragAndDropAreaExpectedValues.UICustomerServices8500ListItem1Index, uICustomerServices8500ListItem1.Index);
		}
		public void DragCategoryRowsToDragAndDropArea()
		{
			#region Variable Declarations
			DXVerticalGridHeaderCell uIPhotoNotesVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow3VerticalGridRow.UIPhotoNotesVerticalGridHeaderCell;
			DXListBox uIListBox1List = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List;
			DXVerticalGridHeaderCell uIEmployeeVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow1VerticalGridRow.UIEmployeeVerticalGridHeaderCell;
			DXVerticalGridHeaderCell uIAddressVerticalGridHeaderCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIVGridControl1VerticalGrid.UICategoryRow2VerticalGridRow.UIAddressVerticalGridHeaderCell;
			DXListBoxItem uIHomePhone2065559857ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIHomePhone2065559857ListItem;
			#endregion
			uIListBox1List.EnsureClickable(new Point(93, 17));
			Mouse.StartDragging(uIPhotoNotesVerticalGridHeaderCell, new Point(94, 6));
			Mouse.StopDragging(uIListBox1List, new Point(93, 17));
			uIListBox1List.EnsureClickable(new Point(75, 53));
			Mouse.StartDragging(uIEmployeeVerticalGridHeaderCell, new Point(53, 11));
			Mouse.StopDragging(uIListBox1List, new Point(75, 53));
			uIHomePhone2065559857ListItem.EnsureClickable(new Point(46, 5));
			Mouse.StartDragging(uIAddressVerticalGridHeaderCell, new Point(66, 9));
			Mouse.StopDragging(uIHomePhone2065559857ListItem, new Point(46, 5));
		}
		public void CheckDraggingCategoryRowsToDragAndDropArea()
		{
			#region Variable Declarations
			DXListBoxItem uIEngineering1100000MoListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIEngineering1100000MoListItem;
			DXListBoxItem uIHomePhone2065559857ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UIHomePhone2065559857ListItem;
			DXListBoxItem uICustomerServices8500ListItem = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UIDragDropCustom.UIListBox1List.UICustomerServices8500ListItem;
			#endregion
			Assert.AreEqual(this.CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues.UIEngineering1100000MoListItemSelected, uIEngineering1100000MoListItem.Selected);
			Assert.AreEqual(this.CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues.UIEngineering1100000MoListItemIndex, uIEngineering1100000MoListItem.Index);
			Assert.AreEqual(this.CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues.UIHomePhone2065559857ListItemIndex, uIHomePhone2065559857ListItem.Index);
			Assert.AreEqual(this.CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues.UICustomerServices8500ListItemIndex, uICustomerServices8500ListItem.Index);
		}
		public void SwitchToDevExpressAppearance()
		{
			#region Variable Declarations
			DXButton uIRibbonGalleryDropDowButton = this.UIXtraVerticalGridFeatWindow3.UIRibbonControl1Ribbon.UIRpMainRibbonPage.UIRpgAppearanceRibbonPageGroup.UISkinsRibbonGallery.UIRibbonGalleryDropDowButton;
			DXTestControl uIDevExpressStyleGalleryItem = this.UIItemWindow1.UIGalleryDropDownBarCoMenu.UIStandardSkinsGalleryItemGroup.UIDevExpressStyleGalleryItem;
			#endregion
			Mouse.Click(uIRibbonGalleryDropDowButton, new Point(6, 13));
			Mouse.Click(uIDevExpressStyleGalleryItem, new Point(78, 41));
		}
		public void CheckReorderedTreeListNodesViaDragging()
		{
			#region Variable Declarations
			DXTreeListNode uINode0TreeListNode = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode1TreeListNode.UINode1TreeListNode1.UINode0TreeListNode;
			DXTreeListNode uINode0TreeListNode1 = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode2TreeListNode.UINode0TreeListNode.UINode1TreeListNode.UINode0TreeListNode;
			#endregion
			Assert.AreEqual(this.CheckReorderedTreeListNodesViaDraggingExpectedValues.UINode0TreeListNodeExists, uINode0TreeListNode.Exists);
			Assert.AreEqual(this.CheckReorderedTreeListNodesViaDraggingExpectedValues.UINode0TreeListNodeExists1, uINode0TreeListNode1.Exists);
		}
		public void CreateNodesHierarchy()
		{
			#region Variable Declarations
			DXButton uIAddRootButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UIPanel2Client.UIAddRootButton;
			DXTreeListCell uINode0ChildNodesCountTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0ChildNodesCountTreeListCell;
			DXTextEdit uINode0ColumntreeListCEdit = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0ChildNodesCountTreeListCell.UINode0ColumntreeListCEdit;
			DXButton uIAddChildButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UIPanel2Client.UIAddChildButton;
			DXTreeListCell uINode4ChildNodesCountTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode4ChildNodesCountTreeListCell;
			DXTreeListCell uINode5ChildNodesCountTreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode1.UINode0TreeListNode.UINode5ChildNodesCountTreeListCell;
			DXTreeListCell uINode2TreeListCell = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UITreeList1TreeList.UINode2TreeListNode.UINode2TreeListCell;
			DXButton uIDeleteButton = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UIPanel2Client.UIDeleteButton;
			#endregion
			Mouse.Click(uIAddRootButton, new Point(1, 1));
			Mouse.Click(uIAddRootButton, new Point(1, 1));
			Mouse.Click(uIAddRootButton, new Point(1, 1));
			Mouse.Click(uINode0ChildNodesCountTreeListCell, new Point(22, 11));
			uINode0ColumntreeListCEdit.ValueAsString = this.CreateNodesHierarchyParams.UINode0ColumntreeListCEditValueAsString;
			Keyboard.SendKeys(uINode0ColumntreeListCEdit, this.CreateNodesHierarchyParams.UINode0ColumntreeListCEditSendKeys, ModifierKeys.None);
			Mouse.Click(uIAddChildButton, new Point(1, 1));
			Mouse.Click(uINode4ChildNodesCountTreeListCell, new Point(33, 9));
			Mouse.Click(uIAddChildButton, new Point(1, 1));
			Mouse.Click(uINode5ChildNodesCountTreeListCell, new Point(27, 10));
			Mouse.Click(uIAddChildButton, new Point(1, 1));
			Mouse.Click(uINode2TreeListCell, new Point(20, 11));
			Mouse.Click(uIDeleteButton, new Point(1, 1));
		}
		public void CheckCreatedNodesHierarchy()
		{
			#region Variable Declarations
			DXTreeList uITreeList1TreeList = this.UITutorialsCcodeWindow.UIPcMainClient.UIGcContainerClient.UICustomTreeListNodeCustom.UITreeList1TreeList;
			#endregion
			Assert.AreEqual(this.CheckCreatedNodesHierarchyExpectedValues.UITreeList1TreeListNodesCount, uITreeList1TreeList.NodesCount);
		}
		public void CheckPropertyGrindChanges()
		{
			#region Variable Declarations
			DXVerticalGridCell uIRowrowNameMarkettestPropertyGridCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient1.UIPropertyGridControl1PropertyGrid.UIRowNamePropertyGridRow.UIRowrowNameMarkettestPropertyGridCell;
			DXVerticalGridCell uIRowrowStartDate05062PropertyGridCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient1.UIPropertyGridControl1PropertyGrid.UIRowStartDatePropertyGridRow.UIRowrowStartDate05062PropertyGridCell;
			DXVerticalGridCell uIRowrowEndDate1506202PropertyGridCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient1.UIPropertyGridControl1PropertyGrid.UIRowEndDatePropertyGridRow.UIRowrowEndDate1506202PropertyGridCell;
			DXVerticalGridCell uIRowrowPriorityHighPropertyGridCell = this.UIXtraTreeListFeaturesWindow2.UIPanelControl1Client.UIGcContainerClient.UIBusinessObjectBindinCustom.UISplitContainerControSplitContainerControl.UISplitGroupPanelClient1.UIPropertyGridControl1PropertyGrid.UIRowPriorityPropertyGridRow.UIRowrowPriorityHighPropertyGridCell;
			#endregion
			Assert.AreEqual(this.CheckPropertyGrindChangesExpectedValues.UIRowrowNameMarkettestPropertyGridCellText, uIRowrowNameMarkettestPropertyGridCell.Text);
			Assert.AreEqual(this.CheckPropertyGrindChangesExpectedValues.UIRowrowStartDate05062PropertyGridCellValueAsString, uIRowrowStartDate05062PropertyGridCell.ValueAsString);
			Assert.AreEqual(this.CheckPropertyGrindChangesExpectedValues.UIRowrowEndDate1506202PropertyGridCellValueAsString, uIRowrowEndDate1506202PropertyGridCell.ValueAsString);
			Assert.AreEqual(this.CheckPropertyGrindChangesExpectedValues.UIRowrowPriorityHighPropertyGridCellValueAsString, uIRowrowPriorityHighPropertyGridCell.ValueAsString);
		}
		public void CheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKey()
		{
			#region Variable Declarations
			DXTreeListCell uIMarketresearchTreeListCell = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode1TreeListNode.UINode0TreeListNode.UINode0TreeListNode1.UIMarketresearchTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues.UIMarketresearchTreeListCellValueAsString, uIMarketresearchTreeListCell.ValueAsString);
		}
		public void CheckAddedTreeListNodes()
		{
			#region Variable Declarations
			DXTreeListCell uITaskTreeListCell = this.UIXtraTreeListFeaturesWindow4.UIPanelControl1Client.UIGcContainerClient.UITreeListDragDropCustom.UITreeList1TreeList.UINode0TreeListNode.UINode0TreeListNode11.UINode3TreeListNode.UITaskTreeListCell;
			#endregion
			Assert.AreEqual(this.CheckAddedTreeListNodesExpectedValues.UITaskTreeListCellValueAsString, uITaskTreeListCell.ValueAsString);
		}
		public void ChangeFilterExpression()
		{
			#region Variable Declarations
			DXTestControl uITreeListFilterPanelMTreeListElement = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UITreeListFilterPanelCustom.UITreeListFilterPanelMTreeListElement;
			DXListBoxItem uIComboBoxPopupListBoxListItem = this.UIXtraTreeListFeaturesWindow1.UIPanelControl1Client.UIGcContainerClient.UINodesFilteringCustom.UITreeList1TreeList.UIMruFilterComboComboBox.UIComboBoxPopupListBoxWindow.UIComboBoxPopupListBoxList.UIComboBoxPopupListBoxListItem;
			#endregion
			Mouse.Click(uITreeListFilterPanelMTreeListElement, new Point(7, 9));
			Mouse.Click(uIComboBoxPopupListBoxListItem, new Point(106, 8));
		}
		#region Properties
		public virtual SwitchToCategoryRowButtonDemoModuleParams SwitchToCategoryRowButtonDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToCategoryRowButtonDemoModuleParams == null))
				{
					this.mSwitchToCategoryRowButtonDemoModuleParams = new SwitchToCategoryRowButtonDemoModuleParams();
				}
				return this.mSwitchToCategoryRowButtonDemoModuleParams;
			}
		}
		public virtual CheckCategoryRowCollapsedStateExpectedValues CheckCategoryRowCollapsedStateExpectedValues
		{
			get
			{
				if ((this.mCheckCategoryRowCollapsedStateExpectedValues == null))
				{
					this.mCheckCategoryRowCollapsedStateExpectedValues = new CheckCategoryRowCollapsedStateExpectedValues();
				}
				return this.mCheckCategoryRowCollapsedStateExpectedValues;
			}
		}
		public virtual CheckCategoryRowExpandedStateExpectedValues CheckCategoryRowExpandedStateExpectedValues
		{
			get
			{
				if ((this.mCheckCategoryRowExpandedStateExpectedValues == null))
				{
					this.mCheckCategoryRowExpandedStateExpectedValues = new CheckCategoryRowExpandedStateExpectedValues();
				}
				return this.mCheckCategoryRowExpandedStateExpectedValues;
			}
		}
		public virtual SwitchToTreeViewExpandButtonStyleParams SwitchToTreeViewExpandButtonStyleParams
		{
			get
			{
				if ((this.mSwitchToTreeViewExpandButtonStyleParams == null))
				{
					this.mSwitchToTreeViewExpandButtonStyleParams = new SwitchToTreeViewExpandButtonStyleParams();
				}
				return this.mSwitchToTreeViewExpandButtonStyleParams;
			}
		}
		public virtual SwitchToDragAndDropDemoModuleParams SwitchToDragAndDropDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToDragAndDropDemoModuleParams == null))
				{
					this.mSwitchToDragAndDropDemoModuleParams = new SwitchToDragAndDropDemoModuleParams();
				}
				return this.mSwitchToDragAndDropDemoModuleParams;
			}
		}
		public virtual CheckDragRowHeadersCheckBoxParams CheckDragRowHeadersCheckBoxParams
		{
			get
			{
				if ((this.mCheckDragRowHeadersCheckBoxParams == null))
				{
					this.mCheckDragRowHeadersCheckBoxParams = new CheckDragRowHeadersCheckBoxParams();
				}
				return this.mCheckDragRowHeadersCheckBoxParams;
			}
		}
		public virtual CheckDraggingRowWithMoveChildDragActionExpectedValues CheckDraggingRowWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowWithMoveChildDragActionExpectedValues = new CheckDraggingRowWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingRowWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingRowWithMoveToEndDragActionExpectedValues CheckDraggingRowWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowWithMoveToEndDragActionExpectedValues = new CheckDraggingRowWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingRowWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingRowWithInsertBeforeDragActionExpectedValues CheckDraggingRowWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowWithInsertBeforeDragActionExpectedValues = new CheckDraggingRowWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingRowWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingRowWithInsertAfterDragActionExpectedValues CheckDraggingRowWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowWithInsertAfterDragActionExpectedValues = new CheckDraggingRowWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingRowWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowWithMoveChildDragActionExpectedValues = new CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues = new CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues = new CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues = new CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual SwitchToResizingDemoModuleParams SwitchToResizingDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToResizingDemoModuleParams == null))
				{
					this.mSwitchToResizingDemoModuleParams = new SwitchToResizingDemoModuleParams();
				}
				return this.mSwitchToResizingDemoModuleParams;
			}
		}
		public virtual ChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams ChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams
		{
			get
			{
				if ((this.mChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams == null))
				{
					this.mChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams = new ChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams();
				}
				return this.mChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams;
			}
		}
		public virtual CheckVerticalGridRecordWidthExpectedValues CheckVerticalGridRecordWidthExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridRecordWidthExpectedValues == null))
				{
					this.mCheckVerticalGridRecordWidthExpectedValues = new CheckVerticalGridRecordWidthExpectedValues();
				}
				return this.mCheckVerticalGridRecordWidthExpectedValues;
			}
		}
		public virtual ChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams ChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams
		{
			get
			{
				if ((this.mChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams == null))
				{
					this.mChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams = new ChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams();
				}
				return this.mChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams;
			}
		}
		public virtual ChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams ChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams
		{
			get
			{
				if ((this.mChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams == null))
				{
					this.mChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams = new ChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams();
				}
				return this.mChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams;
			}
		}
		public virtual CheckVerticalGridRowHeaderWidthExpectedValues CheckVerticalGridRowHeaderWidthExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridRowHeaderWidthExpectedValues == null))
				{
					this.mCheckVerticalGridRowHeaderWidthExpectedValues = new CheckVerticalGridRowHeaderWidthExpectedValues();
				}
				return this.mCheckVerticalGridRowHeaderWidthExpectedValues;
			}
		}
		public virtual ChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams ChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams
		{
			get
			{
				if ((this.mChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams == null))
				{
					this.mChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams = new ChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams();
				}
				return this.mChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams;
			}
		}
		public virtual ChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams ChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams
		{
			get
			{
				if ((this.mChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams == null))
				{
					this.mChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams = new ChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams();
				}
				return this.mChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams;
			}
		}
		public virtual CheckVerticalGridCategoryRowHeaderHeightExpectedValues CheckVerticalGridCategoryRowHeaderHeightExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridCategoryRowHeaderHeightExpectedValues == null))
				{
					this.mCheckVerticalGridCategoryRowHeaderHeightExpectedValues = new CheckVerticalGridCategoryRowHeaderHeightExpectedValues();
				}
				return this.mCheckVerticalGridCategoryRowHeaderHeightExpectedValues;
			}
		}
		public virtual ChangeVerticalGridRowHeightViaDraggingRowEdgeParams ChangeVerticalGridRowHeightViaDraggingRowEdgeParams
		{
			get
			{
				if ((this.mChangeVerticalGridRowHeightViaDraggingRowEdgeParams == null))
				{
					this.mChangeVerticalGridRowHeightViaDraggingRowEdgeParams = new ChangeVerticalGridRowHeightViaDraggingRowEdgeParams();
				}
				return this.mChangeVerticalGridRowHeightViaDraggingRowEdgeParams;
			}
		}
		public virtual CheckVerticalGridRowHeightExpectedValues CheckVerticalGridRowHeightExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridRowHeightExpectedValues == null))
				{
					this.mCheckVerticalGridRowHeightExpectedValues = new CheckVerticalGridRowHeightExpectedValues();
				}
				return this.mCheckVerticalGridRowHeightExpectedValues;
			}
		}
		public virtual ChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams ChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams
		{
			get
			{
				if ((this.mChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams == null))
				{
					this.mChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams = new ChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams();
				}
				return this.mChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams;
			}
		}
		public virtual CheckVerticalGridRecordsIntervalExpectedValues CheckVerticalGridRecordsIntervalExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridRecordsIntervalExpectedValues == null))
				{
					this.mCheckVerticalGridRecordsIntervalExpectedValues = new CheckVerticalGridRecordsIntervalExpectedValues();
				}
				return this.mCheckVerticalGridRecordsIntervalExpectedValues;
			}
		}
		public virtual SwitchToLayoutAndPaintStylesDemoModuleParams SwitchToLayoutAndPaintStylesDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToLayoutAndPaintStylesDemoModuleParams == null))
				{
					this.mSwitchToLayoutAndPaintStylesDemoModuleParams = new SwitchToLayoutAndPaintStylesDemoModuleParams();
				}
				return this.mSwitchToLayoutAndPaintStylesDemoModuleParams;
			}
		}
		public virtual SwitchToBandsViewLayoutStyleParams SwitchToBandsViewLayoutStyleParams
		{
			get
			{
				if ((this.mSwitchToBandsViewLayoutStyleParams == null))
				{
					this.mSwitchToBandsViewLayoutStyleParams = new SwitchToBandsViewLayoutStyleParams();
				}
				return this.mSwitchToBandsViewLayoutStyleParams;
			}
		}
		public virtual ChangeVerticalGridBandWidthViaDraggingBandEdgeParams ChangeVerticalGridBandWidthViaDraggingBandEdgeParams
		{
			get
			{
				if ((this.mChangeVerticalGridBandWidthViaDraggingBandEdgeParams == null))
				{
					this.mChangeVerticalGridBandWidthViaDraggingBandEdgeParams = new ChangeVerticalGridBandWidthViaDraggingBandEdgeParams();
				}
				return this.mChangeVerticalGridBandWidthViaDraggingBandEdgeParams;
			}
		}
		public virtual CheckVerticalGridBandWidthExpectedValues CheckVerticalGridBandWidthExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridBandWidthExpectedValues == null))
				{
					this.mCheckVerticalGridBandWidthExpectedValues = new CheckVerticalGridBandWidthExpectedValues();
				}
				return this.mCheckVerticalGridBandWidthExpectedValues;
			}
		}
		public virtual SwitchToMultiEditorsRowDemoModuleParams SwitchToMultiEditorsRowDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToMultiEditorsRowDemoModuleParams == null))
				{
					this.mSwitchToMultiEditorsRowDemoModuleParams = new SwitchToMultiEditorsRowDemoModuleParams();
				}
				return this.mSwitchToMultiEditorsRowDemoModuleParams;
			}
		}
		public virtual ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams
		{
			get
			{
				if ((this.mChangeMultiEditorsCellVerticalLineSeparatorsPositionParams == null))
				{
					this.mChangeMultiEditorsCellVerticalLineSeparatorsPositionParams = new ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams();
				}
				return this.mChangeMultiEditorsCellVerticalLineSeparatorsPositionParams;
			}
		}
		public virtual CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues
		{
			get
			{
				if ((this.mCheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues == null))
				{
					this.mCheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues = new CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues();
				}
				return this.mCheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues;
			}
		}
		public virtual ChangeMultiEditorsCellStringSeparatorsPositionParams ChangeMultiEditorsCellStringSeparatorsPositionParams
		{
			get
			{
				if ((this.mChangeMultiEditorsCellStringSeparatorsPositionParams == null))
				{
					this.mChangeMultiEditorsCellStringSeparatorsPositionParams = new ChangeMultiEditorsCellStringSeparatorsPositionParams();
				}
				return this.mChangeMultiEditorsCellStringSeparatorsPositionParams;
			}
		}
		public virtual CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues
		{
			get
			{
				if ((this.mCheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues == null))
				{
					this.mCheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues = new CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues();
				}
				return this.mCheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues;
			}
		}
		public virtual ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams
		{
			get
			{
				if ((this.mChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams == null))
				{
					this.mChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams = new ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams();
				}
				return this.mChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams;
			}
		}
		public virtual CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues
		{
			get
			{
				if ((this.mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues == null))
				{
					this.mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues = new CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues();
				}
				return this.mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues;
			}
		}
		public virtual ChangeMultiEditorsHeaderCellStringSeparatorsPositionParams ChangeMultiEditorsHeaderCellStringSeparatorsPositionParams
		{
			get
			{
				if ((this.mChangeMultiEditorsHeaderCellStringSeparatorsPositionParams == null))
				{
					this.mChangeMultiEditorsHeaderCellStringSeparatorsPositionParams = new ChangeMultiEditorsHeaderCellStringSeparatorsPositionParams();
				}
				return this.mChangeMultiEditorsHeaderCellStringSeparatorsPositionParams;
			}
		}
		public virtual CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues
		{
			get
			{
				if ((this.mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues == null))
				{
					this.mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues = new CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues();
				}
				return this.mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues;
			}
		}
		public virtual ChangeMultiEditorsSeparatorStringParams ChangeMultiEditorsSeparatorStringParams
		{
			get
			{
				if ((this.mChangeMultiEditorsSeparatorStringParams == null))
				{
					this.mChangeMultiEditorsSeparatorStringParams = new ChangeMultiEditorsSeparatorStringParams();
				}
				return this.mChangeMultiEditorsSeparatorStringParams;
			}
		}
		public virtual CheckChangedMultiEditorsSeparatorStringExpectedValues CheckChangedMultiEditorsSeparatorStringExpectedValues
		{
			get
			{
				if ((this.mCheckChangedMultiEditorsSeparatorStringExpectedValues == null))
				{
					this.mCheckChangedMultiEditorsSeparatorStringExpectedValues = new CheckChangedMultiEditorsSeparatorStringExpectedValues();
				}
				return this.mCheckChangedMultiEditorsSeparatorStringExpectedValues;
			}
		}
		public virtual SwitchToRowCustomizationDemoModuleParams SwitchToRowCustomizationDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToRowCustomizationDemoModuleParams == null))
				{
					this.mSwitchToRowCustomizationDemoModuleParams = new SwitchToRowCustomizationDemoModuleParams();
				}
				return this.mSwitchToRowCustomizationDemoModuleParams;
			}
		}
		public virtual CheckVerticalGridRowInCustomizationFormExpectedValues CheckVerticalGridRowInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridRowInCustomizationFormExpectedValues == null))
				{
					this.mCheckVerticalGridRowInCustomizationFormExpectedValues = new CheckVerticalGridRowInCustomizationFormExpectedValues();
				}
				return this.mCheckVerticalGridRowInCustomizationFormExpectedValues;
			}
		}
		public virtual CheckVerticalGridCategoryRowInCustomizationFormExpectedValues CheckVerticalGridCategoryRowInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridCategoryRowInCustomizationFormExpectedValues == null))
				{
					this.mCheckVerticalGridCategoryRowInCustomizationFormExpectedValues = new CheckVerticalGridCategoryRowInCustomizationFormExpectedValues();
				}
				return this.mCheckVerticalGridCategoryRowInCustomizationFormExpectedValues;
			}
		}
		public virtual CheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues CheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues = new CheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues CheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues = new CheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues CheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues = new CheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues CheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues = new CheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues = new CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues = new CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues = new CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues = new CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual AddNewCategoryRowViaCustomizationFormOkButtonParams AddNewCategoryRowViaCustomizationFormOkButtonParams
		{
			get
			{
				if ((this.mAddNewCategoryRowViaCustomizationFormOkButtonParams == null))
				{
					this.mAddNewCategoryRowViaCustomizationFormOkButtonParams = new AddNewCategoryRowViaCustomizationFormOkButtonParams();
				}
				return this.mAddNewCategoryRowViaCustomizationFormOkButtonParams;
			}
		}
		public virtual CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues = new CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues = new CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues = new CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual DragVerticalGridRowWithMoveToEndDragActionParams DragVerticalGridRowWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridRowWithMoveToEndDragActionParams == null))
				{
					this.mDragVerticalGridRowWithMoveToEndDragActionParams = new DragVerticalGridRowWithMoveToEndDragActionParams();
				}
				return this.mDragVerticalGridRowWithMoveToEndDragActionParams;
			}
		}
		public virtual CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues = new CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual DragAnotherVerticalGridCategoryRowToCustomizationFormParams DragAnotherVerticalGridCategoryRowToCustomizationFormParams
		{
			get
			{
				if ((this.mDragAnotherVerticalGridCategoryRowToCustomizationFormParams == null))
				{
					this.mDragAnotherVerticalGridCategoryRowToCustomizationFormParams = new DragAnotherVerticalGridCategoryRowToCustomizationFormParams();
				}
				return this.mDragAnotherVerticalGridCategoryRowToCustomizationFormParams;
			}
		}
		public virtual DeleteVerticalGridCategoryRowInCustomizationFormParams DeleteVerticalGridCategoryRowInCustomizationFormParams
		{
			get
			{
				if ((this.mDeleteVerticalGridCategoryRowInCustomizationFormParams == null))
				{
					this.mDeleteVerticalGridCategoryRowInCustomizationFormParams = new DeleteVerticalGridCategoryRowInCustomizationFormParams();
				}
				return this.mDeleteVerticalGridCategoryRowInCustomizationFormParams;
			}
		}
		public virtual CheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues CheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues == null))
				{
					this.mCheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues = new CheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues();
				}
				return this.mCheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues;
			}
		}
		public virtual CheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues CheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues == null))
				{
					this.mCheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues = new CheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues();
				}
				return this.mCheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues;
			}
		}
		public virtual CollapseCategoryRowViaDoubleClickHeaderCellParams CollapseCategoryRowViaDoubleClickHeaderCellParams
		{
			get
			{
				if ((this.mCollapseCategoryRowViaDoubleClickHeaderCellParams == null))
				{
					this.mCollapseCategoryRowViaDoubleClickHeaderCellParams = new CollapseCategoryRowViaDoubleClickHeaderCellParams();
				}
				return this.mCollapseCategoryRowViaDoubleClickHeaderCellParams;
			}
		}
		public virtual ExpandCategoryRowViaDoubleClickHeaderCellImageParams ExpandCategoryRowViaDoubleClickHeaderCellImageParams
		{
			get
			{
				if ((this.mExpandCategoryRowViaDoubleClickHeaderCellImageParams == null))
				{
					this.mExpandCategoryRowViaDoubleClickHeaderCellImageParams = new ExpandCategoryRowViaDoubleClickHeaderCellImageParams();
				}
				return this.mExpandCategoryRowViaDoubleClickHeaderCellImageParams;
			}
		}
		public virtual CollapseCategoryRowViaDoubleClickParams CollapseCategoryRowViaDoubleClickParams
		{
			get
			{
				if ((this.mCollapseCategoryRowViaDoubleClickParams == null))
				{
					this.mCollapseCategoryRowViaDoubleClickParams = new CollapseCategoryRowViaDoubleClickParams();
				}
				return this.mCollapseCategoryRowViaDoubleClickParams;
			}
		}
		public virtual CheckAddedCategoryRowInCustomizationFormExpectedValues CheckAddedCategoryRowInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckAddedCategoryRowInCustomizationFormExpectedValues == null))
				{
					this.mCheckAddedCategoryRowInCustomizationFormExpectedValues = new CheckAddedCategoryRowInCustomizationFormExpectedValues();
				}
				return this.mCheckAddedCategoryRowInCustomizationFormExpectedValues;
			}
		}
		public virtual AddNewCategoryRowViaEnterKeyParams AddNewCategoryRowViaEnterKeyParams
		{
			get
			{
				if ((this.mAddNewCategoryRowViaEnterKeyParams == null))
				{
					this.mAddNewCategoryRowViaEnterKeyParams = new AddNewCategoryRowViaEnterKeyParams();
				}
				return this.mAddNewCategoryRowViaEnterKeyParams;
			}
		}
		public virtual CollapseCategoryRowViaMinusKeyParams CollapseCategoryRowViaMinusKeyParams
		{
			get
			{
				if ((this.mCollapseCategoryRowViaMinusKeyParams == null))
				{
					this.mCollapseCategoryRowViaMinusKeyParams = new CollapseCategoryRowViaMinusKeyParams();
				}
				return this.mCollapseCategoryRowViaMinusKeyParams;
			}
		}
		public virtual ExpandCategoryRowViaPlusKeyParams ExpandCategoryRowViaPlusKeyParams
		{
			get
			{
				if ((this.mExpandCategoryRowViaPlusKeyParams == null))
				{
					this.mExpandCategoryRowViaPlusKeyParams = new ExpandCategoryRowViaPlusKeyParams();
				}
				return this.mExpandCategoryRowViaPlusKeyParams;
			}
		}
		public virtual ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams
		{
			get
			{
				if ((this.mChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams == null))
				{
					this.mChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams = new ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams();
				}
				return this.mChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams;
			}
		}
		public virtual CheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues CheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues == null))
				{
					this.mCheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues = new CheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues();
				}
				return this.mCheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams
		{
			get
			{
				if ((this.mChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams == null))
				{
					this.mChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams = new ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams();
				}
				return this.mChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams;
			}
		}
		public virtual CheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues CheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues
		{
			get
			{
				if ((this.mCheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues == null))
				{
					this.mCheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues = new CheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues();
				}
				return this.mCheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues;
			}
		}
		public virtual SwitchToDataModeDemoModuleParams SwitchToDataModeDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToDataModeDemoModuleParams == null))
				{
					this.mSwitchToDataModeDemoModuleParams = new SwitchToDataModeDemoModuleParams();
				}
				return this.mSwitchToDataModeDemoModuleParams;
			}
		}
		public virtual ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams
		{
			get
			{
				if ((this.mChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams == null))
				{
					this.mChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams = new ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams();
				}
				return this.mChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueExpectedValues CheckChangedVerticalGridCellValueExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueExpectedValues = new CheckChangedVerticalGridCellValueExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueExpectedValues;
			}
		}
		public virtual ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams
		{
			get
			{
				if ((this.mChangeVerticalGridFocusedCellEditorValueViaF2KeyParams == null))
				{
					this.mChangeVerticalGridFocusedCellEditorValueViaF2KeyParams = new ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams();
				}
				return this.mChangeVerticalGridFocusedCellEditorValueViaF2KeyParams;
			}
		}
		public virtual ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams
		{
			get
			{
				if ((this.mChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams == null))
				{
					this.mChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams = new ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams();
				}
				return this.mChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues CheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues = new CheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaEscKeyExpectedValues CheckChangedVerticalGridCellValueViaEscKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaEscKeyExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaEscKeyExpectedValues = new CheckChangedVerticalGridCellValueViaEscKeyExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaEscKeyExpectedValues;
			}
		}
		public virtual SwitchToRowFormatDemoModuleParams SwitchToRowFormatDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToRowFormatDemoModuleParams == null))
				{
					this.mSwitchToRowFormatDemoModuleParams = new SwitchToRowFormatDemoModuleParams();
				}
				return this.mSwitchToRowFormatDemoModuleParams;
			}
		}
		public virtual ChangeVerticalGridCellDateFormatValueParams ChangeVerticalGridCellDateFormatValueParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellDateFormatValueParams == null))
				{
					this.mChangeVerticalGridCellDateFormatValueParams = new ChangeVerticalGridCellDateFormatValueParams();
				}
				return this.mChangeVerticalGridCellDateFormatValueParams;
			}
		}
		public virtual CheckChangedVerticalGridCellDateFormatValueExpectedValues CheckChangedVerticalGridCellDateFormatValueExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellDateFormatValueExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellDateFormatValueExpectedValues = new CheckChangedVerticalGridCellDateFormatValueExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellDateFormatValueExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellDecimalFormatValueParams ChangeVerticalGridCellDecimalFormatValueParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellDecimalFormatValueParams == null))
				{
					this.mChangeVerticalGridCellDecimalFormatValueParams = new ChangeVerticalGridCellDecimalFormatValueParams();
				}
				return this.mChangeVerticalGridCellDecimalFormatValueParams;
			}
		}
		public virtual CheckChangedVerticalGridCellDecimalFormatValueExpectedValues CheckChangedVerticalGridCellDecimalFormatValueExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellDecimalFormatValueExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellDecimalFormatValueExpectedValues = new CheckChangedVerticalGridCellDecimalFormatValueExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellDecimalFormatValueExpectedValues;
			}
		}
		public virtual SwitchToEditorsDemoModuleParams SwitchToEditorsDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToEditorsDemoModuleParams == null))
				{
					this.mSwitchToEditorsDemoModuleParams = new SwitchToEditorsDemoModuleParams();
				}
				return this.mSwitchToEditorsDemoModuleParams;
			}
		}
		public virtual ChangeVerticalGridCellValueViaSpinEditorParams ChangeVerticalGridCellValueViaSpinEditorParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellValueViaSpinEditorParams == null))
				{
					this.mChangeVerticalGridCellValueViaSpinEditorParams = new ChangeVerticalGridCellValueViaSpinEditorParams();
				}
				return this.mChangeVerticalGridCellValueViaSpinEditorParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaSpinEditorExpectedValues CheckChangedVerticalGridCellValueViaSpinEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaSpinEditorExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaSpinEditorExpectedValues = new CheckChangedVerticalGridCellValueViaSpinEditorExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaSpinEditorExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellValueViaImageComboBoxEditorParams ChangeVerticalGridCellValueViaImageComboBoxEditorParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellValueViaImageComboBoxEditorParams == null))
				{
					this.mChangeVerticalGridCellValueViaImageComboBoxEditorParams = new ChangeVerticalGridCellValueViaImageComboBoxEditorParams();
				}
				return this.mChangeVerticalGridCellValueViaImageComboBoxEditorParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues CheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues = new CheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues;
			}
		}
		public virtual SwitchToRowsNavigationDemoModuleParams SwitchToRowsNavigationDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToRowsNavigationDemoModuleParams == null))
				{
					this.mSwitchToRowsNavigationDemoModuleParams = new SwitchToRowsNavigationDemoModuleParams();
				}
				return this.mSwitchToRowsNavigationDemoModuleParams;
			}
		}
		public virtual ChangeVerticalGridFirstCellValueViaHomeKeyParams ChangeVerticalGridFirstCellValueViaHomeKeyParams
		{
			get
			{
				if ((this.mChangeVerticalGridFirstCellValueViaHomeKeyParams == null))
				{
					this.mChangeVerticalGridFirstCellValueViaHomeKeyParams = new ChangeVerticalGridFirstCellValueViaHomeKeyParams();
				}
				return this.mChangeVerticalGridFirstCellValueViaHomeKeyParams;
			}
		}
		public virtual CheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues CheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues == null))
				{
					this.mCheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues = new CheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues();
				}
				return this.mCheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues;
			}
		}
		public virtual ChangeVerticalGridLastCellValueViaEndKeyParams ChangeVerticalGridLastCellValueViaEndKeyParams
		{
			get
			{
				if ((this.mChangeVerticalGridLastCellValueViaEndKeyParams == null))
				{
					this.mChangeVerticalGridLastCellValueViaEndKeyParams = new ChangeVerticalGridLastCellValueViaEndKeyParams();
				}
				return this.mChangeVerticalGridLastCellValueViaEndKeyParams;
			}
		}
		public virtual CheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues CheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues == null))
				{
					this.mCheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues = new CheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues();
				}
				return this.mCheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellValueViaPageDownKeyParams ChangeVerticalGridCellValueViaPageDownKeyParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellValueViaPageDownKeyParams == null))
				{
					this.mChangeVerticalGridCellValueViaPageDownKeyParams = new ChangeVerticalGridCellValueViaPageDownKeyParams();
				}
				return this.mChangeVerticalGridCellValueViaPageDownKeyParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues CheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues = new CheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellValueViaPageUpKeyParams ChangeVerticalGridCellValueViaPageUpKeyParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellValueViaPageUpKeyParams == null))
				{
					this.mChangeVerticalGridCellValueViaPageUpKeyParams = new ChangeVerticalGridCellValueViaPageUpKeyParams();
				}
				return this.mChangeVerticalGridCellValueViaPageUpKeyParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues CheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues = new CheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellValueViaCtrlEndShortcutParams ChangeVerticalGridCellValueViaCtrlEndShortcutParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellValueViaCtrlEndShortcutParams == null))
				{
					this.mChangeVerticalGridCellValueViaCtrlEndShortcutParams = new ChangeVerticalGridCellValueViaCtrlEndShortcutParams();
				}
				return this.mChangeVerticalGridCellValueViaCtrlEndShortcutParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues CheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues = new CheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellValueViaCtrlHomeShortcutParams ChangeVerticalGridCellValueViaCtrlHomeShortcutParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellValueViaCtrlHomeShortcutParams == null))
				{
					this.mChangeVerticalGridCellValueViaCtrlHomeShortcutParams = new ChangeVerticalGridCellValueViaCtrlHomeShortcutParams();
				}
				return this.mChangeVerticalGridCellValueViaCtrlHomeShortcutParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues CheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues = new CheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues;
			}
		}
		public virtual EditingVerticalGridCellValueViaArrowKeysParams EditingVerticalGridCellValueViaArrowKeysParams
		{
			get
			{
				if ((this.mEditingVerticalGridCellValueViaArrowKeysParams == null))
				{
					this.mEditingVerticalGridCellValueViaArrowKeysParams = new EditingVerticalGridCellValueViaArrowKeysParams();
				}
				return this.mEditingVerticalGridCellValueViaArrowKeysParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaArrowKeysExpectedValues CheckChangedVerticalGridCellValueViaArrowKeysExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaArrowKeysExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaArrowKeysExpectedValues = new CheckChangedVerticalGridCellValueViaArrowKeysExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaArrowKeysExpectedValues;
			}
		}
		public virtual SwitchToScrollVisibilityDemoModuleParams SwitchToScrollVisibilityDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToScrollVisibilityDemoModuleParams == null))
				{
					this.mSwitchToScrollVisibilityDemoModuleParams = new SwitchToScrollVisibilityDemoModuleParams();
				}
				return this.mSwitchToScrollVisibilityDemoModuleParams;
			}
		}
		public virtual SwitchToHorizontalScrollVisibilityParams SwitchToHorizontalScrollVisibilityParams
		{
			get
			{
				if ((this.mSwitchToHorizontalScrollVisibilityParams == null))
				{
					this.mSwitchToHorizontalScrollVisibilityParams = new SwitchToHorizontalScrollVisibilityParams();
				}
				return this.mSwitchToHorizontalScrollVisibilityParams;
			}
		}
		public virtual ScrollVerticalGridRecordsParams ScrollVerticalGridRecordsParams
		{
			get
			{
				if ((this.mScrollVerticalGridRecordsParams == null))
				{
					this.mScrollVerticalGridRecordsParams = new ScrollVerticalGridRecordsParams();
				}
				return this.mScrollVerticalGridRecordsParams;
			}
		}
		public virtual ChangeVerticalGridCellValueAfterScrollingRecordsParams ChangeVerticalGridCellValueAfterScrollingRecordsParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellValueAfterScrollingRecordsParams == null))
				{
					this.mChangeVerticalGridCellValueAfterScrollingRecordsParams = new ChangeVerticalGridCellValueAfterScrollingRecordsParams();
				}
				return this.mChangeVerticalGridCellValueAfterScrollingRecordsParams;
			}
		}
		public virtual CheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues CheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues = new CheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues;
			}
		}
		public virtual SwitchVerticalGridLayoutStyleToBandsViewParams SwitchVerticalGridLayoutStyleToBandsViewParams
		{
			get
			{
				if ((this.mSwitchVerticalGridLayoutStyleToBandsViewParams == null))
				{
					this.mSwitchVerticalGridLayoutStyleToBandsViewParams = new SwitchVerticalGridLayoutStyleToBandsViewParams();
				}
				return this.mSwitchVerticalGridLayoutStyleToBandsViewParams;
			}
		}
		public virtual SwitchVerticalGridLayoutStyleToSingleRecordViewParams SwitchVerticalGridLayoutStyleToSingleRecordViewParams
		{
			get
			{
				if ((this.mSwitchVerticalGridLayoutStyleToSingleRecordViewParams == null))
				{
					this.mSwitchVerticalGridLayoutStyleToSingleRecordViewParams = new SwitchVerticalGridLayoutStyleToSingleRecordViewParams();
				}
				return this.mSwitchVerticalGridLayoutStyleToSingleRecordViewParams;
			}
		}
		public virtual CreateExpressionsViaExpressionsEditorParams CreateExpressionsViaExpressionsEditorParams
		{
			get
			{
				if ((this.mCreateExpressionsViaExpressionsEditorParams == null))
				{
					this.mCreateExpressionsViaExpressionsEditorParams = new CreateExpressionsViaExpressionsEditorParams();
				}
				return this.mCreateExpressionsViaExpressionsEditorParams;
			}
		}
		public virtual CheckAddedUnboundRowExpectedValues CheckAddedUnboundRowExpectedValues
		{
			get
			{
				if ((this.mCheckAddedUnboundRowExpectedValues == null))
				{
					this.mCheckAddedUnboundRowExpectedValues = new CheckAddedUnboundRowExpectedValues();
				}
				return this.mCheckAddedUnboundRowExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams == null))
				{
					this.mChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams = new ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams();
				}
				return this.mChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams;
			}
		}
		public virtual CheckUnboundRowsChangesExpectedValues CheckUnboundRowsChangesExpectedValues
		{
			get
			{
				if ((this.mCheckUnboundRowsChangesExpectedValues == null))
				{
					this.mCheckUnboundRowsChangesExpectedValues = new CheckUnboundRowsChangesExpectedValues();
				}
				return this.mCheckUnboundRowsChangesExpectedValues;
			}
		}
		public virtual ChangeVerticalGridCellsValuesInSimpleModeParams ChangeVerticalGridCellsValuesInSimpleModeParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellsValuesInSimpleModeParams == null))
				{
					this.mChangeVerticalGridCellsValuesInSimpleModeParams = new ChangeVerticalGridCellsValuesInSimpleModeParams();
				}
				return this.mChangeVerticalGridCellsValuesInSimpleModeParams;
			}
		}
		public virtual CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues = new CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues;
			}
		}
		public virtual SwitchButtonModeToShowForFocusedRecordParams SwitchButtonModeToShowForFocusedRecordParams
		{
			get
			{
				if ((this.mSwitchButtonModeToShowForFocusedRecordParams == null))
				{
					this.mSwitchButtonModeToShowForFocusedRecordParams = new SwitchButtonModeToShowForFocusedRecordParams();
				}
				return this.mSwitchButtonModeToShowForFocusedRecordParams;
			}
		}
		public virtual ChangeVerticalGridCellsValuesInDataBindingModeParams ChangeVerticalGridCellsValuesInDataBindingModeParams
		{
			get
			{
				if ((this.mChangeVerticalGridCellsValuesInDataBindingModeParams == null))
				{
					this.mChangeVerticalGridCellsValuesInDataBindingModeParams = new ChangeVerticalGridCellsValuesInDataBindingModeParams();
				}
				return this.mChangeVerticalGridCellsValuesInDataBindingModeParams;
			}
		}
		public virtual CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues
		{
			get
			{
				if ((this.mCheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues == null))
				{
					this.mCheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues = new CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues();
				}
				return this.mCheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues;
			}
		}
		public virtual ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams
		{
			get
			{
				if ((this.mChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams == null))
				{
					this.mChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams = new ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams();
				}
				return this.mChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams;
			}
		}
		public virtual CheckFullNameValueAfterChangingFirstNameCellValueExpectedValues CheckFullNameValueAfterChangingFirstNameCellValueExpectedValues
		{
			get
			{
				if ((this.mCheckFullNameValueAfterChangingFirstNameCellValueExpectedValues == null))
				{
					this.mCheckFullNameValueAfterChangingFirstNameCellValueExpectedValues = new CheckFullNameValueAfterChangingFirstNameCellValueExpectedValues();
				}
				return this.mCheckFullNameValueAfterChangingFirstNameCellValueExpectedValues;
			}
		}
		public virtual ChangeFullNameFormatParams ChangeFullNameFormatParams
		{
			get
			{
				if ((this.mChangeFullNameFormatParams == null))
				{
					this.mChangeFullNameFormatParams = new ChangeFullNameFormatParams();
				}
				return this.mChangeFullNameFormatParams;
			}
		}
		public virtual CheckFullNameValueExpectedValues CheckFullNameValueExpectedValues
		{
			get
			{
				if ((this.mCheckFullNameValueExpectedValues == null))
				{
					this.mCheckFullNameValueExpectedValues = new CheckFullNameValueExpectedValues();
				}
				return this.mCheckFullNameValueExpectedValues;
			}
		}
		public virtual CheckPropertyGridCategoryRowCollapsedStateExpectedValues CheckPropertyGridCategoryRowCollapsedStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridCategoryRowCollapsedStateExpectedValues == null))
				{
					this.mCheckPropertyGridCategoryRowCollapsedStateExpectedValues = new CheckPropertyGridCategoryRowCollapsedStateExpectedValues();
				}
				return this.mCheckPropertyGridCategoryRowCollapsedStateExpectedValues;
			}
		}
		public virtual CheckPropertyGridCategoryRowExpandedStateExpectedValues CheckPropertyGridCategoryRowExpandedStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridCategoryRowExpandedStateExpectedValues == null))
				{
					this.mCheckPropertyGridCategoryRowExpandedStateExpectedValues = new CheckPropertyGridCategoryRowExpandedStateExpectedValues();
				}
				return this.mCheckPropertyGridCategoryRowExpandedStateExpectedValues;
			}
		}
		public virtual CollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams CollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams
		{
			get
			{
				if ((this.mCollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams == null))
				{
					this.mCollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams = new CollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams();
				}
				return this.mCollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams;
			}
		}
		public virtual CollapsePropertyGridCategoryRowViaDoubleClickParams CollapsePropertyGridCategoryRowViaDoubleClickParams
		{
			get
			{
				if ((this.mCollapsePropertyGridCategoryRowViaDoubleClickParams == null))
				{
					this.mCollapsePropertyGridCategoryRowViaDoubleClickParams = new CollapsePropertyGridCategoryRowViaDoubleClickParams();
				}
				return this.mCollapsePropertyGridCategoryRowViaDoubleClickParams;
			}
		}
		public virtual ExpandPropertyGridCategoryRowViaDoubleClickParams ExpandPropertyGridCategoryRowViaDoubleClickParams
		{
			get
			{
				if ((this.mExpandPropertyGridCategoryRowViaDoubleClickParams == null))
				{
					this.mExpandPropertyGridCategoryRowViaDoubleClickParams = new ExpandPropertyGridCategoryRowViaDoubleClickParams();
				}
				return this.mExpandPropertyGridCategoryRowViaDoubleClickParams;
			}
		}
		public virtual CollapsePropertyGridCategoryRowViaMinusKeyParams CollapsePropertyGridCategoryRowViaMinusKeyParams
		{
			get
			{
				if ((this.mCollapsePropertyGridCategoryRowViaMinusKeyParams == null))
				{
					this.mCollapsePropertyGridCategoryRowViaMinusKeyParams = new CollapsePropertyGridCategoryRowViaMinusKeyParams();
				}
				return this.mCollapsePropertyGridCategoryRowViaMinusKeyParams;
			}
		}
		public virtual ExpandPropertyGridCategoryRowViaPlusKeyParams ExpandPropertyGridCategoryRowViaPlusKeyParams
		{
			get
			{
				if ((this.mExpandPropertyGridCategoryRowViaPlusKeyParams == null))
				{
					this.mExpandPropertyGridCategoryRowViaPlusKeyParams = new ExpandPropertyGridCategoryRowViaPlusKeyParams();
				}
				return this.mExpandPropertyGridCategoryRowViaPlusKeyParams;
			}
		}
		public virtual CheckPropertyGridRowExpandedStateExpectedValues CheckPropertyGridRowExpandedStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowExpandedStateExpectedValues == null))
				{
					this.mCheckPropertyGridRowExpandedStateExpectedValues = new CheckPropertyGridRowExpandedStateExpectedValues();
				}
				return this.mCheckPropertyGridRowExpandedStateExpectedValues;
			}
		}
		public virtual CheckPropertyGridRowCollapsedStateExpectedValues CheckPropertyGridRowCollapsedStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowCollapsedStateExpectedValues == null))
				{
					this.mCheckPropertyGridRowCollapsedStateExpectedValues = new CheckPropertyGridRowCollapsedStateExpectedValues();
				}
				return this.mCheckPropertyGridRowCollapsedStateExpectedValues;
			}
		}
		public virtual ExpandPropertyGridRowViaDoubleClickParams ExpandPropertyGridRowViaDoubleClickParams
		{
			get
			{
				if ((this.mExpandPropertyGridRowViaDoubleClickParams == null))
				{
					this.mExpandPropertyGridRowViaDoubleClickParams = new ExpandPropertyGridRowViaDoubleClickParams();
				}
				return this.mExpandPropertyGridRowViaDoubleClickParams;
			}
		}
		public virtual CollapsePropertyGridRowViaDoubleClickHeaderCellParams CollapsePropertyGridRowViaDoubleClickHeaderCellParams
		{
			get
			{
				if ((this.mCollapsePropertyGridRowViaDoubleClickHeaderCellParams == null))
				{
					this.mCollapsePropertyGridRowViaDoubleClickHeaderCellParams = new CollapsePropertyGridRowViaDoubleClickHeaderCellParams();
				}
				return this.mCollapsePropertyGridRowViaDoubleClickHeaderCellParams;
			}
		}
		public virtual ExpandPropertyGridRowViaPlusKeyParams ExpandPropertyGridRowViaPlusKeyParams
		{
			get
			{
				if ((this.mExpandPropertyGridRowViaPlusKeyParams == null))
				{
					this.mExpandPropertyGridRowViaPlusKeyParams = new ExpandPropertyGridRowViaPlusKeyParams();
				}
				return this.mExpandPropertyGridRowViaPlusKeyParams;
			}
		}
		public virtual CollapsePropertyGridRowViaMinusKeyParams CollapsePropertyGridRowViaMinusKeyParams
		{
			get
			{
				if ((this.mCollapsePropertyGridRowViaMinusKeyParams == null))
				{
					this.mCollapsePropertyGridRowViaMinusKeyParams = new CollapsePropertyGridRowViaMinusKeyParams();
				}
				return this.mCollapsePropertyGridRowViaMinusKeyParams;
			}
		}
		public virtual ChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams ChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams
		{
			get
			{
				if ((this.mChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams == null))
				{
					this.mChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams = new ChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams();
				}
				return this.mChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams;
			}
		}
		public virtual CheckPropertyGridRowHeaderWidthExpectedValues CheckPropertyGridRowHeaderWidthExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowHeaderWidthExpectedValues == null))
				{
					this.mCheckPropertyGridRowHeaderWidthExpectedValues = new CheckPropertyGridRowHeaderWidthExpectedValues();
				}
				return this.mCheckPropertyGridRowHeaderWidthExpectedValues;
			}
		}
		public virtual ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams
		{
			get
			{
				if ((this.mChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams == null))
				{
					this.mChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams = new ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams();
				}
				return this.mChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams;
			}
		}
		public virtual CheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues CheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues == null))
				{
					this.mCheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues = new CheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues();
				}
				return this.mCheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues;
			}
		}
		public virtual ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams
		{
			get
			{
				if ((this.mChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams == null))
				{
					this.mChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams = new ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams();
				}
				return this.mChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams;
			}
		}
		public virtual CheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues CheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues == null))
				{
					this.mCheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues = new CheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues();
				}
				return this.mCheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues;
			}
		}
		public virtual ChangePropertyGridRowHeightViaDraggingRowEdgeParams ChangePropertyGridRowHeightViaDraggingRowEdgeParams
		{
			get
			{
				if ((this.mChangePropertyGridRowHeightViaDraggingRowEdgeParams == null))
				{
					this.mChangePropertyGridRowHeightViaDraggingRowEdgeParams = new ChangePropertyGridRowHeightViaDraggingRowEdgeParams();
				}
				return this.mChangePropertyGridRowHeightViaDraggingRowEdgeParams;
			}
		}
		public virtual CheckPropertyGridRowHeightExpectedValues CheckPropertyGridRowHeightExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowHeightExpectedValues == null))
				{
					this.mCheckPropertyGridRowHeightExpectedValues = new CheckPropertyGridRowHeightExpectedValues();
				}
				return this.mCheckPropertyGridRowHeightExpectedValues;
			}
		}
		public virtual ChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams ChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams
		{
			get
			{
				if ((this.mChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams == null))
				{
					this.mChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams = new ChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams();
				}
				return this.mChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams;
			}
		}
		public virtual CheckPropertyGridCategoryRowHeightExpectedValues CheckPropertyGridCategoryRowHeightExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridCategoryRowHeightExpectedValues == null))
				{
					this.mCheckPropertyGridCategoryRowHeightExpectedValues = new CheckPropertyGridCategoryRowHeightExpectedValues();
				}
				return this.mCheckPropertyGridCategoryRowHeightExpectedValues;
			}
		}
		public virtual ChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams ChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams
		{
			get
			{
				if ((this.mChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams == null))
				{
					this.mChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams = new ChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams();
				}
				return this.mChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams;
			}
		}
		public virtual CheckPropertyGridFixedRowHeightExpectedValues CheckPropertyGridFixedRowHeightExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridFixedRowHeightExpectedValues == null))
				{
					this.mCheckPropertyGridFixedRowHeightExpectedValues = new CheckPropertyGridFixedRowHeightExpectedValues();
				}
				return this.mCheckPropertyGridFixedRowHeightExpectedValues;
			}
		}
		public virtual ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams
		{
			get
			{
				if ((this.mChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams == null))
				{
					this.mChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams = new ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams();
				}
				return this.mChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams;
			}
		}
		public virtual CheckChangedPropertyGridCellValueViaArrowKeysExpectedValues CheckChangedPropertyGridCellValueViaArrowKeysExpectedValues
		{
			get
			{
				if ((this.mCheckChangedPropertyGridCellValueViaArrowKeysExpectedValues == null))
				{
					this.mCheckChangedPropertyGridCellValueViaArrowKeysExpectedValues = new CheckChangedPropertyGridCellValueViaArrowKeysExpectedValues();
				}
				return this.mCheckChangedPropertyGridCellValueViaArrowKeysExpectedValues;
			}
		}
		public virtual CheckChangedPropertyGridCellValueViaEscKeyExpectedValues CheckChangedPropertyGridCellValueViaEscKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedPropertyGridCellValueViaEscKeyExpectedValues == null))
				{
					this.mCheckChangedPropertyGridCellValueViaEscKeyExpectedValues = new CheckChangedPropertyGridCellValueViaEscKeyExpectedValues();
				}
				return this.mCheckChangedPropertyGridCellValueViaEscKeyExpectedValues;
			}
		}
		public virtual ChangePropertyDescriptionControlValueViaChangingFocusedRowParams ChangePropertyDescriptionControlValueViaChangingFocusedRowParams
		{
			get
			{
				if ((this.mChangePropertyDescriptionControlValueViaChangingFocusedRowParams == null))
				{
					this.mChangePropertyDescriptionControlValueViaChangingFocusedRowParams = new ChangePropertyDescriptionControlValueViaChangingFocusedRowParams();
				}
				return this.mChangePropertyDescriptionControlValueViaChangingFocusedRowParams;
			}
		}
		public virtual CheckPropertyDescriptionControlPropertiesExpectedValues CheckPropertyDescriptionControlPropertiesExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyDescriptionControlPropertiesExpectedValues == null))
				{
					this.mCheckPropertyDescriptionControlPropertiesExpectedValues = new CheckPropertyDescriptionControlPropertiesExpectedValues();
				}
				return this.mCheckPropertyDescriptionControlPropertiesExpectedValues;
			}
		}
		public virtual CheckPropertyGridCategoryRowFixedTopStateExpectedValues CheckPropertyGridCategoryRowFixedTopStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridCategoryRowFixedTopStateExpectedValues == null))
				{
					this.mCheckPropertyGridCategoryRowFixedTopStateExpectedValues = new CheckPropertyGridCategoryRowFixedTopStateExpectedValues();
				}
				return this.mCheckPropertyGridCategoryRowFixedTopStateExpectedValues;
			}
		}
		public virtual CheckPropertyGridCategoryRowFixedBottomStateExpectedValues CheckPropertyGridCategoryRowFixedBottomStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridCategoryRowFixedBottomStateExpectedValues == null))
				{
					this.mCheckPropertyGridCategoryRowFixedBottomStateExpectedValues = new CheckPropertyGridCategoryRowFixedBottomStateExpectedValues();
				}
				return this.mCheckPropertyGridCategoryRowFixedBottomStateExpectedValues;
			}
		}
		public virtual CheckPropertyGridRowNotFixedStateExpectedValues CheckPropertyGridRowNotFixedStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowNotFixedStateExpectedValues == null))
				{
					this.mCheckPropertyGridRowNotFixedStateExpectedValues = new CheckPropertyGridRowNotFixedStateExpectedValues();
				}
				return this.mCheckPropertyGridRowNotFixedStateExpectedValues;
			}
		}
		public virtual CheckPropertyGridFixedRowsAfterResetExpectedValues CheckPropertyGridFixedRowsAfterResetExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridFixedRowsAfterResetExpectedValues == null))
				{
					this.mCheckPropertyGridFixedRowsAfterResetExpectedValues = new CheckPropertyGridFixedRowsAfterResetExpectedValues();
				}
				return this.mCheckPropertyGridFixedRowsAfterResetExpectedValues;
			}
		}
		public virtual CheckPropertyGridRowFixedBottomStateExpectedValues CheckPropertyGridRowFixedBottomStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowFixedBottomStateExpectedValues == null))
				{
					this.mCheckPropertyGridRowFixedBottomStateExpectedValues = new CheckPropertyGridRowFixedBottomStateExpectedValues();
				}
				return this.mCheckPropertyGridRowFixedBottomStateExpectedValues;
			}
		}
		public virtual AllowFixingNestedRowsParams AllowFixingNestedRowsParams
		{
			get
			{
				if ((this.mAllowFixingNestedRowsParams == null))
				{
					this.mAllowFixingNestedRowsParams = new AllowFixingNestedRowsParams();
				}
				return this.mAllowFixingNestedRowsParams;
			}
		}
		public virtual CheckPropertyGridNestedRowFixedTopStateExpectedValues CheckPropertyGridNestedRowFixedTopStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridNestedRowFixedTopStateExpectedValues == null))
				{
					this.mCheckPropertyGridNestedRowFixedTopStateExpectedValues = new CheckPropertyGridNestedRowFixedTopStateExpectedValues();
				}
				return this.mCheckPropertyGridNestedRowFixedTopStateExpectedValues;
			}
		}
		public virtual CheckPropertyGridNestedRowFixedBottomStateExpectedValues CheckPropertyGridNestedRowFixedBottomStateExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridNestedRowFixedBottomStateExpectedValues == null))
				{
					this.mCheckPropertyGridNestedRowFixedBottomStateExpectedValues = new CheckPropertyGridNestedRowFixedBottomStateExpectedValues();
				}
				return this.mCheckPropertyGridNestedRowFixedBottomStateExpectedValues;
			}
		}
		public virtual CollapseTreeListNodeViaClickExpandButtonParams CollapseTreeListNodeViaClickExpandButtonParams
		{
			get
			{
				if ((this.mCollapseTreeListNodeViaClickExpandButtonParams == null))
				{
					this.mCollapseTreeListNodeViaClickExpandButtonParams = new CollapseTreeListNodeViaClickExpandButtonParams();
				}
				return this.mCollapseTreeListNodeViaClickExpandButtonParams;
			}
		}
		public virtual CheckNodeCollapsedStateExpectedValues CheckNodeCollapsedStateExpectedValues
		{
			get
			{
				if ((this.mCheckNodeCollapsedStateExpectedValues == null))
				{
					this.mCheckNodeCollapsedStateExpectedValues = new CheckNodeCollapsedStateExpectedValues();
				}
				return this.mCheckNodeCollapsedStateExpectedValues;
			}
		}
		public virtual SwitchToColumnAlignmentDemoModuleParams SwitchToColumnAlignmentDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToColumnAlignmentDemoModuleParams == null))
				{
					this.mSwitchToColumnAlignmentDemoModuleParams = new SwitchToColumnAlignmentDemoModuleParams();
				}
				return this.mSwitchToColumnAlignmentDemoModuleParams;
			}
		}
		public virtual ExpandTreeListNodeViaClickExpandButtonParams ExpandTreeListNodeViaClickExpandButtonParams
		{
			get
			{
				if ((this.mExpandTreeListNodeViaClickExpandButtonParams == null))
				{
					this.mExpandTreeListNodeViaClickExpandButtonParams = new ExpandTreeListNodeViaClickExpandButtonParams();
				}
				return this.mExpandTreeListNodeViaClickExpandButtonParams;
			}
		}
		public virtual CheckNodeExpandedStateExpectedValues CheckNodeExpandedStateExpectedValues
		{
			get
			{
				if ((this.mCheckNodeExpandedStateExpectedValues == null))
				{
					this.mCheckNodeExpandedStateExpectedValues = new CheckNodeExpandedStateExpectedValues();
				}
				return this.mCheckNodeExpandedStateExpectedValues;
			}
		}
		public virtual CollapseTreeListNodeViaCtrlAndLeftArrowKeysParams CollapseTreeListNodeViaCtrlAndLeftArrowKeysParams
		{
			get
			{
				if ((this.mCollapseTreeListNodeViaCtrlAndLeftArrowKeysParams == null))
				{
					this.mCollapseTreeListNodeViaCtrlAndLeftArrowKeysParams = new CollapseTreeListNodeViaCtrlAndLeftArrowKeysParams();
				}
				return this.mCollapseTreeListNodeViaCtrlAndLeftArrowKeysParams;
			}
		}
		public virtual ExpandTreeListNodeViaCtrlAndRightArrowKeysParams ExpandTreeListNodeViaCtrlAndRightArrowKeysParams
		{
			get
			{
				if ((this.mExpandTreeListNodeViaCtrlAndRightArrowKeysParams == null))
				{
					this.mExpandTreeListNodeViaCtrlAndRightArrowKeysParams = new ExpandTreeListNodeViaCtrlAndRightArrowKeysParams();
				}
				return this.mExpandTreeListNodeViaCtrlAndRightArrowKeysParams;
			}
		}
		public virtual CollapseTreeListNodeViaMinusKeyParams CollapseTreeListNodeViaMinusKeyParams
		{
			get
			{
				if ((this.mCollapseTreeListNodeViaMinusKeyParams == null))
				{
					this.mCollapseTreeListNodeViaMinusKeyParams = new CollapseTreeListNodeViaMinusKeyParams();
				}
				return this.mCollapseTreeListNodeViaMinusKeyParams;
			}
		}
		public virtual ExpandTreeListNodeViaPlusKeyParams ExpandTreeListNodeViaPlusKeyParams
		{
			get
			{
				if ((this.mExpandTreeListNodeViaPlusKeyParams == null))
				{
					this.mExpandTreeListNodeViaPlusKeyParams = new ExpandTreeListNodeViaPlusKeyParams();
				}
				return this.mExpandTreeListNodeViaPlusKeyParams;
			}
		}
		public virtual SwitchToColumnCustomizationDemoModuleParams SwitchToColumnCustomizationDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToColumnCustomizationDemoModuleParams == null))
				{
					this.mSwitchToColumnCustomizationDemoModuleParams = new SwitchToColumnCustomizationDemoModuleParams();
				}
				return this.mSwitchToColumnCustomizationDemoModuleParams;
			}
		}
		public virtual ReorderColumnsViaDraggingParams ReorderColumnsViaDraggingParams
		{
			get
			{
				if ((this.mReorderColumnsViaDraggingParams == null))
				{
					this.mReorderColumnsViaDraggingParams = new ReorderColumnsViaDraggingParams();
				}
				return this.mReorderColumnsViaDraggingParams;
			}
		}
		public virtual CheckColumnsPositionsAfterReorderingExpectedValues CheckColumnsPositionsAfterReorderingExpectedValues
		{
			get
			{
				if ((this.mCheckColumnsPositionsAfterReorderingExpectedValues == null))
				{
					this.mCheckColumnsPositionsAfterReorderingExpectedValues = new CheckColumnsPositionsAfterReorderingExpectedValues();
				}
				return this.mCheckColumnsPositionsAfterReorderingExpectedValues;
			}
		}
		public virtual DeleteColumnsViaDraggingParams DeleteColumnsViaDraggingParams
		{
			get
			{
				if ((this.mDeleteColumnsViaDraggingParams == null))
				{
					this.mDeleteColumnsViaDraggingParams = new DeleteColumnsViaDraggingParams();
				}
				return this.mDeleteColumnsViaDraggingParams;
			}
		}
		public virtual CheckDeletedColumnViaDraggingExpectedValues CheckDeletedColumnViaDraggingExpectedValues
		{
			get
			{
				if ((this.mCheckDeletedColumnViaDraggingExpectedValues == null))
				{
					this.mCheckDeletedColumnViaDraggingExpectedValues = new CheckDeletedColumnViaDraggingExpectedValues();
				}
				return this.mCheckDeletedColumnViaDraggingExpectedValues;
			}
		}
		public virtual DragColumnFromCustomizationFormParams DragColumnFromCustomizationFormParams
		{
			get
			{
				if ((this.mDragColumnFromCustomizationFormParams == null))
				{
					this.mDragColumnFromCustomizationFormParams = new DragColumnFromCustomizationFormParams();
				}
				return this.mDragColumnFromCustomizationFormParams;
			}
		}
		public virtual CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues == null))
				{
					this.mCheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues = new CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues();
				}
				return this.mCheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues;
			}
		}
		public virtual SwitchToTreeListDragAndDropDemoModuleParams SwitchToTreeListDragAndDropDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToTreeListDragAndDropDemoModuleParams == null))
				{
					this.mSwitchToTreeListDragAndDropDemoModuleParams = new SwitchToTreeListDragAndDropDemoModuleParams();
				}
				return this.mSwitchToTreeListDragAndDropDemoModuleParams;
			}
		}
		public virtual DisableDragNodesOptionParams DisableDragNodesOptionParams
		{
			get
			{
				if ((this.mDisableDragNodesOptionParams == null))
				{
					this.mDisableDragNodesOptionParams = new DisableDragNodesOptionParams();
				}
				return this.mDisableDragNodesOptionParams;
			}
		}
		public virtual CheckEmptyDragAndDropListBoxExpectedValues CheckEmptyDragAndDropListBoxExpectedValues
		{
			get
			{
				if ((this.mCheckEmptyDragAndDropListBoxExpectedValues == null))
				{
					this.mCheckEmptyDragAndDropListBoxExpectedValues = new CheckEmptyDragAndDropListBoxExpectedValues();
				}
				return this.mCheckEmptyDragAndDropListBoxExpectedValues;
			}
		}
		public virtual ChangeTreeListCellCurrencyFormatValueParams ChangeTreeListCellCurrencyFormatValueParams
		{
			get
			{
				if ((this.mChangeTreeListCellCurrencyFormatValueParams == null))
				{
					this.mChangeTreeListCellCurrencyFormatValueParams = new ChangeTreeListCellCurrencyFormatValueParams();
				}
				return this.mChangeTreeListCellCurrencyFormatValueParams;
			}
		}
		public virtual CheckChangedTreeListCellCurrencyFormatValueExpectedValues CheckChangedTreeListCellCurrencyFormatValueExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellCurrencyFormatValueExpectedValues == null))
				{
					this.mCheckChangedTreeListCellCurrencyFormatValueExpectedValues = new CheckChangedTreeListCellCurrencyFormatValueExpectedValues();
				}
				return this.mCheckChangedTreeListCellCurrencyFormatValueExpectedValues;
			}
		}
		public virtual SwitchToColumnFormatDemoModuleParams SwitchToColumnFormatDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToColumnFormatDemoModuleParams == null))
				{
					this.mSwitchToColumnFormatDemoModuleParams = new SwitchToColumnFormatDemoModuleParams();
				}
				return this.mSwitchToColumnFormatDemoModuleParams;
			}
		}
		public virtual ChangeTreeListCellPurchaseDateFormatValueParams ChangeTreeListCellPurchaseDateFormatValueParams
		{
			get
			{
				if ((this.mChangeTreeListCellPurchaseDateFormatValueParams == null))
				{
					this.mChangeTreeListCellPurchaseDateFormatValueParams = new ChangeTreeListCellPurchaseDateFormatValueParams();
				}
				return this.mChangeTreeListCellPurchaseDateFormatValueParams;
			}
		}
		public virtual CheckChangedTreeListCellPurchaseDateFormatValueExpectedValues CheckChangedTreeListCellPurchaseDateFormatValueExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellPurchaseDateFormatValueExpectedValues == null))
				{
					this.mCheckChangedTreeListCellPurchaseDateFormatValueExpectedValues = new CheckChangedTreeListCellPurchaseDateFormatValueExpectedValues();
				}
				return this.mCheckChangedTreeListCellPurchaseDateFormatValueExpectedValues;
			}
		}
		public virtual SwitchToCustomTreeListNodeDemoModuleParams SwitchToCustomTreeListNodeDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToCustomTreeListNodeDemoModuleParams == null))
				{
					this.mSwitchToCustomTreeListNodeDemoModuleParams = new SwitchToCustomTreeListNodeDemoModuleParams();
				}
				return this.mSwitchToCustomTreeListNodeDemoModuleParams;
			}
		}
		public virtual SwitchToTreeListDataModeDemoModuleParams SwitchToTreeListDataModeDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToTreeListDataModeDemoModuleParams == null))
				{
					this.mSwitchToTreeListDataModeDemoModuleParams = new SwitchToTreeListDataModeDemoModuleParams();
				}
				return this.mSwitchToTreeListDataModeDemoModuleParams;
			}
		}
		public virtual ChangeTreeListCellValueViaCheckBoxEditorParams ChangeTreeListCellValueViaCheckBoxEditorParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaCheckBoxEditorParams == null))
				{
					this.mChangeTreeListCellValueViaCheckBoxEditorParams = new ChangeTreeListCellValueViaCheckBoxEditorParams();
				}
				return this.mChangeTreeListCellValueViaCheckBoxEditorParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues CheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues = new CheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues;
			}
		}
		public virtual ChangeTreeListCellValueViaTextBoxEditorParams ChangeTreeListCellValueViaTextBoxEditorParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaTextBoxEditorParams == null))
				{
					this.mChangeTreeListCellValueViaTextBoxEditorParams = new ChangeTreeListCellValueViaTextBoxEditorParams();
				}
				return this.mChangeTreeListCellValueViaTextBoxEditorParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaTextBoxEditorExpectedValues CheckChangedTreeListCellValueViaTextBoxEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaTextBoxEditorExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaTextBoxEditorExpectedValues = new CheckChangedTreeListCellValueViaTextBoxEditorExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaTextBoxEditorExpectedValues;
			}
		}
		public virtual SwitchToDataStoreDemoModuleParams SwitchToDataStoreDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToDataStoreDemoModuleParams == null))
				{
					this.mSwitchToDataStoreDemoModuleParams = new SwitchToDataStoreDemoModuleParams();
				}
				return this.mSwitchToDataStoreDemoModuleParams;
			}
		}
		public virtual ChangeTreeListCellValueViaComboBoxEditorParams ChangeTreeListCellValueViaComboBoxEditorParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaComboBoxEditorParams == null))
				{
					this.mChangeTreeListCellValueViaComboBoxEditorParams = new ChangeTreeListCellValueViaComboBoxEditorParams();
				}
				return this.mChangeTreeListCellValueViaComboBoxEditorParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaComboBoxEditorExpectedValues CheckChangedTreeListCellValueViaComboBoxEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaComboBoxEditorExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaComboBoxEditorExpectedValues = new CheckChangedTreeListCellValueViaComboBoxEditorExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaComboBoxEditorExpectedValues;
			}
		}
		public virtual CheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues CheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues
		{
			get
			{
				if ((this.mCheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues == null))
				{
					this.mCheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues = new CheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues();
				}
				return this.mCheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues;
			}
		}
		public virtual SwitchToMultiSelectDemoModuleParams SwitchToMultiSelectDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToMultiSelectDemoModuleParams == null))
				{
					this.mSwitchToMultiSelectDemoModuleParams = new SwitchToMultiSelectDemoModuleParams();
				}
				return this.mSwitchToMultiSelectDemoModuleParams;
			}
		}
		public virtual CheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues CheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues
		{
			get
			{
				if ((this.mCheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues == null))
				{
					this.mCheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues = new CheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues();
				}
				return this.mCheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues;
			}
		}
		public virtual MoveCellFocusViaCtrlAndArrowKeyParams MoveCellFocusViaCtrlAndArrowKeyParams
		{
			get
			{
				if ((this.mMoveCellFocusViaCtrlAndArrowKeyParams == null))
				{
					this.mMoveCellFocusViaCtrlAndArrowKeyParams = new MoveCellFocusViaCtrlAndArrowKeyParams();
				}
				return this.mMoveCellFocusViaCtrlAndArrowKeyParams;
			}
		}
		public virtual CheckSelectedNodesViaShiftAndUpKeysExpectedValues CheckSelectedNodesViaShiftAndUpKeysExpectedValues
		{
			get
			{
				if ((this.mCheckSelectedNodesViaShiftAndUpKeysExpectedValues == null))
				{
					this.mCheckSelectedNodesViaShiftAndUpKeysExpectedValues = new CheckSelectedNodesViaShiftAndUpKeysExpectedValues();
				}
				return this.mCheckSelectedNodesViaShiftAndUpKeysExpectedValues;
			}
		}
		public virtual ChangeTreeListCellLongDateFormatValueParams ChangeTreeListCellLongDateFormatValueParams
		{
			get
			{
				if ((this.mChangeTreeListCellLongDateFormatValueParams == null))
				{
					this.mChangeTreeListCellLongDateFormatValueParams = new ChangeTreeListCellLongDateFormatValueParams();
				}
				return this.mChangeTreeListCellLongDateFormatValueParams;
			}
		}
		public virtual CheckChangedTreeListCellLongDateFormatValueExpectedValues CheckChangedTreeListCellLongDateFormatValueExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellLongDateFormatValueExpectedValues == null))
				{
					this.mCheckChangedTreeListCellLongDateFormatValueExpectedValues = new CheckChangedTreeListCellLongDateFormatValueExpectedValues();
				}
				return this.mCheckChangedTreeListCellLongDateFormatValueExpectedValues;
			}
		}
		public virtual CheckSelectedNodesViaShiftAndDownKeysExpectedValues CheckSelectedNodesViaShiftAndDownKeysExpectedValues
		{
			get
			{
				if ((this.mCheckSelectedNodesViaShiftAndDownKeysExpectedValues == null))
				{
					this.mCheckSelectedNodesViaShiftAndDownKeysExpectedValues = new CheckSelectedNodesViaShiftAndDownKeysExpectedValues();
				}
				return this.mCheckSelectedNodesViaShiftAndDownKeysExpectedValues;
			}
		}
		public virtual CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues
		{
			get
			{
				if ((this.mCheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues == null))
				{
					this.mCheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues = new CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues();
				}
				return this.mCheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues;
			}
		}
		public virtual SelectNodesViaShiftCtrlAndUpKeysParams SelectNodesViaShiftCtrlAndUpKeysParams
		{
			get
			{
				if ((this.mSelectNodesViaShiftCtrlAndUpKeysParams == null))
				{
					this.mSelectNodesViaShiftCtrlAndUpKeysParams = new SelectNodesViaShiftCtrlAndUpKeysParams();
				}
				return this.mSelectNodesViaShiftCtrlAndUpKeysParams;
			}
		}
		public virtual CheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues CheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues
		{
			get
			{
				if ((this.mCheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues == null))
				{
					this.mCheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues = new CheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues();
				}
				return this.mCheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues;
			}
		}
		public virtual SelectNodesViaShiftCtrlAndDownKeysParams SelectNodesViaShiftCtrlAndDownKeysParams
		{
			get
			{
				if ((this.mSelectNodesViaShiftCtrlAndDownKeysParams == null))
				{
					this.mSelectNodesViaShiftCtrlAndDownKeysParams = new SelectNodesViaShiftCtrlAndDownKeysParams();
				}
				return this.mSelectNodesViaShiftCtrlAndDownKeysParams;
			}
		}
		public virtual CheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues CheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues
		{
			get
			{
				if ((this.mCheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues == null))
				{
					this.mCheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues = new CheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues();
				}
				return this.mCheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues;
			}
		}
		public virtual CheckNodesParams CheckNodesParams
		{
			get
			{
				if ((this.mCheckNodesParams == null))
				{
					this.mCheckNodesParams = new CheckNodesParams();
				}
				return this.mCheckNodesParams;
			}
		}
		public virtual CheckNodesCheckedStatesExpectedValues CheckNodesCheckedStatesExpectedValues
		{
			get
			{
				if ((this.mCheckNodesCheckedStatesExpectedValues == null))
				{
					this.mCheckNodesCheckedStatesExpectedValues = new CheckNodesCheckedStatesExpectedValues();
				}
				return this.mCheckNodesCheckedStatesExpectedValues;
			}
		}
		public virtual SwitchToNodeCheckingDemoModuleParams SwitchToNodeCheckingDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToNodeCheckingDemoModuleParams == null))
				{
					this.mSwitchToNodeCheckingDemoModuleParams = new SwitchToNodeCheckingDemoModuleParams();
				}
				return this.mSwitchToNodeCheckingDemoModuleParams;
			}
		}
		public virtual DisableRecursiveNodesCheckingOptionParams DisableRecursiveNodesCheckingOptionParams
		{
			get
			{
				if ((this.mDisableRecursiveNodesCheckingOptionParams == null))
				{
					this.mDisableRecursiveNodesCheckingOptionParams = new DisableRecursiveNodesCheckingOptionParams();
				}
				return this.mDisableRecursiveNodesCheckingOptionParams;
			}
		}
		public virtual CheckNodesViaKeyboardParams CheckNodesViaKeyboardParams
		{
			get
			{
				if ((this.mCheckNodesViaKeyboardParams == null))
				{
					this.mCheckNodesViaKeyboardParams = new CheckNodesViaKeyboardParams();
				}
				return this.mCheckNodesViaKeyboardParams;
			}
		}
		public virtual CheckChangedNodesCheckedStatesViaKeyboardExpectedValues CheckChangedNodesCheckedStatesViaKeyboardExpectedValues
		{
			get
			{
				if ((this.mCheckChangedNodesCheckedStatesViaKeyboardExpectedValues == null))
				{
					this.mCheckChangedNodesCheckedStatesViaKeyboardExpectedValues = new CheckChangedNodesCheckedStatesViaKeyboardExpectedValues();
				}
				return this.mCheckChangedNodesCheckedStatesViaKeyboardExpectedValues;
			}
		}
		public virtual EnableIndeterminateCheckStateOptionParams EnableIndeterminateCheckStateOptionParams
		{
			get
			{
				if ((this.mEnableIndeterminateCheckStateOptionParams == null))
				{
					this.mEnableIndeterminateCheckStateOptionParams = new EnableIndeterminateCheckStateOptionParams();
				}
				return this.mEnableIndeterminateCheckStateOptionParams;
			}
		}
		public virtual CheckNodesAfterEnablingIndeterminateCheckStateOptionParams CheckNodesAfterEnablingIndeterminateCheckStateOptionParams
		{
			get
			{
				if ((this.mCheckNodesAfterEnablingIndeterminateCheckStateOptionParams == null))
				{
					this.mCheckNodesAfterEnablingIndeterminateCheckStateOptionParams = new CheckNodesAfterEnablingIndeterminateCheckStateOptionParams();
				}
				return this.mCheckNodesAfterEnablingIndeterminateCheckStateOptionParams;
			}
		}
		public virtual CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues
		{
			get
			{
				if ((this.mCheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues == null))
				{
					this.mCheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues = new CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues();
				}
				return this.mCheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues;
			}
		}
		public virtual SwitchToNodesNavigationDemoModuleParams SwitchToNodesNavigationDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToNodesNavigationDemoModuleParams == null))
				{
					this.mSwitchToNodesNavigationDemoModuleParams = new SwitchToNodesNavigationDemoModuleParams();
				}
				return this.mSwitchToNodesNavigationDemoModuleParams;
			}
		}
		public virtual ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams
		{
			get
			{
				if ((this.mChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams == null))
				{
					this.mChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams = new ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams();
				}
				return this.mChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams;
			}
		}
		public virtual CheckChangedTreeListCellValueExpectedValues CheckChangedTreeListCellValueExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueExpectedValues = new CheckChangedTreeListCellValueExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueExpectedValues;
			}
		}
		public virtual ChangeTreeListFocusedCellEditorValueViaF2KeyParams ChangeTreeListFocusedCellEditorValueViaF2KeyParams
		{
			get
			{
				if ((this.mChangeTreeListFocusedCellEditorValueViaF2KeyParams == null))
				{
					this.mChangeTreeListFocusedCellEditorValueViaF2KeyParams = new ChangeTreeListFocusedCellEditorValueViaF2KeyParams();
				}
				return this.mChangeTreeListFocusedCellEditorValueViaF2KeyParams;
			}
		}
		public virtual ChangeTreeListFocusedCellEditorValueViaCharacterKeysParams ChangeTreeListFocusedCellEditorValueViaCharacterKeysParams
		{
			get
			{
				if ((this.mChangeTreeListFocusedCellEditorValueViaCharacterKeysParams == null))
				{
					this.mChangeTreeListFocusedCellEditorValueViaCharacterKeysParams = new ChangeTreeListFocusedCellEditorValueViaCharacterKeysParams();
				}
				return this.mChangeTreeListFocusedCellEditorValueViaCharacterKeysParams;
			}
		}
		public virtual ChangeTreeListFocusedCellEditorValueViaEscKeyParams ChangeTreeListFocusedCellEditorValueViaEscKeyParams
		{
			get
			{
				if ((this.mChangeTreeListFocusedCellEditorValueViaEscKeyParams == null))
				{
					this.mChangeTreeListFocusedCellEditorValueViaEscKeyParams = new ChangeTreeListFocusedCellEditorValueViaEscKeyParams();
				}
				return this.mChangeTreeListFocusedCellEditorValueViaEscKeyParams;
			}
		}
		public virtual ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams
		{
			get
			{
				if ((this.mChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams == null))
				{
					this.mChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams = new ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams();
				}
				return this.mChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams;
			}
		}
		public virtual ChangeTreeListCellValueViaDownAndRightKeysParams ChangeTreeListCellValueViaDownAndRightKeysParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaDownAndRightKeysParams == null))
				{
					this.mChangeTreeListCellValueViaDownAndRightKeysParams = new ChangeTreeListCellValueViaDownAndRightKeysParams();
				}
				return this.mChangeTreeListCellValueViaDownAndRightKeysParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaArrowKeysExpectedValues CheckChangedTreeListCellValueViaArrowKeysExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaArrowKeysExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaArrowKeysExpectedValues = new CheckChangedTreeListCellValueViaArrowKeysExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaArrowKeysExpectedValues;
			}
		}
		public virtual ChangeTreeListCellValueViaHomeKeyParams ChangeTreeListCellValueViaHomeKeyParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaHomeKeyParams == null))
				{
					this.mChangeTreeListCellValueViaHomeKeyParams = new ChangeTreeListCellValueViaHomeKeyParams();
				}
				return this.mChangeTreeListCellValueViaHomeKeyParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaHomeKeyExpectedValues CheckChangedTreeListCellValueViaHomeKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaHomeKeyExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaHomeKeyExpectedValues = new CheckChangedTreeListCellValueViaHomeKeyExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaHomeKeyExpectedValues;
			}
		}
		public virtual ChangeTreeListCellValueViaEndKeyParams ChangeTreeListCellValueViaEndKeyParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaEndKeyParams == null))
				{
					this.mChangeTreeListCellValueViaEndKeyParams = new ChangeTreeListCellValueViaEndKeyParams();
				}
				return this.mChangeTreeListCellValueViaEndKeyParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaEndKeyExpectedValues CheckChangedTreeListCellValueViaEndKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaEndKeyExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaEndKeyExpectedValues = new CheckChangedTreeListCellValueViaEndKeyExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaEndKeyExpectedValues;
			}
		}
		public virtual ChangeTreeListCellValueViaPageUpKeyParams ChangeTreeListCellValueViaPageUpKeyParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaPageUpKeyParams == null))
				{
					this.mChangeTreeListCellValueViaPageUpKeyParams = new ChangeTreeListCellValueViaPageUpKeyParams();
				}
				return this.mChangeTreeListCellValueViaPageUpKeyParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaPageUpKeyExpectedValues CheckChangedTreeListCellValueViaPageUpKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaPageUpKeyExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaPageUpKeyExpectedValues = new CheckChangedTreeListCellValueViaPageUpKeyExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaPageUpKeyExpectedValues;
			}
		}
		public virtual ChangeTreeListCellValueViaPageDownKeyParams ChangeTreeListCellValueViaPageDownKeyParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaPageDownKeyParams == null))
				{
					this.mChangeTreeListCellValueViaPageDownKeyParams = new ChangeTreeListCellValueViaPageDownKeyParams();
				}
				return this.mChangeTreeListCellValueViaPageDownKeyParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaPageDownKeyExpectedValues CheckChangedTreeListCellValueViaPageDownKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaPageDownKeyExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaPageDownKeyExpectedValues = new CheckChangedTreeListCellValueViaPageDownKeyExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaPageDownKeyExpectedValues;
			}
		}
		public virtual ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams
		{
			get
			{
				if ((this.mChangeTreeListFirstCellValueViaCtrlHomeShortcutParams == null))
				{
					this.mChangeTreeListFirstCellValueViaCtrlHomeShortcutParams = new ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams();
				}
				return this.mChangeTreeListFirstCellValueViaCtrlHomeShortcutParams;
			}
		}
		public virtual CheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues CheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues == null))
				{
					this.mCheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues = new CheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues();
				}
				return this.mCheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues;
			}
		}
		public virtual ChangeTreeListLastCellValueViaCtrlEndShortcutParams ChangeTreeListLastCellValueViaCtrlEndShortcutParams
		{
			get
			{
				if ((this.mChangeTreeListLastCellValueViaCtrlEndShortcutParams == null))
				{
					this.mChangeTreeListLastCellValueViaCtrlEndShortcutParams = new ChangeTreeListLastCellValueViaCtrlEndShortcutParams();
				}
				return this.mChangeTreeListLastCellValueViaCtrlEndShortcutParams;
			}
		}
		public virtual CheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues CheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues == null))
				{
					this.mCheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues = new CheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues();
				}
				return this.mCheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues;
			}
		}
		public virtual ResizeColumnHeaderViaDraggingRightEdgeParams ResizeColumnHeaderViaDraggingRightEdgeParams
		{
			get
			{
				if ((this.mResizeColumnHeaderViaDraggingRightEdgeParams == null))
				{
					this.mResizeColumnHeaderViaDraggingRightEdgeParams = new ResizeColumnHeaderViaDraggingRightEdgeParams();
				}
				return this.mResizeColumnHeaderViaDraggingRightEdgeParams;
			}
		}
		public virtual CheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues CheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues
		{
			get
			{
				if ((this.mCheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues == null))
				{
					this.mCheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues = new CheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues();
				}
				return this.mCheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues;
			}
		}
		public virtual CheckAddedSummariesMinFooterCellExpectedValues CheckAddedSummariesMinFooterCellExpectedValues
		{
			get
			{
				if ((this.mCheckAddedSummariesMinFooterCellExpectedValues == null))
				{
					this.mCheckAddedSummariesMinFooterCellExpectedValues = new CheckAddedSummariesMinFooterCellExpectedValues();
				}
				return this.mCheckAddedSummariesMinFooterCellExpectedValues;
			}
		}
		public virtual SwitchToSummariesDemoModuleParams SwitchToSummariesDemoModuleParams
		{
			get
			{
				if ((this.mSwitchToSummariesDemoModuleParams == null))
				{
					this.mSwitchToSummariesDemoModuleParams = new SwitchToSummariesDemoModuleParams();
				}
				return this.mSwitchToSummariesDemoModuleParams;
			}
		}
		public virtual CheckAddedSummariesMaxFooterCellExpectedValues CheckAddedSummariesMaxFooterCellExpectedValues
		{
			get
			{
				if ((this.mCheckAddedSummariesMaxFooterCellExpectedValues == null))
				{
					this.mCheckAddedSummariesMaxFooterCellExpectedValues = new CheckAddedSummariesMaxFooterCellExpectedValues();
				}
				return this.mCheckAddedSummariesMaxFooterCellExpectedValues;
			}
		}
		public virtual CheckAddedSummariesCountGroupFooterCellExpectedValues CheckAddedSummariesCountGroupFooterCellExpectedValues
		{
			get
			{
				if ((this.mCheckAddedSummariesCountGroupFooterCellExpectedValues == null))
				{
					this.mCheckAddedSummariesCountGroupFooterCellExpectedValues = new CheckAddedSummariesCountGroupFooterCellExpectedValues();
				}
				return this.mCheckAddedSummariesCountGroupFooterCellExpectedValues;
			}
		}
		public virtual CheckRemovedSummariesFooterCellExpectedValues CheckRemovedSummariesFooterCellExpectedValues
		{
			get
			{
				if ((this.mCheckRemovedSummariesFooterCellExpectedValues == null))
				{
					this.mCheckRemovedSummariesFooterCellExpectedValues = new CheckRemovedSummariesFooterCellExpectedValues();
				}
				return this.mCheckRemovedSummariesFooterCellExpectedValues;
			}
		}
		public virtual CheckRemovedSummariesGroupFooterCellExpectedValues CheckRemovedSummariesGroupFooterCellExpectedValues
		{
			get
			{
				if ((this.mCheckRemovedSummariesGroupFooterCellExpectedValues == null))
				{
					this.mCheckRemovedSummariesGroupFooterCellExpectedValues = new CheckRemovedSummariesGroupFooterCellExpectedValues();
				}
				return this.mCheckRemovedSummariesGroupFooterCellExpectedValues;
			}
		}
		public virtual CheckSummariesFooterCellExpectedValues CheckSummariesFooterCellExpectedValues
		{
			get
			{
				if ((this.mCheckSummariesFooterCellExpectedValues == null))
				{
					this.mCheckSummariesFooterCellExpectedValues = new CheckSummariesFooterCellExpectedValues();
				}
				return this.mCheckSummariesFooterCellExpectedValues;
			}
		}
		public virtual CheckModifiedSummariesFooterCellsExpectedValues CheckModifiedSummariesFooterCellsExpectedValues
		{
			get
			{
				if ((this.mCheckModifiedSummariesFooterCellsExpectedValues == null))
				{
					this.mCheckModifiedSummariesFooterCellsExpectedValues = new CheckModifiedSummariesFooterCellsExpectedValues();
				}
				return this.mCheckModifiedSummariesFooterCellsExpectedValues;
			}
		}
		public virtual CheckModifiedSummariesGroupFooterCellsTypeExpectedValues CheckModifiedSummariesGroupFooterCellsTypeExpectedValues
		{
			get
			{
				if ((this.mCheckModifiedSummariesGroupFooterCellsTypeExpectedValues == null))
				{
					this.mCheckModifiedSummariesGroupFooterCellsTypeExpectedValues = new CheckModifiedSummariesGroupFooterCellsTypeExpectedValues();
				}
				return this.mCheckModifiedSummariesGroupFooterCellsTypeExpectedValues;
			}
		}
		public virtual ChangeFilterModeParams ChangeFilterModeParams
		{
			get
			{
				if ((this.mChangeFilterModeParams == null))
				{
					this.mChangeFilterModeParams = new ChangeFilterModeParams();
				}
				return this.mChangeFilterModeParams;
			}
		}
		public virtual ModifyFilterExpressionViaFilterEditorParams ModifyFilterExpressionViaFilterEditorParams
		{
			get
			{
				if ((this.mModifyFilterExpressionViaFilterEditorParams == null))
				{
					this.mModifyFilterExpressionViaFilterEditorParams = new ModifyFilterExpressionViaFilterEditorParams();
				}
				return this.mModifyFilterExpressionViaFilterEditorParams;
			}
		}
		public virtual CheckModifiedFilterExpressionFilterResultsExpectedValues CheckModifiedFilterExpressionFilterResultsExpectedValues
		{
			get
			{
				if ((this.mCheckModifiedFilterExpressionFilterResultsExpectedValues == null))
				{
					this.mCheckModifiedFilterExpressionFilterResultsExpectedValues = new CheckModifiedFilterExpressionFilterResultsExpectedValues();
				}
				return this.mCheckModifiedFilterExpressionFilterResultsExpectedValues;
			}
		}
		public virtual CheckDeactivatedFilterExpectedValues CheckDeactivatedFilterExpectedValues
		{
			get
			{
				if ((this.mCheckDeactivatedFilterExpectedValues == null))
				{
					this.mCheckDeactivatedFilterExpectedValues = new CheckDeactivatedFilterExpectedValues();
				}
				return this.mCheckDeactivatedFilterExpectedValues;
			}
		}
		public virtual CheckDeletedFilterExpectedValues CheckDeletedFilterExpectedValues
		{
			get
			{
				if ((this.mCheckDeletedFilterExpectedValues == null))
				{
					this.mCheckDeletedFilterExpectedValues = new CheckDeletedFilterExpectedValues();
				}
				return this.mCheckDeletedFilterExpectedValues;
			}
		}
		public virtual ChangeTreeListCellsValueForControlPropertyGrindChangesParams ChangeTreeListCellsValueForControlPropertyGrindChangesParams
		{
			get
			{
				if ((this.mChangeTreeListCellsValueForControlPropertyGrindChangesParams == null))
				{
					this.mChangeTreeListCellsValueForControlPropertyGrindChangesParams = new ChangeTreeListCellsValueForControlPropertyGrindChangesParams();
				}
				return this.mChangeTreeListCellsValueForControlPropertyGrindChangesParams;
			}
		}
		public virtual ChangeTreeListCellsValueViaCalcEditorParams ChangeTreeListCellsValueViaCalcEditorParams
		{
			get
			{
				if ((this.mChangeTreeListCellsValueViaCalcEditorParams == null))
				{
					this.mChangeTreeListCellsValueViaCalcEditorParams = new ChangeTreeListCellsValueViaCalcEditorParams();
				}
				return this.mChangeTreeListCellsValueViaCalcEditorParams;
			}
		}
		public virtual CheckChangedTreeListCellsValueViaCalcEditorExpectedValues CheckChangedTreeListCellsValueViaCalcEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellsValueViaCalcEditorExpectedValues == null))
				{
					this.mCheckChangedTreeListCellsValueViaCalcEditorExpectedValues = new CheckChangedTreeListCellsValueViaCalcEditorExpectedValues();
				}
				return this.mCheckChangedTreeListCellsValueViaCalcEditorExpectedValues;
			}
		}
		public virtual ChangeTreeListCellsValueViaSpinEditorParams ChangeTreeListCellsValueViaSpinEditorParams
		{
			get
			{
				if ((this.mChangeTreeListCellsValueViaSpinEditorParams == null))
				{
					this.mChangeTreeListCellsValueViaSpinEditorParams = new ChangeTreeListCellsValueViaSpinEditorParams();
				}
				return this.mChangeTreeListCellsValueViaSpinEditorParams;
			}
		}
		public virtual CheckChangedTreeListCellsValueViaSpinEditorExpectedValues CheckChangedTreeListCellsValueViaSpinEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellsValueViaSpinEditorExpectedValues == null))
				{
					this.mCheckChangedTreeListCellsValueViaSpinEditorExpectedValues = new CheckChangedTreeListCellsValueViaSpinEditorExpectedValues();
				}
				return this.mCheckChangedTreeListCellsValueViaSpinEditorExpectedValues;
			}
		}
		public virtual ChangeTreeListCellsValueViaImageComboBoxEditorParams ChangeTreeListCellsValueViaImageComboBoxEditorParams
		{
			get
			{
				if ((this.mChangeTreeListCellsValueViaImageComboBoxEditorParams == null))
				{
					this.mChangeTreeListCellsValueViaImageComboBoxEditorParams = new ChangeTreeListCellsValueViaImageComboBoxEditorParams();
				}
				return this.mChangeTreeListCellsValueViaImageComboBoxEditorParams;
			}
		}
		public virtual CheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues CheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues == null))
				{
					this.mCheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues = new CheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues();
				}
				return this.mCheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues;
			}
		}
		public virtual ChangeTreeListCellsValueViaTextEditorWithMaskParams ChangeTreeListCellsValueViaTextEditorWithMaskParams
		{
			get
			{
				if ((this.mChangeTreeListCellsValueViaTextEditorWithMaskParams == null))
				{
					this.mChangeTreeListCellsValueViaTextEditorWithMaskParams = new ChangeTreeListCellsValueViaTextEditorWithMaskParams();
				}
				return this.mChangeTreeListCellsValueViaTextEditorWithMaskParams;
			}
		}
		public virtual CheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues CheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues == null))
				{
					this.mCheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues = new CheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues();
				}
				return this.mCheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues;
			}
		}
		public virtual ScrollTreeListForControlFixedColumnParams ScrollTreeListForControlFixedColumnParams
		{
			get
			{
				if ((this.mScrollTreeListForControlFixedColumnParams == null))
				{
					this.mScrollTreeListForControlFixedColumnParams = new ScrollTreeListForControlFixedColumnParams();
				}
				return this.mScrollTreeListForControlFixedColumnParams;
			}
		}
		public virtual CheckHiddenNodesViaDoubleClickExpectedValues CheckHiddenNodesViaDoubleClickExpectedValues
		{
			get
			{
				if ((this.mCheckHiddenNodesViaDoubleClickExpectedValues == null))
				{
					this.mCheckHiddenNodesViaDoubleClickExpectedValues = new CheckHiddenNodesViaDoubleClickExpectedValues();
				}
				return this.mCheckHiddenNodesViaDoubleClickExpectedValues;
			}
		}
		public virtual MakeNodeVisibleViaHiddenListItemDoubleClickParams MakeNodeVisibleViaHiddenListItemDoubleClickParams
		{
			get
			{
				if ((this.mMakeNodeVisibleViaHiddenListItemDoubleClickParams == null))
				{
					this.mMakeNodeVisibleViaHiddenListItemDoubleClickParams = new MakeNodeVisibleViaHiddenListItemDoubleClickParams();
				}
				return this.mMakeNodeVisibleViaHiddenListItemDoubleClickParams;
			}
		}
		public virtual CheckVisibleNodeExpectedValues CheckVisibleNodeExpectedValues
		{
			get
			{
				if ((this.mCheckVisibleNodeExpectedValues == null))
				{
					this.mCheckVisibleNodeExpectedValues = new CheckVisibleNodeExpectedValues();
				}
				return this.mCheckVisibleNodeExpectedValues;
			}
		}
		public virtual ScrollPropertyGridViaMouseParams ScrollPropertyGridViaMouseParams
		{
			get
			{
				if ((this.mScrollPropertyGridViaMouseParams == null))
				{
					this.mScrollPropertyGridViaMouseParams = new ScrollPropertyGridViaMouseParams();
				}
				return this.mScrollPropertyGridViaMouseParams;
			}
		}
		public virtual DragRowWithMoveToEndDragActionParams DragRowWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragRowWithMoveToEndDragActionParams == null))
				{
					this.mDragRowWithMoveToEndDragActionParams = new DragRowWithMoveToEndDragActionParams();
				}
				return this.mDragRowWithMoveToEndDragActionParams;
			}
		}
		public virtual DragCategoryRowWithMoveToEndDragActionParams DragCategoryRowWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragCategoryRowWithMoveToEndDragActionParams == null))
				{
					this.mDragCategoryRowWithMoveToEndDragActionParams = new DragCategoryRowWithMoveToEndDragActionParams();
				}
				return this.mDragCategoryRowWithMoveToEndDragActionParams;
			}
		}
		public virtual DragVerticalGridRowToCustomizationFormParams DragVerticalGridRowToCustomizationFormParams
		{
			get
			{
				if ((this.mDragVerticalGridRowToCustomizationFormParams == null))
				{
					this.mDragVerticalGridRowToCustomizationFormParams = new DragVerticalGridRowToCustomizationFormParams();
				}
				return this.mDragVerticalGridRowToCustomizationFormParams;
			}
		}
		public virtual DragVerticalGridCategoryRowToCustomizationFormParams DragVerticalGridCategoryRowToCustomizationFormParams
		{
			get
			{
				if ((this.mDragVerticalGridCategoryRowToCustomizationFormParams == null))
				{
					this.mDragVerticalGridCategoryRowToCustomizationFormParams = new DragVerticalGridCategoryRowToCustomizationFormParams();
				}
				return this.mDragVerticalGridCategoryRowToCustomizationFormParams;
			}
		}
		public virtual DragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams DragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams == null))
				{
					this.mDragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams = new DragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams();
				}
				return this.mDragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams;
			}
		}
		public virtual DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams == null))
				{
					this.mDragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams = new DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams();
				}
				return this.mDragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams;
			}
		}
		public virtual DragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams DragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams == null))
				{
					this.mDragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams = new DragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams();
				}
				return this.mDragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues = new CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowsWithMoveToEndDragActionParams DragPropertyGridRowsWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsWithMoveToEndDragActionParams == null))
				{
					this.mDragPropertyGridRowsWithMoveToEndDragActionParams = new DragPropertyGridRowsWithMoveToEndDragActionParams();
				}
				return this.mDragPropertyGridRowsWithMoveToEndDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues = new CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues = new CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues = new CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues = new CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowsToCustomizationFormParams DragPropertyGridRowsToCustomizationFormParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsToCustomizationFormParams == null))
				{
					this.mDragPropertyGridRowsToCustomizationFormParams = new DragPropertyGridRowsToCustomizationFormParams();
				}
				return this.mDragPropertyGridRowsToCustomizationFormParams;
			}
		}
		public virtual CheckPropertyGridRowsInCustomizationFormExpectedValues CheckPropertyGridRowsInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridRowsInCustomizationFormExpectedValues == null))
				{
					this.mCheckPropertyGridRowsInCustomizationFormExpectedValues = new CheckPropertyGridRowsInCustomizationFormExpectedValues();
				}
				return this.mCheckPropertyGridRowsInCustomizationFormExpectedValues;
			}
		}
		public virtual CheckFilteringAfterChangingFilterModeExpectedValues CheckFilteringAfterChangingFilterModeExpectedValues
		{
			get
			{
				if ((this.mCheckFilteringAfterChangingFilterModeExpectedValues == null))
				{
					this.mCheckFilteringAfterChangingFilterModeExpectedValues = new CheckFilteringAfterChangingFilterModeExpectedValues();
				}
				return this.mCheckFilteringAfterChangingFilterModeExpectedValues;
			}
		}
		public virtual CheckFilteringAfterChangingFilterExpressionExpectedValues CheckFilteringAfterChangingFilterExpressionExpectedValues
		{
			get
			{
				if ((this.mCheckFilteringAfterChangingFilterExpressionExpectedValues == null))
				{
					this.mCheckFilteringAfterChangingFilterExpressionExpectedValues = new CheckFilteringAfterChangingFilterExpressionExpectedValues();
				}
				return this.mCheckFilteringAfterChangingFilterExpressionExpectedValues;
			}
		}
		public virtual CheckChangedTreeListCellValueViaEscKeyExpectedValues CheckChangedTreeListCellValueViaEscKeyExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaEscKeyExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaEscKeyExpectedValues = new CheckChangedTreeListCellValueViaEscKeyExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaEscKeyExpectedValues;
			}
		}
		public virtual DragPropertyGridCategoryRowWithInsertAfterDragActionParams DragPropertyGridCategoryRowWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowWithInsertAfterDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowWithInsertAfterDragActionParams = new DragPropertyGridCategoryRowWithInsertAfterDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowWithInsertAfterDragActionParams;
			}
		}
		public virtual DragPropertyGridCategoryRowWithInsertBeforeDragActionParams DragPropertyGridCategoryRowWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowWithInsertBeforeDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowWithInsertBeforeDragActionParams = new DragPropertyGridCategoryRowWithInsertBeforeDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowWithInsertBeforeDragActionParams;
			}
		}
		public virtual DragPropertyGridRowsWithInsertAfterDragActionParams DragPropertyGridRowsWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsWithInsertAfterDragActionParams == null))
				{
					this.mDragPropertyGridRowsWithInsertAfterDragActionParams = new DragPropertyGridRowsWithInsertAfterDragActionParams();
				}
				return this.mDragPropertyGridRowsWithInsertAfterDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues = new CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowsWithInsertBeforeDragActionParams DragPropertyGridRowsWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsWithInsertBeforeDragActionParams == null))
				{
					this.mDragPropertyGridRowsWithInsertBeforeDragActionParams = new DragPropertyGridRowsWithInsertBeforeDragActionParams();
				}
				return this.mDragPropertyGridRowsWithInsertBeforeDragActionParams;
			}
		}
		public virtual DragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams DragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams == null))
				{
					this.mDragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams = new DragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams();
				}
				return this.mDragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams;
			}
		}
		public virtual DragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams DragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams == null))
				{
					this.mDragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams = new DragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams();
				}
				return this.mDragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams;
			}
		}
		public virtual DragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams DragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams == null))
				{
					this.mDragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams = new DragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams();
				}
				return this.mDragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams;
			}
		}
		public virtual DragCategoryRowWithInsertBeforeDragActionParams DragCategoryRowWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragCategoryRowWithInsertBeforeDragActionParams == null))
				{
					this.mDragCategoryRowWithInsertBeforeDragActionParams = new DragCategoryRowWithInsertBeforeDragActionParams();
				}
				return this.mDragCategoryRowWithInsertBeforeDragActionParams;
			}
		}
		public virtual DragCategoryRowWithMoveChildDragActionParams DragCategoryRowWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragCategoryRowWithMoveChildDragActionParams == null))
				{
					this.mDragCategoryRowWithMoveChildDragActionParams = new DragCategoryRowWithMoveChildDragActionParams();
				}
				return this.mDragCategoryRowWithMoveChildDragActionParams;
			}
		}
		public virtual DragRowWithInsertAfterDragActionParams DragRowWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragRowWithInsertAfterDragActionParams == null))
				{
					this.mDragRowWithInsertAfterDragActionParams = new DragRowWithInsertAfterDragActionParams();
				}
				return this.mDragRowWithInsertAfterDragActionParams;
			}
		}
		public virtual DragRowWithInsertBeforeDragActionParams DragRowWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragRowWithInsertBeforeDragActionParams == null))
				{
					this.mDragRowWithInsertBeforeDragActionParams = new DragRowWithInsertBeforeDragActionParams();
				}
				return this.mDragRowWithInsertBeforeDragActionParams;
			}
		}
		public virtual DragRowWithMoveChildDragActionParams DragRowWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragRowWithMoveChildDragActionParams == null))
				{
					this.mDragRowWithMoveChildDragActionParams = new DragRowWithMoveChildDragActionParams();
				}
				return this.mDragRowWithMoveChildDragActionParams;
			}
		}
		public virtual DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams == null))
				{
					this.mDragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams = new DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams();
				}
				return this.mDragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams;
			}
		}
		public virtual DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams == null))
				{
					this.mDragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams = new DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams();
				}
				return this.mDragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams;
			}
		}
		public virtual DragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams DragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams == null))
				{
					this.mDragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams = new DragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams();
				}
				return this.mDragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams;
			}
		}
		public virtual DragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams DragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams == null))
				{
					this.mDragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams = new DragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams();
				}
				return this.mDragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams;
			}
		}
		public virtual DragCategoryRowWithInsertAfterDragActionParams DragCategoryRowWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragCategoryRowWithInsertAfterDragActionParams == null))
				{
					this.mDragCategoryRowWithInsertAfterDragActionParams = new DragCategoryRowWithInsertAfterDragActionParams();
				}
				return this.mDragCategoryRowWithInsertAfterDragActionParams;
			}
		}
		public virtual CheckTreeListColumnsFilterStringPropertiesExpectedValues CheckTreeListColumnsFilterStringPropertiesExpectedValues
		{
			get
			{
				if ((this.mCheckTreeListColumnsFilterStringPropertiesExpectedValues == null))
				{
					this.mCheckTreeListColumnsFilterStringPropertiesExpectedValues = new CheckTreeListColumnsFilterStringPropertiesExpectedValues();
				}
				return this.mCheckTreeListColumnsFilterStringPropertiesExpectedValues;
			}
		}
		public virtual DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams == null))
				{
					this.mDragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams = new DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams();
				}
				return this.mDragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams;
			}
		}
		public virtual DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams == null))
				{
					this.mDragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams = new DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams();
				}
				return this.mDragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams;
			}
		}
		public virtual DragPropertyGridRowsWithMoveChildDragActionParams DragPropertyGridRowsWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsWithMoveChildDragActionParams == null))
				{
					this.mDragPropertyGridRowsWithMoveChildDragActionParams = new DragPropertyGridRowsWithMoveChildDragActionParams();
				}
				return this.mDragPropertyGridRowsWithMoveChildDragActionParams;
			}
		}
		public virtual DragPropertyGridCategoryRowWithMoveChildDragActionParams DragPropertyGridCategoryRowWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowWithMoveChildDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowWithMoveChildDragActionParams = new DragPropertyGridCategoryRowWithMoveChildDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowWithMoveChildDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues = new CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams == null))
				{
					this.mDragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams = new DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams();
				}
				return this.mDragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues = new CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams == null))
				{
					this.mDragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams = new DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams();
				}
				return this.mDragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams;
			}
		}
		public virtual CheckDraggingNodeWithMoveChildDragActionExpectedValues CheckDraggingNodeWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingNodeWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingNodeWithMoveChildDragActionExpectedValues = new CheckDraggingNodeWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingNodeWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingNodeWithInsertBeforeDragActionExpectedValues CheckDraggingNodeWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingNodeWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingNodeWithInsertBeforeDragActionExpectedValues = new CheckDraggingNodeWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingNodeWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual CheckDraggingNodeWithInsertAfterDragActionExpectedValues CheckDraggingNodeWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingNodeWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingNodeWithInsertAfterDragActionExpectedValues = new CheckDraggingNodeWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingNodeWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridCategoryRowsToCustomizationFormParams DragPropertyGridCategoryRowsToCustomizationFormParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowsToCustomizationFormParams == null))
				{
					this.mDragPropertyGridCategoryRowsToCustomizationFormParams = new DragPropertyGridCategoryRowsToCustomizationFormParams();
				}
				return this.mDragPropertyGridCategoryRowsToCustomizationFormParams;
			}
		}
		public virtual CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGridCategoryRowsInCustomizationFormExpectedValues == null))
				{
					this.mCheckPropertyGridCategoryRowsInCustomizationFormExpectedValues = new CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues();
				}
				return this.mCheckPropertyGridCategoryRowsInCustomizationFormExpectedValues;
			}
		}
		public virtual CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues = new CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams == null))
				{
					this.mDragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams = new DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams();
				}
				return this.mDragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues = new CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams == null))
				{
					this.mDragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams = new DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams();
				}
				return this.mDragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues = new CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams == null))
				{
					this.mDragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams = new DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams();
				}
				return this.mDragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues = new CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams = new DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues = new CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams = new DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues = new CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues;
			}
		}
		public virtual DragLastPropertyGridCategoryRowsToCustomizationFormParams DragLastPropertyGridCategoryRowsToCustomizationFormParams
		{
			get
			{
				if ((this.mDragLastPropertyGridCategoryRowsToCustomizationFormParams == null))
				{
					this.mDragLastPropertyGridCategoryRowsToCustomizationFormParams = new DragLastPropertyGridCategoryRowsToCustomizationFormParams();
				}
				return this.mDragLastPropertyGridCategoryRowsToCustomizationFormParams;
			}
		}
		public virtual CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues
		{
			get
			{
				if ((this.mCheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues == null))
				{
					this.mCheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues = new CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues();
				}
				return this.mCheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues;
			}
		}
		public virtual DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams = new DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams;
			}
		}
		public virtual CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues == null))
				{
					this.mCheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues = new CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues();
				}
				return this.mCheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams = new DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues = new CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
			}
		}
		public virtual DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams
		{
			get
			{
				if ((this.mDragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams == null))
				{
					this.mDragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams = new DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams();
				}
				return this.mDragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams;
			}
		}
		public virtual CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues == null))
				{
					this.mCheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues = new CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues();
				}
				return this.mCheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
			}
		}
		public virtual CheckDragAndDropListBoxItemsExpectedValues CheckDragAndDropListBoxItemsExpectedValues
		{
			get
			{
				if ((this.mCheckDragAndDropListBoxItemsExpectedValues == null))
				{
					this.mCheckDragAndDropListBoxItemsExpectedValues = new CheckDragAndDropListBoxItemsExpectedValues();
				}
				return this.mCheckDragAndDropListBoxItemsExpectedValues;
			}
		}
		public virtual CollapseExpandedCategoryRowParams CollapseExpandedCategoryRowParams
		{
			get
			{
				if ((this.mCollapseExpandedCategoryRowParams == null))
				{
					this.mCollapseExpandedCategoryRowParams = new CollapseExpandedCategoryRowParams();
				}
				return this.mCollapseExpandedCategoryRowParams;
			}
		}
		public virtual ExpandCollapsedRowsParams ExpandCollapsedRowsParams
		{
			get
			{
				if ((this.mExpandCollapsedRowsParams == null))
				{
					this.mExpandCollapsedRowsParams = new ExpandCollapsedRowsParams();
				}
				return this.mExpandCollapsedRowsParams;
			}
		}
		public virtual ChangeTreeListCellsValueViaProgressBarEditorParams ChangeTreeListCellsValueViaProgressBarEditorParams
		{
			get
			{
				if ((this.mChangeTreeListCellsValueViaProgressBarEditorParams == null))
				{
					this.mChangeTreeListCellsValueViaProgressBarEditorParams = new ChangeTreeListCellsValueViaProgressBarEditorParams();
				}
				return this.mChangeTreeListCellsValueViaProgressBarEditorParams;
			}
		}
		public virtual CheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues CheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues == null))
				{
					this.mCheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues = new CheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues();
				}
				return this.mCheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues;
			}
		}
		public virtual ChangeTreeListCellValueViaUpAndLeftKeysParams ChangeTreeListCellValueViaUpAndLeftKeysParams
		{
			get
			{
				if ((this.mChangeTreeListCellValueViaUpAndLeftKeysParams == null))
				{
					this.mChangeTreeListCellValueViaUpAndLeftKeysParams = new ChangeTreeListCellValueViaUpAndLeftKeysParams();
				}
				return this.mChangeTreeListCellValueViaUpAndLeftKeysParams;
			}
		}
		public virtual CheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues CheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues
		{
			get
			{
				if ((this.mCheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues == null))
				{
					this.mCheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues = new CheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues();
				}
				return this.mCheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues;
			}
		}
		public virtual ResizeNodesViaDraggingIndicatorRowBottomEdgeParams ResizeNodesViaDraggingIndicatorRowBottomEdgeParams
		{
			get
			{
				if ((this.mResizeNodesViaDraggingIndicatorRowBottomEdgeParams == null))
				{
					this.mResizeNodesViaDraggingIndicatorRowBottomEdgeParams = new ResizeNodesViaDraggingIndicatorRowBottomEdgeParams();
				}
				return this.mResizeNodesViaDraggingIndicatorRowBottomEdgeParams;
			}
		}
		public virtual ChangePropertyGridCellValueViaEscKeyParams ChangePropertyGridCellValueViaEscKeyParams
		{
			get
			{
				if ((this.mChangePropertyGridCellValueViaEscKeyParams == null))
				{
					this.mChangePropertyGridCellValueViaEscKeyParams = new ChangePropertyGridCellValueViaEscKeyParams();
				}
				return this.mChangePropertyGridCellValueViaEscKeyParams;
			}
		}
		public virtual ChangeVerticalGridFocusedCellEditorValueViaEscKeyParams ChangeVerticalGridFocusedCellEditorValueViaEscKeyParams
		{
			get
			{
				if ((this.mChangeVerticalGridFocusedCellEditorValueViaEscKeyParams == null))
				{
					this.mChangeVerticalGridFocusedCellEditorValueViaEscKeyParams = new ChangeVerticalGridFocusedCellEditorValueViaEscKeyParams();
				}
				return this.mChangeVerticalGridFocusedCellEditorValueViaEscKeyParams;
			}
		}
		public virtual ChangePropertyGridCellValueViaMouseParams ChangePropertyGridCellValueViaMouseParams
		{
			get
			{
				if ((this.mChangePropertyGridCellValueViaMouseParams == null))
				{
					this.mChangePropertyGridCellValueViaMouseParams = new ChangePropertyGridCellValueViaMouseParams();
				}
				return this.mChangePropertyGridCellValueViaMouseParams;
			}
		}
		public virtual CheckChangedPropertyGridCellValueViaMouseExpectedValues CheckChangedPropertyGridCellValueViaMouseExpectedValues
		{
			get
			{
				if ((this.mCheckChangedPropertyGridCellValueViaMouseExpectedValues == null))
				{
					this.mCheckChangedPropertyGridCellValueViaMouseExpectedValues = new CheckChangedPropertyGridCellValueViaMouseExpectedValues();
				}
				return this.mCheckChangedPropertyGridCellValueViaMouseExpectedValues;
			}
		}
		public virtual CheckDraggingRowsToDragAndDropAreaExpectedValues CheckDraggingRowsToDragAndDropAreaExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingRowsToDragAndDropAreaExpectedValues == null))
				{
					this.mCheckDraggingRowsToDragAndDropAreaExpectedValues = new CheckDraggingRowsToDragAndDropAreaExpectedValues();
				}
				return this.mCheckDraggingRowsToDragAndDropAreaExpectedValues;
			}
		}
		public virtual CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues
		{
			get
			{
				if ((this.mCheckDraggingCategoryRowsToDragAndDropAreaExpectedValues == null))
				{
					this.mCheckDraggingCategoryRowsToDragAndDropAreaExpectedValues = new CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues();
				}
				return this.mCheckDraggingCategoryRowsToDragAndDropAreaExpectedValues;
			}
		}
		public virtual CheckReorderedTreeListNodesViaDraggingExpectedValues CheckReorderedTreeListNodesViaDraggingExpectedValues
		{
			get
			{
				if ((this.mCheckReorderedTreeListNodesViaDraggingExpectedValues == null))
				{
					this.mCheckReorderedTreeListNodesViaDraggingExpectedValues = new CheckReorderedTreeListNodesViaDraggingExpectedValues();
				}
				return this.mCheckReorderedTreeListNodesViaDraggingExpectedValues;
			}
		}
		public virtual CreateNodesHierarchyParams CreateNodesHierarchyParams
		{
			get
			{
				if ((this.mCreateNodesHierarchyParams == null))
				{
					this.mCreateNodesHierarchyParams = new CreateNodesHierarchyParams();
				}
				return this.mCreateNodesHierarchyParams;
			}
		}
		public virtual CheckCreatedNodesHierarchyExpectedValues CheckCreatedNodesHierarchyExpectedValues
		{
			get
			{
				if ((this.mCheckCreatedNodesHierarchyExpectedValues == null))
				{
					this.mCheckCreatedNodesHierarchyExpectedValues = new CheckCreatedNodesHierarchyExpectedValues();
				}
				return this.mCheckCreatedNodesHierarchyExpectedValues;
			}
		}
		public virtual CheckPropertyGrindChangesExpectedValues CheckPropertyGrindChangesExpectedValues
		{
			get
			{
				if ((this.mCheckPropertyGrindChangesExpectedValues == null))
				{
					this.mCheckPropertyGrindChangesExpectedValues = new CheckPropertyGrindChangesExpectedValues();
				}
				return this.mCheckPropertyGrindChangesExpectedValues;
			}
		}
		public virtual CheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues CheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues
		{
			get
			{
				if ((this.mCheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues == null))
				{
					this.mCheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues = new CheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues();
				}
				return this.mCheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues;
			}
		}
		public virtual CheckAddedTreeListNodesExpectedValues CheckAddedTreeListNodesExpectedValues
		{
			get
			{
				if ((this.mCheckAddedTreeListNodesExpectedValues == null))
				{
					this.mCheckAddedTreeListNodesExpectedValues = new CheckAddedTreeListNodesExpectedValues();
				}
				return this.mCheckAddedTreeListNodesExpectedValues;
			}
		}
		public UITutorialsCcodeWindow UITutorialsCcodeWindow
		{
			get
			{
				if ((this.mUITutorialsCcodeWindow == null))
				{
					this.mUITutorialsCcodeWindow = new UITutorialsCcodeWindow();
				}
				return this.mUITutorialsCcodeWindow;
			}
		}
		public UIItemWindow UIItemWindow
		{
			get
			{
				if ((this.mUIItemWindow == null))
				{
					this.mUIItemWindow = new UIItemWindow();
				}
				return this.mUIItemWindow;
			}
		}
		public UIXtraVerticalGridFeatWindow UIXtraVerticalGridFeatWindow
		{
			get
			{
				if ((this.mUIXtraVerticalGridFeatWindow == null))
				{
					this.mUIXtraVerticalGridFeatWindow = new UIXtraVerticalGridFeatWindow();
				}
				return this.mUIXtraVerticalGridFeatWindow;
			}
		}
		public UIXtraVerticalGridFeatWindow1 UIXtraVerticalGridFeatWindow1
		{
			get
			{
				if ((this.mUIXtraVerticalGridFeatWindow1 == null))
				{
					this.mUIXtraVerticalGridFeatWindow1 = new UIXtraVerticalGridFeatWindow1();
				}
				return this.mUIXtraVerticalGridFeatWindow1;
			}
		}
		public UIExpressioneditorWindow UIExpressioneditorWindow
		{
			get
			{
				if ((this.mUIExpressioneditorWindow == null))
				{
					this.mUIExpressioneditorWindow = new UIExpressioneditorWindow();
				}
				return this.mUIExpressioneditorWindow;
			}
		}
		public UIXtraVerticalGridFeatWindow2 UIXtraVerticalGridFeatWindow2
		{
			get
			{
				if ((this.mUIXtraVerticalGridFeatWindow2 == null))
				{
					this.mUIXtraVerticalGridFeatWindow2 = new UIXtraVerticalGridFeatWindow2();
				}
				return this.mUIXtraVerticalGridFeatWindow2;
			}
		}
		public UIXtraVerticalGridFeatWindow3 UIXtraVerticalGridFeatWindow3
		{
			get
			{
				if ((this.mUIXtraVerticalGridFeatWindow3 == null))
				{
					this.mUIXtraVerticalGridFeatWindow3 = new UIXtraVerticalGridFeatWindow3();
				}
				return this.mUIXtraVerticalGridFeatWindow3;
			}
		}
		public UIXtraVerticalGridFeatWindow4 UIXtraVerticalGridFeatWindow4
		{
			get
			{
				if ((this.mUIXtraVerticalGridFeatWindow4 == null))
				{
					this.mUIXtraVerticalGridFeatWindow4 = new UIXtraVerticalGridFeatWindow4();
				}
				return this.mUIXtraVerticalGridFeatWindow4;
			}
		}
		public UIXtraVerticalGridFeatWindow5 UIXtraVerticalGridFeatWindow5
		{
			get
			{
				if ((this.mUIXtraVerticalGridFeatWindow5 == null))
				{
					this.mUIXtraVerticalGridFeatWindow5 = new UIXtraVerticalGridFeatWindow5();
				}
				return this.mUIXtraVerticalGridFeatWindow5;
			}
		}
		public UIItemWindow1 UIItemWindow1
		{
			get
			{
				if ((this.mUIItemWindow1 == null))
				{
					this.mUIItemWindow1 = new UIItemWindow1();
				}
				return this.mUIItemWindow1;
			}
		}
		public UICustomizationWindow UICustomizationWindow
		{
			get
			{
				if ((this.mUICustomizationWindow == null))
				{
					this.mUICustomizationWindow = new UICustomizationWindow();
				}
				return this.mUICustomizationWindow;
			}
		}
		public UIXtraTreeListFeaturesWindow UIXtraTreeListFeaturesWindow
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow == null))
				{
					this.mUIXtraTreeListFeaturesWindow = new UIXtraTreeListFeaturesWindow();
				}
				return this.mUIXtraTreeListFeaturesWindow;
			}
		}
		public UIXtraTreeListFeaturesWindow1 UIXtraTreeListFeaturesWindow1
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow1 == null))
				{
					this.mUIXtraTreeListFeaturesWindow1 = new UIXtraTreeListFeaturesWindow1();
				}
				return this.mUIXtraTreeListFeaturesWindow1;
			}
		}
		public UIFilterEditorWindow UIFilterEditorWindow
		{
			get
			{
				if ((this.mUIFilterEditorWindow == null))
				{
					this.mUIFilterEditorWindow = new UIFilterEditorWindow();
				}
				return this.mUIFilterEditorWindow;
			}
		}
		public UIXtraTreeListFeaturesWindow2 UIXtraTreeListFeaturesWindow2
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow2 == null))
				{
					this.mUIXtraTreeListFeaturesWindow2 = new UIXtraTreeListFeaturesWindow2();
				}
				return this.mUIXtraTreeListFeaturesWindow2;
			}
		}
		public UIXtraTreeListFeaturesWindow3 UIXtraTreeListFeaturesWindow3
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow3 == null))
				{
					this.mUIXtraTreeListFeaturesWindow3 = new UIXtraTreeListFeaturesWindow3();
				}
				return this.mUIXtraTreeListFeaturesWindow3;
			}
		}
		public UIXtraTreeListFeaturesWindow4 UIXtraTreeListFeaturesWindow4
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow4 == null))
				{
					this.mUIXtraTreeListFeaturesWindow4 = new UIXtraTreeListFeaturesWindow4();
				}
				return this.mUIXtraTreeListFeaturesWindow4;
			}
		}
		public UIXtraTreeListFeaturesWindow5 UIXtraTreeListFeaturesWindow5
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow5 == null))
				{
					this.mUIXtraTreeListFeaturesWindow5 = new UIXtraTreeListFeaturesWindow5();
				}
				return this.mUIXtraTreeListFeaturesWindow5;
			}
		}
		public UIDevExpressWinFunctioWindow UIDevExpressWinFunctioWindow
		{
			get
			{
				if ((this.mUIDevExpressWinFunctioWindow == null))
				{
					this.mUIDevExpressWinFunctioWindow = new UIDevExpressWinFunctioWindow();
				}
				return this.mUIDevExpressWinFunctioWindow;
			}
		}
		public UIXtraTreeListFeaturesWindow6 UIXtraTreeListFeaturesWindow6
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow6 == null))
				{
					this.mUIXtraTreeListFeaturesWindow6 = new UIXtraTreeListFeaturesWindow6();
				}
				return this.mUIXtraTreeListFeaturesWindow6;
			}
		}
		public UIXtraTreeListFeaturesWindow7 UIXtraTreeListFeaturesWindow7
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow7 == null))
				{
					this.mUIXtraTreeListFeaturesWindow7 = new UIXtraTreeListFeaturesWindow7();
				}
				return this.mUIXtraTreeListFeaturesWindow7;
			}
		}
		public UIXtraTreeListFeaturesWindow8 UIXtraTreeListFeaturesWindow8
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow8 == null))
				{
					this.mUIXtraTreeListFeaturesWindow8 = new UIXtraTreeListFeaturesWindow8();
				}
				return this.mUIXtraTreeListFeaturesWindow8;
			}
		}
		public UIXtraTreeListFeaturesWindow9 UIXtraTreeListFeaturesWindow9
		{
			get
			{
				if ((this.mUIXtraTreeListFeaturesWindow9 == null))
				{
					this.mUIXtraTreeListFeaturesWindow9 = new UIXtraTreeListFeaturesWindow9();
				}
				return this.mUIXtraTreeListFeaturesWindow9;
			}
		}
		#endregion
		#region Fields
		private SwitchToCategoryRowButtonDemoModuleParams mSwitchToCategoryRowButtonDemoModuleParams;
		private CheckCategoryRowCollapsedStateExpectedValues mCheckCategoryRowCollapsedStateExpectedValues;
		private CheckCategoryRowExpandedStateExpectedValues mCheckCategoryRowExpandedStateExpectedValues;
		private SwitchToTreeViewExpandButtonStyleParams mSwitchToTreeViewExpandButtonStyleParams;
		private SwitchToDragAndDropDemoModuleParams mSwitchToDragAndDropDemoModuleParams;
		private CheckDragRowHeadersCheckBoxParams mCheckDragRowHeadersCheckBoxParams;
		private CheckDraggingRowWithMoveChildDragActionExpectedValues mCheckDraggingRowWithMoveChildDragActionExpectedValues;
		private CheckDraggingRowWithMoveToEndDragActionExpectedValues mCheckDraggingRowWithMoveToEndDragActionExpectedValues;
		private CheckDraggingRowWithInsertBeforeDragActionExpectedValues mCheckDraggingRowWithInsertBeforeDragActionExpectedValues;
		private CheckDraggingRowWithInsertAfterDragActionExpectedValues mCheckDraggingRowWithInsertAfterDragActionExpectedValues;
		private CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues mCheckDraggingCategoryRowWithMoveChildDragActionExpectedValues;
		private CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues mCheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues;
		private CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues mCheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues;
		private CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues mCheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues;
		private SwitchToResizingDemoModuleParams mSwitchToResizingDemoModuleParams;
		private ChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams mChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams;
		private CheckVerticalGridRecordWidthExpectedValues mCheckVerticalGridRecordWidthExpectedValues;
		private ChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams mChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams;
		private ChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams mChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams;
		private CheckVerticalGridRowHeaderWidthExpectedValues mCheckVerticalGridRowHeaderWidthExpectedValues;
		private ChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams mChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams;
		private ChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams mChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams;
		private CheckVerticalGridCategoryRowHeaderHeightExpectedValues mCheckVerticalGridCategoryRowHeaderHeightExpectedValues;
		private ChangeVerticalGridRowHeightViaDraggingRowEdgeParams mChangeVerticalGridRowHeightViaDraggingRowEdgeParams;
		private CheckVerticalGridRowHeightExpectedValues mCheckVerticalGridRowHeightExpectedValues;
		private ChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams mChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams;
		private CheckVerticalGridRecordsIntervalExpectedValues mCheckVerticalGridRecordsIntervalExpectedValues;
		private SwitchToLayoutAndPaintStylesDemoModuleParams mSwitchToLayoutAndPaintStylesDemoModuleParams;
		private SwitchToBandsViewLayoutStyleParams mSwitchToBandsViewLayoutStyleParams;
		private ChangeVerticalGridBandWidthViaDraggingBandEdgeParams mChangeVerticalGridBandWidthViaDraggingBandEdgeParams;
		private CheckVerticalGridBandWidthExpectedValues mCheckVerticalGridBandWidthExpectedValues;
		private SwitchToMultiEditorsRowDemoModuleParams mSwitchToMultiEditorsRowDemoModuleParams;
		private ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams mChangeMultiEditorsCellVerticalLineSeparatorsPositionParams;
		private CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues mCheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues;
		private ChangeMultiEditorsCellStringSeparatorsPositionParams mChangeMultiEditorsCellStringSeparatorsPositionParams;
		private CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues mCheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues;
		private ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams mChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams;
		private CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues;
		private ChangeMultiEditorsHeaderCellStringSeparatorsPositionParams mChangeMultiEditorsHeaderCellStringSeparatorsPositionParams;
		private CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues mCheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues;
		private ChangeMultiEditorsSeparatorStringParams mChangeMultiEditorsSeparatorStringParams;
		private CheckChangedMultiEditorsSeparatorStringExpectedValues mCheckChangedMultiEditorsSeparatorStringExpectedValues;
		private SwitchToRowCustomizationDemoModuleParams mSwitchToRowCustomizationDemoModuleParams;
		private CheckVerticalGridRowInCustomizationFormExpectedValues mCheckVerticalGridRowInCustomizationFormExpectedValues;
		private CheckVerticalGridCategoryRowInCustomizationFormExpectedValues mCheckVerticalGridCategoryRowInCustomizationFormExpectedValues;
		private CheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues mCheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
		private CheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues mCheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues;
		private CheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues mCheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
		private CheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues mCheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
		private CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues mCheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
		private CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues mCheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues;
		private CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues mCheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
		private CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues mCheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
		private AddNewCategoryRowViaCustomizationFormOkButtonParams mAddNewCategoryRowViaCustomizationFormOkButtonParams;
		private CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
		private CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues mCheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues;
		private CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
		private DragVerticalGridRowWithMoveToEndDragActionParams mDragVerticalGridRowWithMoveToEndDragActionParams;
		private CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues mCheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
		private DragAnotherVerticalGridCategoryRowToCustomizationFormParams mDragAnotherVerticalGridCategoryRowToCustomizationFormParams;
		private DeleteVerticalGridCategoryRowInCustomizationFormParams mDeleteVerticalGridCategoryRowInCustomizationFormParams;
		private CheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues mCheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues;
		private CheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues mCheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues;
		private CollapseCategoryRowViaDoubleClickHeaderCellParams mCollapseCategoryRowViaDoubleClickHeaderCellParams;
		private ExpandCategoryRowViaDoubleClickHeaderCellImageParams mExpandCategoryRowViaDoubleClickHeaderCellImageParams;
		private CollapseCategoryRowViaDoubleClickParams mCollapseCategoryRowViaDoubleClickParams;
		private CheckAddedCategoryRowInCustomizationFormExpectedValues mCheckAddedCategoryRowInCustomizationFormExpectedValues;
		private AddNewCategoryRowViaEnterKeyParams mAddNewCategoryRowViaEnterKeyParams;
		private CollapseCategoryRowViaMinusKeyParams mCollapseCategoryRowViaMinusKeyParams;
		private ExpandCategoryRowViaPlusKeyParams mExpandCategoryRowViaPlusKeyParams;
		private ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams mChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams;
		private CheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues mCheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues;
		private ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams mChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams;
		private CheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues mCheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues;
		private SwitchToDataModeDemoModuleParams mSwitchToDataModeDemoModuleParams;
		private ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams mChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams;
		private CheckChangedVerticalGridCellValueExpectedValues mCheckChangedVerticalGridCellValueExpectedValues;
		private ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams mChangeVerticalGridFocusedCellEditorValueViaF2KeyParams;
		private ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams mChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams;
		private CheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues mCheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues;
		private CheckChangedVerticalGridCellValueViaEscKeyExpectedValues mCheckChangedVerticalGridCellValueViaEscKeyExpectedValues;
		private SwitchToRowFormatDemoModuleParams mSwitchToRowFormatDemoModuleParams;
		private ChangeVerticalGridCellDateFormatValueParams mChangeVerticalGridCellDateFormatValueParams;
		private CheckChangedVerticalGridCellDateFormatValueExpectedValues mCheckChangedVerticalGridCellDateFormatValueExpectedValues;
		private ChangeVerticalGridCellDecimalFormatValueParams mChangeVerticalGridCellDecimalFormatValueParams;
		private CheckChangedVerticalGridCellDecimalFormatValueExpectedValues mCheckChangedVerticalGridCellDecimalFormatValueExpectedValues;
		private SwitchToEditorsDemoModuleParams mSwitchToEditorsDemoModuleParams;
		private ChangeVerticalGridCellValueViaSpinEditorParams mChangeVerticalGridCellValueViaSpinEditorParams;
		private CheckChangedVerticalGridCellValueViaSpinEditorExpectedValues mCheckChangedVerticalGridCellValueViaSpinEditorExpectedValues;
		private ChangeVerticalGridCellValueViaImageComboBoxEditorParams mChangeVerticalGridCellValueViaImageComboBoxEditorParams;
		private CheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues mCheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues;
		private SwitchToRowsNavigationDemoModuleParams mSwitchToRowsNavigationDemoModuleParams;
		private ChangeVerticalGridFirstCellValueViaHomeKeyParams mChangeVerticalGridFirstCellValueViaHomeKeyParams;
		private CheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues mCheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues;
		private ChangeVerticalGridLastCellValueViaEndKeyParams mChangeVerticalGridLastCellValueViaEndKeyParams;
		private CheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues mCheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues;
		private ChangeVerticalGridCellValueViaPageDownKeyParams mChangeVerticalGridCellValueViaPageDownKeyParams;
		private CheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues mCheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues;
		private ChangeVerticalGridCellValueViaPageUpKeyParams mChangeVerticalGridCellValueViaPageUpKeyParams;
		private CheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues mCheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues;
		private ChangeVerticalGridCellValueViaCtrlEndShortcutParams mChangeVerticalGridCellValueViaCtrlEndShortcutParams;
		private CheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues mCheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues;
		private ChangeVerticalGridCellValueViaCtrlHomeShortcutParams mChangeVerticalGridCellValueViaCtrlHomeShortcutParams;
		private CheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues mCheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues;
		private EditingVerticalGridCellValueViaArrowKeysParams mEditingVerticalGridCellValueViaArrowKeysParams;
		private CheckChangedVerticalGridCellValueViaArrowKeysExpectedValues mCheckChangedVerticalGridCellValueViaArrowKeysExpectedValues;
		private SwitchToScrollVisibilityDemoModuleParams mSwitchToScrollVisibilityDemoModuleParams;
		private SwitchToHorizontalScrollVisibilityParams mSwitchToHorizontalScrollVisibilityParams;
		private ScrollVerticalGridRecordsParams mScrollVerticalGridRecordsParams;
		private ChangeVerticalGridCellValueAfterScrollingRecordsParams mChangeVerticalGridCellValueAfterScrollingRecordsParams;
		private CheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues mCheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues;
		private SwitchVerticalGridLayoutStyleToBandsViewParams mSwitchVerticalGridLayoutStyleToBandsViewParams;
		private SwitchVerticalGridLayoutStyleToSingleRecordViewParams mSwitchVerticalGridLayoutStyleToSingleRecordViewParams;
		private CreateExpressionsViaExpressionsEditorParams mCreateExpressionsViaExpressionsEditorParams;
		private CheckAddedUnboundRowExpectedValues mCheckAddedUnboundRowExpectedValues;
		private ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams mChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams;
		private CheckUnboundRowsChangesExpectedValues mCheckUnboundRowsChangesExpectedValues;
		private ChangeVerticalGridCellsValuesInSimpleModeParams mChangeVerticalGridCellsValuesInSimpleModeParams;
		private CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues mCheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues;
		private SwitchButtonModeToShowForFocusedRecordParams mSwitchButtonModeToShowForFocusedRecordParams;
		private ChangeVerticalGridCellsValuesInDataBindingModeParams mChangeVerticalGridCellsValuesInDataBindingModeParams;
		private CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues mCheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues;
		private ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams mChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams;
		private CheckFullNameValueAfterChangingFirstNameCellValueExpectedValues mCheckFullNameValueAfterChangingFirstNameCellValueExpectedValues;
		private ChangeFullNameFormatParams mChangeFullNameFormatParams;
		private CheckFullNameValueExpectedValues mCheckFullNameValueExpectedValues;
		private CheckPropertyGridCategoryRowCollapsedStateExpectedValues mCheckPropertyGridCategoryRowCollapsedStateExpectedValues;
		private CheckPropertyGridCategoryRowExpandedStateExpectedValues mCheckPropertyGridCategoryRowExpandedStateExpectedValues;
		private CollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams mCollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams;
		private CollapsePropertyGridCategoryRowViaDoubleClickParams mCollapsePropertyGridCategoryRowViaDoubleClickParams;
		private ExpandPropertyGridCategoryRowViaDoubleClickParams mExpandPropertyGridCategoryRowViaDoubleClickParams;
		private CollapsePropertyGridCategoryRowViaMinusKeyParams mCollapsePropertyGridCategoryRowViaMinusKeyParams;
		private ExpandPropertyGridCategoryRowViaPlusKeyParams mExpandPropertyGridCategoryRowViaPlusKeyParams;
		private CheckPropertyGridRowExpandedStateExpectedValues mCheckPropertyGridRowExpandedStateExpectedValues;
		private CheckPropertyGridRowCollapsedStateExpectedValues mCheckPropertyGridRowCollapsedStateExpectedValues;
		private ExpandPropertyGridRowViaDoubleClickParams mExpandPropertyGridRowViaDoubleClickParams;
		private CollapsePropertyGridRowViaDoubleClickHeaderCellParams mCollapsePropertyGridRowViaDoubleClickHeaderCellParams;
		private ExpandPropertyGridRowViaPlusKeyParams mExpandPropertyGridRowViaPlusKeyParams;
		private CollapsePropertyGridRowViaMinusKeyParams mCollapsePropertyGridRowViaMinusKeyParams;
		private ChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams mChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams;
		private CheckPropertyGridRowHeaderWidthExpectedValues mCheckPropertyGridRowHeaderWidthExpectedValues;
		private ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams mChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams;
		private CheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues mCheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues;
		private ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams mChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams;
		private CheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues mCheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues;
		private ChangePropertyGridRowHeightViaDraggingRowEdgeParams mChangePropertyGridRowHeightViaDraggingRowEdgeParams;
		private CheckPropertyGridRowHeightExpectedValues mCheckPropertyGridRowHeightExpectedValues;
		private ChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams mChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams;
		private CheckPropertyGridCategoryRowHeightExpectedValues mCheckPropertyGridCategoryRowHeightExpectedValues;
		private ChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams mChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams;
		private CheckPropertyGridFixedRowHeightExpectedValues mCheckPropertyGridFixedRowHeightExpectedValues;
		private ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams mChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams;
		private CheckChangedPropertyGridCellValueViaArrowKeysExpectedValues mCheckChangedPropertyGridCellValueViaArrowKeysExpectedValues;
		private CheckChangedPropertyGridCellValueViaEscKeyExpectedValues mCheckChangedPropertyGridCellValueViaEscKeyExpectedValues;
		private ChangePropertyDescriptionControlValueViaChangingFocusedRowParams mChangePropertyDescriptionControlValueViaChangingFocusedRowParams;
		private CheckPropertyDescriptionControlPropertiesExpectedValues mCheckPropertyDescriptionControlPropertiesExpectedValues;
		private CheckPropertyGridCategoryRowFixedTopStateExpectedValues mCheckPropertyGridCategoryRowFixedTopStateExpectedValues;
		private CheckPropertyGridCategoryRowFixedBottomStateExpectedValues mCheckPropertyGridCategoryRowFixedBottomStateExpectedValues;
		private CheckPropertyGridRowNotFixedStateExpectedValues mCheckPropertyGridRowNotFixedStateExpectedValues;
		private CheckPropertyGridFixedRowsAfterResetExpectedValues mCheckPropertyGridFixedRowsAfterResetExpectedValues;
		private CheckPropertyGridRowFixedBottomStateExpectedValues mCheckPropertyGridRowFixedBottomStateExpectedValues;
		private AllowFixingNestedRowsParams mAllowFixingNestedRowsParams;
		private CheckPropertyGridNestedRowFixedTopStateExpectedValues mCheckPropertyGridNestedRowFixedTopStateExpectedValues;
		private CheckPropertyGridNestedRowFixedBottomStateExpectedValues mCheckPropertyGridNestedRowFixedBottomStateExpectedValues;
		private CollapseTreeListNodeViaClickExpandButtonParams mCollapseTreeListNodeViaClickExpandButtonParams;
		private CheckNodeCollapsedStateExpectedValues mCheckNodeCollapsedStateExpectedValues;
		private SwitchToColumnAlignmentDemoModuleParams mSwitchToColumnAlignmentDemoModuleParams;
		private ExpandTreeListNodeViaClickExpandButtonParams mExpandTreeListNodeViaClickExpandButtonParams;
		private CheckNodeExpandedStateExpectedValues mCheckNodeExpandedStateExpectedValues;
		private CollapseTreeListNodeViaCtrlAndLeftArrowKeysParams mCollapseTreeListNodeViaCtrlAndLeftArrowKeysParams;
		private ExpandTreeListNodeViaCtrlAndRightArrowKeysParams mExpandTreeListNodeViaCtrlAndRightArrowKeysParams;
		private CollapseTreeListNodeViaMinusKeyParams mCollapseTreeListNodeViaMinusKeyParams;
		private ExpandTreeListNodeViaPlusKeyParams mExpandTreeListNodeViaPlusKeyParams;
		private SwitchToColumnCustomizationDemoModuleParams mSwitchToColumnCustomizationDemoModuleParams;
		private ReorderColumnsViaDraggingParams mReorderColumnsViaDraggingParams;
		private CheckColumnsPositionsAfterReorderingExpectedValues mCheckColumnsPositionsAfterReorderingExpectedValues;
		private DeleteColumnsViaDraggingParams mDeleteColumnsViaDraggingParams;
		private CheckDeletedColumnViaDraggingExpectedValues mCheckDeletedColumnViaDraggingExpectedValues;
		private DragColumnFromCustomizationFormParams mDragColumnFromCustomizationFormParams;
		private CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues mCheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues;
		private SwitchToTreeListDragAndDropDemoModuleParams mSwitchToTreeListDragAndDropDemoModuleParams;
		private DisableDragNodesOptionParams mDisableDragNodesOptionParams;
		private CheckEmptyDragAndDropListBoxExpectedValues mCheckEmptyDragAndDropListBoxExpectedValues;
		private ChangeTreeListCellCurrencyFormatValueParams mChangeTreeListCellCurrencyFormatValueParams;
		private CheckChangedTreeListCellCurrencyFormatValueExpectedValues mCheckChangedTreeListCellCurrencyFormatValueExpectedValues;
		private SwitchToColumnFormatDemoModuleParams mSwitchToColumnFormatDemoModuleParams;
		private ChangeTreeListCellPurchaseDateFormatValueParams mChangeTreeListCellPurchaseDateFormatValueParams;
		private CheckChangedTreeListCellPurchaseDateFormatValueExpectedValues mCheckChangedTreeListCellPurchaseDateFormatValueExpectedValues;
		private SwitchToCustomTreeListNodeDemoModuleParams mSwitchToCustomTreeListNodeDemoModuleParams;
		private SwitchToTreeListDataModeDemoModuleParams mSwitchToTreeListDataModeDemoModuleParams;
		private ChangeTreeListCellValueViaCheckBoxEditorParams mChangeTreeListCellValueViaCheckBoxEditorParams;
		private CheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues mCheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues;
		private ChangeTreeListCellValueViaTextBoxEditorParams mChangeTreeListCellValueViaTextBoxEditorParams;
		private CheckChangedTreeListCellValueViaTextBoxEditorExpectedValues mCheckChangedTreeListCellValueViaTextBoxEditorExpectedValues;
		private SwitchToDataStoreDemoModuleParams mSwitchToDataStoreDemoModuleParams;
		private ChangeTreeListCellValueViaComboBoxEditorParams mChangeTreeListCellValueViaComboBoxEditorParams;
		private CheckChangedTreeListCellValueViaComboBoxEditorExpectedValues mCheckChangedTreeListCellValueViaComboBoxEditorExpectedValues;
		private CheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues mCheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues;
		private SwitchToMultiSelectDemoModuleParams mSwitchToMultiSelectDemoModuleParams;
		private CheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues mCheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues;
		private MoveCellFocusViaCtrlAndArrowKeyParams mMoveCellFocusViaCtrlAndArrowKeyParams;
		private CheckSelectedNodesViaShiftAndUpKeysExpectedValues mCheckSelectedNodesViaShiftAndUpKeysExpectedValues;
		private ChangeTreeListCellLongDateFormatValueParams mChangeTreeListCellLongDateFormatValueParams;
		private CheckChangedTreeListCellLongDateFormatValueExpectedValues mCheckChangedTreeListCellLongDateFormatValueExpectedValues;
		private CheckSelectedNodesViaShiftAndDownKeysExpectedValues mCheckSelectedNodesViaShiftAndDownKeysExpectedValues;
		private CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues mCheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues;
		private SelectNodesViaShiftCtrlAndUpKeysParams mSelectNodesViaShiftCtrlAndUpKeysParams;
		private CheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues mCheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues;
		private SelectNodesViaShiftCtrlAndDownKeysParams mSelectNodesViaShiftCtrlAndDownKeysParams;
		private CheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues mCheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues;
		private CheckNodesParams mCheckNodesParams;
		private CheckNodesCheckedStatesExpectedValues mCheckNodesCheckedStatesExpectedValues;
		private SwitchToNodeCheckingDemoModuleParams mSwitchToNodeCheckingDemoModuleParams;
		private DisableRecursiveNodesCheckingOptionParams mDisableRecursiveNodesCheckingOptionParams;
		private CheckNodesViaKeyboardParams mCheckNodesViaKeyboardParams;
		private CheckChangedNodesCheckedStatesViaKeyboardExpectedValues mCheckChangedNodesCheckedStatesViaKeyboardExpectedValues;
		private EnableIndeterminateCheckStateOptionParams mEnableIndeterminateCheckStateOptionParams;
		private CheckNodesAfterEnablingIndeterminateCheckStateOptionParams mCheckNodesAfterEnablingIndeterminateCheckStateOptionParams;
		private CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues mCheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues;
		private SwitchToNodesNavigationDemoModuleParams mSwitchToNodesNavigationDemoModuleParams;
		private ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams mChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams;
		private CheckChangedTreeListCellValueExpectedValues mCheckChangedTreeListCellValueExpectedValues;
		private ChangeTreeListFocusedCellEditorValueViaF2KeyParams mChangeTreeListFocusedCellEditorValueViaF2KeyParams;
		private ChangeTreeListFocusedCellEditorValueViaCharacterKeysParams mChangeTreeListFocusedCellEditorValueViaCharacterKeysParams;
		private ChangeTreeListFocusedCellEditorValueViaEscKeyParams mChangeTreeListFocusedCellEditorValueViaEscKeyParams;
		private ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams mChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams;
		private ChangeTreeListCellValueViaDownAndRightKeysParams mChangeTreeListCellValueViaDownAndRightKeysParams;
		private CheckChangedTreeListCellValueViaArrowKeysExpectedValues mCheckChangedTreeListCellValueViaArrowKeysExpectedValues;
		private ChangeTreeListCellValueViaHomeKeyParams mChangeTreeListCellValueViaHomeKeyParams;
		private CheckChangedTreeListCellValueViaHomeKeyExpectedValues mCheckChangedTreeListCellValueViaHomeKeyExpectedValues;
		private ChangeTreeListCellValueViaEndKeyParams mChangeTreeListCellValueViaEndKeyParams;
		private CheckChangedTreeListCellValueViaEndKeyExpectedValues mCheckChangedTreeListCellValueViaEndKeyExpectedValues;
		private ChangeTreeListCellValueViaPageUpKeyParams mChangeTreeListCellValueViaPageUpKeyParams;
		private CheckChangedTreeListCellValueViaPageUpKeyExpectedValues mCheckChangedTreeListCellValueViaPageUpKeyExpectedValues;
		private ChangeTreeListCellValueViaPageDownKeyParams mChangeTreeListCellValueViaPageDownKeyParams;
		private CheckChangedTreeListCellValueViaPageDownKeyExpectedValues mCheckChangedTreeListCellValueViaPageDownKeyExpectedValues;
		private ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams mChangeTreeListFirstCellValueViaCtrlHomeShortcutParams;
		private CheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues mCheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues;
		private ChangeTreeListLastCellValueViaCtrlEndShortcutParams mChangeTreeListLastCellValueViaCtrlEndShortcutParams;
		private CheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues mCheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues;
		private ResizeColumnHeaderViaDraggingRightEdgeParams mResizeColumnHeaderViaDraggingRightEdgeParams;
		private CheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues mCheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues;
		private CheckAddedSummariesMinFooterCellExpectedValues mCheckAddedSummariesMinFooterCellExpectedValues;
		private SwitchToSummariesDemoModuleParams mSwitchToSummariesDemoModuleParams;
		private CheckAddedSummariesMaxFooterCellExpectedValues mCheckAddedSummariesMaxFooterCellExpectedValues;
		private CheckAddedSummariesCountGroupFooterCellExpectedValues mCheckAddedSummariesCountGroupFooterCellExpectedValues;
		private CheckRemovedSummariesFooterCellExpectedValues mCheckRemovedSummariesFooterCellExpectedValues;
		private CheckRemovedSummariesGroupFooterCellExpectedValues mCheckRemovedSummariesGroupFooterCellExpectedValues;
		private CheckSummariesFooterCellExpectedValues mCheckSummariesFooterCellExpectedValues;
		private CheckModifiedSummariesFooterCellsExpectedValues mCheckModifiedSummariesFooterCellsExpectedValues;
		private CheckModifiedSummariesGroupFooterCellsTypeExpectedValues mCheckModifiedSummariesGroupFooterCellsTypeExpectedValues;
		private ChangeFilterModeParams mChangeFilterModeParams;
		private ModifyFilterExpressionViaFilterEditorParams mModifyFilterExpressionViaFilterEditorParams;
		private CheckModifiedFilterExpressionFilterResultsExpectedValues mCheckModifiedFilterExpressionFilterResultsExpectedValues;
		private CheckDeactivatedFilterExpectedValues mCheckDeactivatedFilterExpectedValues;
		private CheckDeletedFilterExpectedValues mCheckDeletedFilterExpectedValues;
		private ChangeTreeListCellsValueForControlPropertyGrindChangesParams mChangeTreeListCellsValueForControlPropertyGrindChangesParams;
		private ChangeTreeListCellsValueViaCalcEditorParams mChangeTreeListCellsValueViaCalcEditorParams;
		private CheckChangedTreeListCellsValueViaCalcEditorExpectedValues mCheckChangedTreeListCellsValueViaCalcEditorExpectedValues;
		private ChangeTreeListCellsValueViaSpinEditorParams mChangeTreeListCellsValueViaSpinEditorParams;
		private CheckChangedTreeListCellsValueViaSpinEditorExpectedValues mCheckChangedTreeListCellsValueViaSpinEditorExpectedValues;
		private ChangeTreeListCellsValueViaImageComboBoxEditorParams mChangeTreeListCellsValueViaImageComboBoxEditorParams;
		private CheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues mCheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues;
		private ChangeTreeListCellsValueViaTextEditorWithMaskParams mChangeTreeListCellsValueViaTextEditorWithMaskParams;
		private CheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues mCheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues;
		private ScrollTreeListForControlFixedColumnParams mScrollTreeListForControlFixedColumnParams;
		private CheckHiddenNodesViaDoubleClickExpectedValues mCheckHiddenNodesViaDoubleClickExpectedValues;
		private MakeNodeVisibleViaHiddenListItemDoubleClickParams mMakeNodeVisibleViaHiddenListItemDoubleClickParams;
		private CheckVisibleNodeExpectedValues mCheckVisibleNodeExpectedValues;
		private ScrollPropertyGridViaMouseParams mScrollPropertyGridViaMouseParams;
		private DragRowWithMoveToEndDragActionParams mDragRowWithMoveToEndDragActionParams;
		private DragCategoryRowWithMoveToEndDragActionParams mDragCategoryRowWithMoveToEndDragActionParams;
		private DragVerticalGridRowToCustomizationFormParams mDragVerticalGridRowToCustomizationFormParams;
		private DragVerticalGridCategoryRowToCustomizationFormParams mDragVerticalGridCategoryRowToCustomizationFormParams;
		private DragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams mDragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams;
		private DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams mDragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams;
		private DragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams mDragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams;
		private CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues mCheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues;
		private DragPropertyGridRowsWithMoveToEndDragActionParams mDragPropertyGridRowsWithMoveToEndDragActionParams;
		private CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues mCheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues;
		private CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues mCheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues;
		private CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues mCheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues;
		private CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues mCheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues;
		private DragPropertyGridRowsToCustomizationFormParams mDragPropertyGridRowsToCustomizationFormParams;
		private CheckPropertyGridRowsInCustomizationFormExpectedValues mCheckPropertyGridRowsInCustomizationFormExpectedValues;
		private CheckFilteringAfterChangingFilterModeExpectedValues mCheckFilteringAfterChangingFilterModeExpectedValues;
		private CheckFilteringAfterChangingFilterExpressionExpectedValues mCheckFilteringAfterChangingFilterExpressionExpectedValues;
		private CheckChangedTreeListCellValueViaEscKeyExpectedValues mCheckChangedTreeListCellValueViaEscKeyExpectedValues;
		private DragPropertyGridCategoryRowWithInsertAfterDragActionParams mDragPropertyGridCategoryRowWithInsertAfterDragActionParams;
		private DragPropertyGridCategoryRowWithInsertBeforeDragActionParams mDragPropertyGridCategoryRowWithInsertBeforeDragActionParams;
		private DragPropertyGridRowsWithInsertAfterDragActionParams mDragPropertyGridRowsWithInsertAfterDragActionParams;
		private CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues mCheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues;
		private DragPropertyGridRowsWithInsertBeforeDragActionParams mDragPropertyGridRowsWithInsertBeforeDragActionParams;
		private DragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams mDragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams;
		private DragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams mDragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams;
		private DragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams mDragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams;
		private DragCategoryRowWithInsertBeforeDragActionParams mDragCategoryRowWithInsertBeforeDragActionParams;
		private DragCategoryRowWithMoveChildDragActionParams mDragCategoryRowWithMoveChildDragActionParams;
		private DragRowWithInsertAfterDragActionParams mDragRowWithInsertAfterDragActionParams;
		private DragRowWithInsertBeforeDragActionParams mDragRowWithInsertBeforeDragActionParams;
		private DragRowWithMoveChildDragActionParams mDragRowWithMoveChildDragActionParams;
		private DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams mDragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams;
		private DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams mDragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams;
		private DragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams mDragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams;
		private DragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams mDragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams;
		private DragCategoryRowWithInsertAfterDragActionParams mDragCategoryRowWithInsertAfterDragActionParams;
		private CheckTreeListColumnsFilterStringPropertiesExpectedValues mCheckTreeListColumnsFilterStringPropertiesExpectedValues;
		private DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams mDragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams;
		private DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams mDragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams;
		private DragPropertyGridRowsWithMoveChildDragActionParams mDragPropertyGridRowsWithMoveChildDragActionParams;
		private DragPropertyGridCategoryRowWithMoveChildDragActionParams mDragPropertyGridCategoryRowWithMoveChildDragActionParams;
		private CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues mCheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues;
		private DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams mDragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams;
		private CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues mCheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues;
		private DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams mDragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams;
		private CheckDraggingNodeWithMoveChildDragActionExpectedValues mCheckDraggingNodeWithMoveChildDragActionExpectedValues;
		private CheckDraggingNodeWithInsertBeforeDragActionExpectedValues mCheckDraggingNodeWithInsertBeforeDragActionExpectedValues;
		private CheckDraggingNodeWithInsertAfterDragActionExpectedValues mCheckDraggingNodeWithInsertAfterDragActionExpectedValues;
		private DragPropertyGridCategoryRowsToCustomizationFormParams mDragPropertyGridCategoryRowsToCustomizationFormParams;
		private CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues mCheckPropertyGridCategoryRowsInCustomizationFormExpectedValues;
		private CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues mCheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues;
		private DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams mDragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams;
		private CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues mCheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
		private DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams mDragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams;
		private CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues mCheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
		private DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams mDragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams;
		private CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues mCheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues;
		private DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams;
		private CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues;
		private DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams mDragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams;
		private CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues;
		private DragLastPropertyGridCategoryRowsToCustomizationFormParams mDragLastPropertyGridCategoryRowsToCustomizationFormParams;
		private CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues mCheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues;
		private DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams mDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams;
		private CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues mCheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues;
		private DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams mDragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams;
		private CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues mCheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues;
		private DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams mDragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams;
		private CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues mCheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues;
		private CheckDragAndDropListBoxItemsExpectedValues mCheckDragAndDropListBoxItemsExpectedValues;
		private CollapseExpandedCategoryRowParams mCollapseExpandedCategoryRowParams;
		private ExpandCollapsedRowsParams mExpandCollapsedRowsParams;
		private ChangeTreeListCellsValueViaProgressBarEditorParams mChangeTreeListCellsValueViaProgressBarEditorParams;
		private CheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues mCheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues;
		private ChangeTreeListCellValueViaUpAndLeftKeysParams mChangeTreeListCellValueViaUpAndLeftKeysParams;
		private CheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues mCheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues;
		private ResizeNodesViaDraggingIndicatorRowBottomEdgeParams mResizeNodesViaDraggingIndicatorRowBottomEdgeParams;
		private ChangePropertyGridCellValueViaEscKeyParams mChangePropertyGridCellValueViaEscKeyParams;
		private ChangeVerticalGridFocusedCellEditorValueViaEscKeyParams mChangeVerticalGridFocusedCellEditorValueViaEscKeyParams;
		private ChangePropertyGridCellValueViaMouseParams mChangePropertyGridCellValueViaMouseParams;
		private CheckChangedPropertyGridCellValueViaMouseExpectedValues mCheckChangedPropertyGridCellValueViaMouseExpectedValues;
		private CheckDraggingRowsToDragAndDropAreaExpectedValues mCheckDraggingRowsToDragAndDropAreaExpectedValues;
		private CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues mCheckDraggingCategoryRowsToDragAndDropAreaExpectedValues;
		private CheckReorderedTreeListNodesViaDraggingExpectedValues mCheckReorderedTreeListNodesViaDraggingExpectedValues;
		private CreateNodesHierarchyParams mCreateNodesHierarchyParams;
		private CheckCreatedNodesHierarchyExpectedValues mCheckCreatedNodesHierarchyExpectedValues;
		private CheckPropertyGrindChangesExpectedValues mCheckPropertyGrindChangesExpectedValues;
		private CheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues mCheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues;
		private CheckAddedTreeListNodesExpectedValues mCheckAddedTreeListNodesExpectedValues;
		private UITutorialsCcodeWindow mUITutorialsCcodeWindow;
		private UIItemWindow mUIItemWindow;
		private UIXtraVerticalGridFeatWindow mUIXtraVerticalGridFeatWindow;
		private UIXtraVerticalGridFeatWindow1 mUIXtraVerticalGridFeatWindow1;
		private UIExpressioneditorWindow mUIExpressioneditorWindow;
		private UIXtraVerticalGridFeatWindow2 mUIXtraVerticalGridFeatWindow2;
		private UIXtraVerticalGridFeatWindow3 mUIXtraVerticalGridFeatWindow3;
		private UIXtraVerticalGridFeatWindow4 mUIXtraVerticalGridFeatWindow4;
		private UIXtraVerticalGridFeatWindow5 mUIXtraVerticalGridFeatWindow5;
		private UIItemWindow1 mUIItemWindow1;
		private UICustomizationWindow mUICustomizationWindow;
		private UIXtraTreeListFeaturesWindow mUIXtraTreeListFeaturesWindow;
		private UIXtraTreeListFeaturesWindow1 mUIXtraTreeListFeaturesWindow1;
		private UIFilterEditorWindow mUIFilterEditorWindow;
		private UIXtraTreeListFeaturesWindow2 mUIXtraTreeListFeaturesWindow2;
		private UIXtraTreeListFeaturesWindow3 mUIXtraTreeListFeaturesWindow3;
		private UIXtraTreeListFeaturesWindow4 mUIXtraTreeListFeaturesWindow4;
		private UIXtraTreeListFeaturesWindow5 mUIXtraTreeListFeaturesWindow5;
		private UIDevExpressWinFunctioWindow mUIDevExpressWinFunctioWindow;
		private UIXtraTreeListFeaturesWindow6 mUIXtraTreeListFeaturesWindow6;
		private UIXtraTreeListFeaturesWindow7 mUIXtraTreeListFeaturesWindow7;
		private UIXtraTreeListFeaturesWindow8 mUIXtraTreeListFeaturesWindow8;
		private UIXtraTreeListFeaturesWindow9 mUIXtraTreeListFeaturesWindow9;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToCategoryRowButtonDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckCategoryRowCollapsedStateExpectedValues
	{
		#region Fields
		public bool UICategoryRow1VerticalGridCategoryRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckCategoryRowExpandedStateExpectedValues
	{
		#region Fields
		public bool UICategoryRow1VerticalGridCategoryRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToTreeViewExpandButtonStyleParams
	{
		#region Fields
		public int UIRadioGroup1RadioGroupSelectedIndex = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToDragAndDropDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDragRowHeadersCheckBoxParams
	{
		#region Fields
		public bool UICheckBox1CheckBoxChecked = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public int UIMultiEditorRow2VerticalGridRowChildrenCount = 1;
		public string UIRowLast_NameVerticalGridRowParentName = "multiEditorRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UIRowLast_NameVerticalGridRowParentName = "vGridControl1";
		public int UIRowLast_NameVerticalGridRowVisibleIndex = 15;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public int UIRowPhotoVerticalGridRowVisibleIndex = 3;
		public string UIRowPhotoVerticalGridRowParentName = "categoryRow1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UIRowTitle_Of_CourtesyVerticalGridRowParentName = "categoryRow2";
		public int UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex = 12;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow3VerticalGridCategoryRowParentName = "multiEditorRow2";
		public int UICategoryRow3VerticalGridCategoryRowVisibleIndex = 11;
		public int UIMultiEditorRow2VerticalGridRowChildrenCount = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow2VerticalGridCategoryRowParentName = "vGridControl1";
		public int UICategoryRow2VerticalGridCategoryRowVisibleIndex = 10;
		public int UIMultiEditorRow2VerticalGridRowVisibleIndex = 13;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow3VerticalGridCategoryRowParentName = "categoryRow1";
		public int UICategoryRow3VerticalGridCategoryRowVisibleIndex = 3;
		public int UICategoryRow1VerticalGridCategoryRowChildrenCount = 7;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow1VerticalGridCategoryRowParentName = "categoryRow2";
		public int UICategoryRow1VerticalGridCategoryRowVisibleIndex = 6;
		public int UICategoryRow2VerticalGridCategoryRowChildrenCount = 6;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToResizingDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "8";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridRecordWidthViaDraggingFirstRecordRightEdgeParams
	{
		#region Fields
		public int UIVGridControl1VerticalGridRecordWidth = 218;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridRecordWidthExpectedValues
	{
		#region Fields
		public int UIVGridControl1VerticalGridRecordWidth = 218;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridRecordWidthViaRecordWidthSpinEditParams
	{
		#region Fields
		public string UISpinEdit1EditValueAsString = "218";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams
	{
		#region Fields
		public int UIVGridControl1VerticalGridRowHeaderWidth = 299;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridRowHeaderWidthExpectedValues
	{
		#region Fields
		public int UIVGridControl1VerticalGridRowHeaderWidth = 299;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridRowHeaderWidthViaRowHeaderWidthSpinEditParams
	{
		#region Fields
		public string UISpinEdit2EditValueAsString = "299";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCategoryRowHeaderHeightViaDraggingRowHeaderBottomEdgeParams
	{
		#region Fields
		public int UICategoryRow1VerticalGridRowRowHeight = 72;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridCategoryRowHeaderHeightExpectedValues
	{
		#region Fields
		public int UICategoryRow1VerticalGridCategoryRowRowHeight = 72;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridRowHeightViaDraggingRowEdgeParams
	{
		#region Fields
		public int UIRowTitle_Of_CourtesyVerticalGridRowRowHeight = 90;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridRowHeightExpectedValues
	{
		#region Fields
		public int UIRowTitle_Of_CourtesyVerticalGridRowRowHeight = 90;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridRecordsIntervalViaRecordsIntervalSpinEditParams
	{
		#region Fields
		public string UISpinEdit3EditValueAsString = "5 [SelectionStart]0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridRecordsIntervalExpectedValues
	{
		#region Fields
		public int UIVGridControl1VerticalGridRecordsInterval = 5;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToLayoutAndPaintStylesDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "5";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToBandsViewLayoutStyleParams
	{
		#region Fields
		public int UIRadioGroup1RadioGroupSelectedIndex = 0;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridBandWidthViaDraggingBandEdgeParams
	{
		#region Fields
		public int UIVGridControl1VerticalGridRecordWidth = 296;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridBandWidthExpectedValues
	{
		#region Fields
		public int UIVGridControl1VerticalGridRecordWidth = 296;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToMultiEditorsRowDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "6";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeMultiEditorsCellVerticalLineSeparatorsPositionParams
	{
		#region Fields
		public string UIMultiEditorRow2VerticalGridRowCellLengths = "62,99,26";
		public string UIMultiEditorRow2VerticalGridRowCellLengths1 = "62,49,76";
		public string UIMultiEditorRow1VerticalGridRowCellLengths = "141,47";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckMultiEditorsRowsCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues
	{
		#region Fields
		public string UIMultiEditorRow1VerticalGridRowCellLengths = "141,47";
		public string UIMultiEditorRow2VerticalGridRowCellLengths = "62,49,76";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeMultiEditorsCellStringSeparatorsPositionParams
	{
		#region Fields
		public string UIMultiEditorRow5VerticalGridRowCellLengths = "154,15";
		public string UIMultiEditorRow6VerticalGridRowCellLengths = "15,166";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckMultiEditorsRowsCellLengthsAfterChangeStringSeparatorPositionExpectedValues
	{
		#region Fields
		public string UIMultiEditorRow5VerticalGridRowCellLengths = "154,15";
		public string UIMultiEditorRow6VerticalGridRowCellLengths = "15,166";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeMultiEditorsHeaderCellVerticalLineSeparatorsPositionParams
	{
		#region Fields
		public string UIMultiEditorRow1VerticalGridRowHeaderCellLengths = "21,242";
		public string UIMultiEditorRow2VerticalGridRowHeaderCellLengths = "70,160,32";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckMultiEditorsRowsHeaderCellLengthsAfterChangeVerticalLineSeparatorPositionExpectedValues
	{
		#region Fields
		public string UIMultiEditorRow1VerticalGridRowHeaderCellLengths = "21,242";
		public string UIMultiEditorRow2VerticalGridRowHeaderCellLengths = "70,160,32";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeMultiEditorsHeaderCellStringSeparatorsPositionParams
	{
		#region Fields
		public string UIMultiEditorRow3VerticalGridRowHeaderCellLengths = "221,23";
		public string UIMultiEditorRow5VerticalGridRowHeaderCellLengths = "15,229";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckMultiEditorsRowsHeaderCellLengthsAfterChangeStringSeparatorPositionExpectedValues
	{
		#region Fields
		public string UIMultiEditorRow3VerticalGridRowHeaderCellLengths = "221,23";
		public string UIMultiEditorRow5VerticalGridRowHeaderCellLengths = "15,229";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeMultiEditorsSeparatorStringParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "multiEditorRow5[RecordIndex]0[CellIndex]1ExpandedTrue";
		public string UITextBox1EditValueAsString = "test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedMultiEditorsSeparatorStringExpectedValues
	{
		#region Fields
		public string UIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparatorText = "test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToRowCustomizationDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "10";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridRowInCustomizationFormExpectedValues
	{
		#region Fields
		public string UIPhotoListItemText = "Photo";
		public string UIPhotoListItemParentName = "categoryRow3";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridCategoryRowInCustomizationFormExpectedValues
	{
		#region Fields
		public string UIEmployeeListItemText = "Employee";
		public string UIEmployeeListItemParentName = "vGridControl1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowFromCustomizationFormWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UIRowTitle_Of_CourtesyVerticalGridRowParentName = "rowHome_Phone";
		public int UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex = 5;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowFromCustomizationFormWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UIRowLast_NameVerticalGridRowParentName = "vGridControl1";
		public int UIRowLast_NameVerticalGridRowVisibleIndex = 8;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UIRowHire_DateVerticalGridRowParentName = "vGridControl1";
		public int UIRowHire_DateVerticalGridRowVisibleIndex = 0;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UIRowExtensionVerticalGridRowParentName = "categoryRow2";
		public int UIRowExtensionVerticalGridRowVisibleIndex = 5;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow1VerticalGridCategoryRowParentName = "multiEditorRow2";
		public int UICategoryRow1VerticalGridCategoryRowVisibleIndex = 4;
		public string UIRowTitle_Of_CourtesyVerticalGridRowParentName = "categoryRow1";
		public int UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex = 8;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow1VerticalGridCategoryRowParentName = "vGridControl1";
		public int UICategoryRow1VerticalGridCategoryRowVisibleIndex = 8;
		public string UIRowTitle_Of_CourtesyVerticalGridRowParentName = "categoryRow1";
		public int UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex = 12;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow1VerticalGridCategoryRowParentName = "categoryRow2";
		public int UICategoryRow1VerticalGridCategoryRowVisibleIndex = 3;
		public string UIRowTitle_Of_CourtesyVerticalGridRowParentName = "categoryRow1";
		public int UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex = 7;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UICategoryRow1VerticalGridCategoryRowParentName = "categoryRow3";
		public int UICategoryRow1VerticalGridCategoryRowVisibleIndex = 8;
		public string UIRowTitle_Of_CourtesyVerticalGridRowParentName = "categoryRow1";
		public int UIRowTitle_Of_CourtesyVerticalGridRowVisibleIndex = 11;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class AddNewCategoryRowViaCustomizationFormOkButtonParams
	{
		#region Fields
		public string UITextEditEditValueAsString = "TestCategory";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UICategoryTestCategoryVerticalGridCategoryRowText = "TestCategory";
		public string UICategoryTestCategoryVerticalGridCategoryRowParentName = "rowHome_Phone";
		public int UICategoryTestCategoryVerticalGridCategoryRowVisibleIndex = 11;
		public string UICategoryTestCategoryVerticalGridCategoryRowStyle = "CategoryRow";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingAddedCategoryRowFromCustomizationFormWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UICategoryTestCategoryVerticalGridRowText = "TestCategory";
		public string UICategoryTestCategoryVerticalGridRowParentName = "vGridControl1";
		public int UICategoryTestCategoryVerticalGridRowVisibleIndex = 14;
		public string UICategoryTestCategoryVerticalGridRowStyle = "CategoryRow";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UICategoryTestCategoryVerticalGridCategoryRowText = "TestCategory";
		public string UICategoryTestCategoryVerticalGridCategoryRowParentName = "categoryRow3";
		public int UICategoryTestCategoryVerticalGridCategoryRowVisibleIndex = 12;
		public string UICategoryTestCategoryVerticalGridCategoryRowStyle = "CategoryRow";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridRowWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIRowHome_PhoneVerticalGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingAddedCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UICategoryTestCategoryVerticalGridCategoryRowText = "TestCategory";
		public string UICategoryTestCategoryVerticalGridCategoryRowParentName = "vGridControl1";
		public int UICategoryTestCategoryVerticalGridCategoryRowVisibleIndex = 13;
		public string UICategoryTestCategoryVerticalGridCategoryRowStyle = "CategoryRow";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragAnotherVerticalGridCategoryRowToCustomizationFormParams
	{
		#region Fields
		public string UICategoryRow2VerticalGridCategoryRowDraggingDestination = "InsertBefore";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DeleteVerticalGridCategoryRowInCustomizationFormParams
	{
		#region Fields
		public string UILbCategoriesListSelectedIndicesAsString = "0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDeletedVerticalGridCategoryRowInCustomizationFormExpectedValues
	{
		#region Fields
		public string UIAddressListItemText = "Address";
		public int UIAddressListItemIndex = 0;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckAnotherVerticalGridCategoryRowInCustomizationFormExpectedValues
	{
		#region Fields
		public string UIAddressListItemText = "Address";
		public int UIAddressListItemIndex = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapseCategoryRowViaDoubleClickHeaderCellParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public bool UICategoryRow1VerticalGridRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandCategoryRowViaDoubleClickHeaderCellImageParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public bool UICategoryRow1VerticalGridRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapseCategoryRowViaDoubleClickParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public bool UICategoryRow1VerticalGridCategoryRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckAddedCategoryRowInCustomizationFormExpectedValues
	{
		#region Fields
		public string UITestCategoryListItem1Text = "TestCategory";
		public int UITestCategoryListItem1Index = 0;
		public string UITestCategoryListItem1ParentName = "vGridControl1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class AddNewCategoryRowViaEnterKeyParams
	{
		#region Fields
		public string UITextEditEditValueAsString = "TestCategory";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapseCategoryRowViaMinusKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Subtract}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandCategoryRowViaPlusKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Add}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCategoryRowHeaderHeightViaCTRLLeftKeysParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowTitle[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys1 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys2 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys3 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys4 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys5 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys6 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys7 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys8 = "{Left}";
		public string UIVGridControl1VerticalGridSendKeys9 = "{Left}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues
	{
		#region Fields
		public int UIVGridControl1VerticalGridRowHeaderWidth = 165;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCategoryRowHeaderHeightViaCTRLRightKeysParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowHome_Phone[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys1 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys2 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys3 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys4 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys5 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys6 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys7 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys8 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys9 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys10 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys11 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys12 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys13 = "{Right}";
		public string UIVGridControl1VerticalGridSendKeys14 = "{Right}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVerticalGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues
	{
		#region Fields
		public int UIVGridControl1VerticalGridRowHeaderWidth = 215;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToDataModeDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridFocusedCellEditorValueViaEnterKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}{NumPad3}";
		public string UITextEditEditValueAsString = "355";
		public string UITextEditEditSendKeys = "{Enter}";
		public string UIVGridControl1VerticalGridSendKeys1 = "{Down}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueExpectedValues
	{
		#region Fields
		public string UIItem355VerticalGridCellValueAsString = "355";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridFocusedCellEditorValueViaF2KeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}{F2}";
		public string UITextEditEditValueAsString = "355";
		public string UITextEditEditSendKeys = "{Right}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridFocusedCellEditorValueViaCharacterKeysParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}{Down}{Down}{Right}{Right}{NumPad1}";
		public string UITextEditEdit1ValueAsString = "125";
		public string UIVGridControl1VerticalGridFocusedCellAsString1 = "categoryRow1[RecordIndex]2[CellIndex]0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaCharacterKeysExpectedValues
	{
		#region Fields
		public string UIItem125VerticalGridCellValueAsString = "125";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaEscKeyExpectedValues
	{
		#region Fields
		public string UIItem24VerticalGridCellValueAsString = "24";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToRowFormatDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "11";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellDateFormatValueParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowPurchaseDate[RecordIndex]1[CellIndex]0";
		public string UIDateEditDateTimeEditValueAsString = "2012-10-25 [SelectionStart]0[SelectionLength]2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellDateFormatValueExpectedValues
	{
		#region Fields
		public string UIDateEditDateTimeEditValueAsString = "2012-10-25";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellDecimalFormatValueParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowPayment1[RecordIndex]1[CellIndex]0";
		public string UITextEditEditValueAsString = "555";
		public string UIVGridControl1VerticalGridFocusedCellAsString1 = "rowPayment1[RecordIndex]2[CellIndex]0";
		public string UIItem10099VerticalGridCellValueTypeName = "System.Double";
		public string UIItem10099VerticalGridCellActiveEditorValue = "100.99";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellDecimalFormatValueExpectedValues
	{
		#region Fields
		public string UIItem55500VerticalGridCellValueAsString = "555";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToEditorsDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "3";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellValueViaSpinEditorParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowTransmiss_Speed_Count[RecordIndex]0[CellIndex]0";
		public string UISpinEditEditValueAsString = "10 [SelectionStart]0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaSpinEditorExpectedValues
	{
		#region Fields
		public string UISpinEditEditValueAsString = "10";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellValueViaImageComboBoxEditorParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowTransmiss_Automatic[RecordIndex]0[CellIndex]0";
		public string UIImageComboBoxEditComboBoxValueAsString = "No";
		public string UIImageComboBoxEditComboBoxSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaImageComboBoxEditorExpectedValues
	{
		#region Fields
		public string UINOVerticalGridCellValueAsString = "No";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToRowsNavigationDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "12";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridFirstCellValueViaHomeKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}{Down}{Down}{Down}{Right}{Right}{Right}{Right}{Up}{Home}{NumPad1}";
		public string UITextEditEditValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridFirstCellValueViaHomeKeyExpectedValues
	{
		#region Fields
		public string UIItem123VerticalGridCellValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridLastCellValueViaEndKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}{End}{NumPad1}";
		public string UITextEditEdit1ValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridLastCellValueViaEndKeyExpectedValues
	{
		#region Fields
		public string UITextEditEdit1ValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellValueViaPageDownKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}{Right}{PageDown}{Up}{Up}{Up}{NumPad1}";
		public string UITextEditEdit2ValueAsString = "123";
		public string UITextEditEdit3SendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaPageDownKeyExpectedValues
	{
		#region Fields
		public string UIItem123VerticalGridCellValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellValueViaPageUpKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowNotes[RecordIndex]2[CellIndex]0";
		public string UIMemoExEditPopupEditSendKeys = "{PageUp}";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}";
		public string UITextEditEdit4ValueAsString = "123";
		public string UITextEditEdit5SendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaPageUpKeyExpectedValues
	{
		#region Fields
		public string UIItem123VerticalGridCellValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellValueViaCtrlEndShortcutParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}";
		public string UIVGridControl1VerticalGridSendKeys1 = "{End}";
		public string UIVGridControl1VerticalGridSendKeys2 = "{Up}{Up}{Up}{NumPad1}";
		public string UITextEditEdit6ValueAsString = "123";
		public string UITextEditEdit7SendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaCtrlEndShortcutExpectedValues
	{
		#region Fields
		public string UIItem123VerticalGridCell1ValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellValueViaCtrlHomeShortcutParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowNotes[RecordIndex]4[CellIndex]0";
		public string UIMemoExEditPopupEdit2SendKeys = "{Home}";
		public string UIVGridControl1VerticalGridSendKeys = "{Down}";
		public string UITextEditEdit8ValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaCtrlHomeShortcutExpectedValues
	{
		#region Fields
		public string UITextEditEdit8ValueAsString = "123";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class EditingVerticalGridCellValueViaArrowKeysParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowLast_Name[RecordIndex]3[CellIndex]0";
		public string UITextEditEdit9ValueAsString = "Buchan123an [SelectionStart]9";
		public string UITextEditEdit10SendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaArrowKeysExpectedValues
	{
		#region Fields
		public string UIBuchan123anVerticalGridCellValueAsString = "Buchan123an";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToScrollVisibilityDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "13";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToHorizontalScrollVisibilityParams
	{
		#region Fields
		public int UIRadioGroup1RadioGroupSelectedIndex = 3;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ScrollVerticalGridRecordsParams
	{
		#region Fields
		public string UIVGridHorzScrollBarScrollBarControlValueAsString = "2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellValueAfterScrollingRecordsParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "multiEditorRow1[RecordIndex]4[CellIndex]1";
		public string UIComboBoxEditComboBoxValueAsString = "US";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellValueViaScrollingRecordsExpectedValues
	{
		#region Fields
		public string UIComboBoxEditComboBoxValueAsString = "US";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchVerticalGridLayoutStyleToBandsViewParams
	{
		#region Fields
		public int UIRadioGroup2RadioGroupSelectedIndex = 0;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchVerticalGridLayoutStyleToSingleRecordViewParams
	{
		#region Fields
		public int UIRadioGroup2RadioGroupSelectedIndex = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CreateExpressionsViaExpressionsEditorParams
	{
		#region Fields
		public string UIListOfInputTypesListSelectedIndicesAsString = "2";
		public string UIListOfInputParameterListSelectedIndicesAsString = "0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckAddedUnboundRowExpectedValues
	{
		#region Fields
		public string UIItem26VerticalGridCellValueAsString = "26";
		public string UIItem198VerticalGridCellValueAsString = "19.8";
		public string UIRow7VerticalGridRowText = "[Discount] + [Quantity] + [UnitPrice]";
		public string UIRow7VerticalGridRowParentName = "categoryRow2";
		public int UIRow7VerticalGridRowVisibleIndex = 9;
		public string UIRow7VerticalGridRowStyle = "EditorRow";
		public int UIRow7VerticalGridRowChildrenCount = 0;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellsValuesForCheckUnboundRowsChangesParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowQuantity[RecordIndex]1[CellIndex]0";
		public string UITextEditEditValueAsString = "100 [SelectionStart]2";
		public string UIVGridControl1VerticalGridFocusedCellAsString1 = "rowDiscount[RecordIndex]1[CellIndex]0";
		public string UITextEditEdit1ValueAsString = "5";
		public string UITextEditEdit1SendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckUnboundRowsChangesExpectedValues
	{
		#region Fields
		public string UIItem392000VerticalGridCellValueAsString = "-3920";
		public string UIItem490000VerticalGridCellValueAsString = "4900.0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellsValuesInSimpleModeParams
	{
		#region Fields
		public string UIVGridControl2VerticalGridFocusedCellAsString = "multiEditorRow1[RecordIndex]0[CellIndex]0";
		public string UITextEditEditValueAsString = "JohnTest";
		public string UIVGridControl2VerticalGridFocusedCellAsString1 = "editorRow2[RecordIndex]0[CellIndex]0";
		public string UITextEditEdit1ValueAsString = "Doe EnterprisesDX";
		public string UIVGridControl2VerticalGridFocusedCellAsString2 = "editorRow3[RecordIndex]0[CellIndex]0";
		public bool UICheckEditCheckBoxChecked = false;
		public string UIVGridControl2VerticalGridFocusedCellAsString3 = "editorRow5[RecordIndex]0[CellIndex]0";
		public string UIImageComboBoxEditComboBoxValueAsString = "N";
		public string UIVGridControl2VerticalGridFocusedCellAsString4 = "multiEditorRow2[RecordIndex]0[CellIndex]1";
		public string UIImageComboBoxEditComboBox1ValueTypeName = "System.Int32";
		public string UIImageComboBoxEditComboBox1ValueAsString = "2";
		public string UIVGridControl2VerticalGridFocusedCellAsString5 = "editorRow8[RecordIndex]0[CellIndex]0";
		public string UIDateEditDateTimeEditValueAsString = "2001-02-16 [SelectionStart]0[SelectionLength]10";
		public string UIVGridControl2VerticalGridFocusedCellAsString6 = "editorRow6[RecordIndex]0[CellIndex]0";
		public string UITextEditEdit2ValueAsString = "(555)955-55-55";
		public string UIVGridControl2VerticalGridFocusedCellAsString7 = "editorRow9[RecordIndex]0[CellIndex]0";
		public string UIImageComboBoxEditComboBox2ValueAsString = "MS";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellsValuesInSimpleModeExpectedValues
	{
		#region Fields
		public string UIJohnTestVerticalGridCellValueAsString = "JohnTest";
		public string UIDoeEnterprisesDXVerticalGridCellValueAsString = "Doe EnterprisesDX";
		public string UIUncheckedVerticalGridCellValueAsString = "False";
		public string UIUncheckedVerticalGridCellText = "Unchecked";
		public string UIUnknownVerticalGridCellText = "Unknown";
		public string UIUnknownVerticalGridCellValueAsString = "N";
		public string UIHighVerticalGridCellText = "High";
		public string UIItem12072012VerticalGridCellValueAsString = "2001-02-16";
		public string UIItem5559561566VerticalGridCellValueAsString = "(555)955-55-55";
		public string UIImageComboBoxEditComboBox2ValueAsString = "MS";
		public string UIImageComboBoxEditComboBox2Text = "Master";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchButtonModeToShowForFocusedRecordParams
	{
		#region Fields
		public bool UIRadioButton9CheckBoxChecked = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridCellsValuesInDataBindingModeParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowCategory[RecordIndex]0[CellIndex]0";
		public string UIImageComboBoxEditComboBoxValueAsString = "TRUCK";
		public string UIVGridControl1VerticalGridFocusedCellAsString1 = "rowCyl[RecordIndex]0[CellIndex]0";
		public string UISpinEditEditValueAsString = "12 [SelectionStart]0";
		public string UIVGridControl1VerticalGridFocusedCellAsString2 = "rowTransmiss_Speed_Count[RecordIndex]0[CellIndex]0";
		public string UISpinEditEdit1ValueAsString = "1 [SelectionStart]0";
		public string UIVGridControl1VerticalGridFocusedCellAsString3 = "rowTransmiss_Automatic[RecordIndex]0[CellIndex]0";
		public int UIRadioGroupRadioGroupSelectedIndex = 1;
		public string UIVGridControl1VerticalGridFocusedCellAsString4 = "rowPrice[RecordIndex]0[CellIndex]0";
		public string UICalcEditPopupEditValueAsString = "5600 [SelectionStart]0";
		public string UIVGridControl1VerticalGridFocusedCellAsString5 = "rowDelivery_Date[RecordIndex]0[CellIndex]0";
		public string UIDateEditDateTimeEditValueAsString = "2002-07-11 [SelectionStart]0[SelectionLength]10";
		public string UIVGridControl1VerticalGridFocusedCellAsString6 = "rowIs_In_Stock[RecordIndex]0[CellIndex]0";
		public bool UICheckCheckBoxChecked = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedVerticalGridCellsValuesInDataBindingModeExpectedValues
	{
		#region Fields
		public string UITruckVerticalGridCellValueAsString = "TRUCK";
		public string UIItem12VerticalGridCellValueAsString = "12";
		public string UIItem1VerticalGridCellValueAsString = "1";
		public string UINOVerticalGridCellValueAsString = "No";
		public string UIItem560000VerticalGridCellValueAsString = "5600";
		public string UIItem11072002VerticalGridCellValueAsString = "07/11/2002";
		public bool UICheckCheckBoxChecked = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridFirstNameCellValueForCheckFullNameChangesParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowFirst_Name[RecordIndex]0[CellIndex]0";
		public string UITextEditEditValueAsString = "NancyTest";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckFullNameValueAfterChangingFirstNameCellValueExpectedValues
	{
		#region Fields
		public string UINancyTestDavolioVerticalGridCellValueAsString = "NancyTest Davolio";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeFullNameFormatParams
	{
		#region Fields
		public string UICbNameOrderComboBoxValueAsString = "Last Name only [SelectionStart]0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckFullNameValueExpectedValues
	{
		#region Fields
		public string UINancyTestDavolioVerticalGridCellValueAsString = "Davolio";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridCategoryRowCollapsedStateExpectedValues
	{
		#region Fields
		public bool UICategoryAppearancePropertyGridCategoryRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridCategoryRowExpandedStateExpectedValues
	{
		#region Fields
		public bool UICategoryAppearancePropertyGridCategoryRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapsePropertyGridCategoryRowViaDoubleClickHeaderCellParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryAppearance[RecordIndex]0[CellIndex]0";
		public bool UICategoryAppearancePropertyGridRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapsePropertyGridCategoryRowViaDoubleClickParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryAppearance[RecordIndex]0[CellIndex]0";
		public bool UICategoryAppearancePropertyGridCategoryRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandPropertyGridCategoryRowViaDoubleClickParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryAppearance[RecordIndex]0[CellIndex]0";
		public bool UICategoryAppearancePropertyGridCategoryRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapsePropertyGridCategoryRowViaMinusKeyParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryAppearance[RecordIndex]0[CellIndex]0";
		public string UIPropertyGridControl1PropertyGridSendKeys = "{Subtract}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandPropertyGridCategoryRowViaPlusKeyParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryAppearance[RecordIndex]0[CellIndex]0";
		public string UIPropertyGridControl1PropertyGridSendKeys = "{Add}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowExpandedStateExpectedValues
	{
		#region Fields
		public bool UIRowFontPropertyGridRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowCollapsedStateExpectedValues
	{
		#region Fields
		public bool UIRowFontPropertyGridRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandPropertyGridRowViaDoubleClickParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowFont[RecordIndex]0[CellIndex]0";
		public bool UIRowFontPropertyGridRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapsePropertyGridRowViaDoubleClickHeaderCellParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowFont[RecordIndex]0[CellIndex]0";
		public bool UIRowFontPropertyGridRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandPropertyGridRowViaPlusKeyParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowFont[RecordIndex]0[CellIndex]0";
		public string UIPropertyGridControl1PropertyGridSendKeys = "{Add}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapsePropertyGridRowViaMinusKeyParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowFont[RecordIndex]0[CellIndex]0";
		public string UIPropertyGridControl1PropertyGridSendKeys = "{Subtract}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridRowHeaderWidthViaDraggingRowHeaderRightEdgeParams
	{
		#region Fields
		public int UIPropertyGridControl1PropertyGridRowHeaderWidth = 180;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowHeaderWidthExpectedValues
	{
		#region Fields
		public int UIPropertyGridControl1PropertyGridRowHeaderWidth = 180;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridRowHeaderHeightViaCTRLLeftKeysParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowBorderStyle[RecordIndex]0[CellIndex]0";
		public string UIPropertyGridControl1PropertyGridSendKeys = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys1 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys2 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys3 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys4 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys5 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys6 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys7 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys8 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys9 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys10 = "{Left}";
		public string UIPropertyGridControl1PropertyGridSendKeys11 = "{Left}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowHeaderWidthChangedViaCTRLLeftKeysExpectedValues
	{
		#region Fields
		public int UIPropertyGridControl1PropertyGridRowHeaderWidth = 76;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridRowHeaderHeightViaCTRLRightKeysParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowBorderStyle[RecordIndex]0[CellIndex]0";
		public string UIPropertyGridControl1PropertyGridSendKeys = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys1 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys2 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys3 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys4 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys5 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys6 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys7 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys8 = "{Right}";
		public string UIPropertyGridControl1PropertyGridSendKeys9 = "{Right}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowHeaderWidthChangedViaCTRLRightKeysExpectedValues
	{
		#region Fields
		public int UIPropertyGridControl1PropertyGridRowHeaderWidth = 120;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridRowHeightViaDraggingRowEdgeParams
	{
		#region Fields
		public int UIRowFontPropertyGridRowRowHeight = 51;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowHeightExpectedValues
	{
		#region Fields
		public int UIRowFontPropertyGridRowVisibleIndex = 9;
		public int UIRowFontPropertyGridRowRowHeight = 51;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridCategoryRowHeightViaDraggingRowEdgeParams
	{
		#region Fields
		public int UICategoryAppearancePropertyGridRowRowHeight = 108;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridCategoryRowHeightExpectedValues
	{
		#region Fields
		public int UICategoryAppearancePropertyGridCategoryRowRowHeight = 108;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridFixedRowHeightViaDraggingRowEdgeParams
	{
		#region Fields
		public int UIRowProperties_PicturPropertyGridRowRowHeight = 70;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridFixedRowHeightExpectedValues
	{
		#region Fields
		public int UIRowProperties_PicturPropertyGridRowRowHeight = 70;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridCellValueViaArrowKeysAndEnterKeyParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryAppearance[RecordIndex]0[CellIndex]0";
		public string UIPropertyGridControl1PropertyGridSendKeys = @"{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}t";
		public string UIPGPopupContainerEditPopupEditValueAsString = "test";
		public string UIPGPopupContainerEditPopupEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedPropertyGridCellValueViaArrowKeysExpectedValues
	{
		#region Fields
		public string UITestPropertyGridCellValueAsString = "test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedPropertyGridCellValueViaEscKeyExpectedValues
	{
		#region Fields
		public string UIWhitePropertyGridCellValueAsString = "White";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyDescriptionControlValueViaChangingFocusedRowParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowUseWaitCursor[RecordIndex]0[CellIndex]0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyDescriptionControlPropertiesExpectedValues
	{
		#region Fields
		public string UIPropertyGridControl1PropertyDescriptionControlText = "When this property is true, the Cursor property of the control and its child cont" +
			"rols is set to WaitCursor.";
		public string UIPropertyGridControl1PropertyDescriptionControlParentName = "AppearanceCategory";
		public string UIPropertyGridControl1PropertyDescriptionControlDisplayedProperty = "UseWaitCursor";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridCategoryRowFixedTopStateExpectedValues
	{
		#region Fields
		public string UICategoryBarManagerPropertyGridCategoryRowText = "BarManager";
		public bool UICategoryBarManagerPropertyGridCategoryRowExpanded = true;
		public string UICategoryBarManagerPropertyGridCategoryRowParentName = "propertyGridControl1";
		public int UICategoryBarManagerPropertyGridCategoryRowVisibleIndex = 0;
		public string UICategoryBarManagerPropertyGridCategoryRowFixed = "Top";
		public string UIRowMenuManagerPropertyGridRowText = "MenuManager";
		public bool UIRowMenuManagerPropertyGridRowExpanded = true;
		public string UIRowMenuManagerPropertyGridRowParentName = "categoryBarManager";
		public int UIRowMenuManagerPropertyGridRowVisibleIndex = 1;
		public string UIRowMenuManagerPropertyGridRowFixed = "Top";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridCategoryRowFixedBottomStateExpectedValues
	{
		#region Fields
		public bool UICategoryBarManagerPropertyGridCategoryRowExpanded = true;
		public string UICategoryBarManagerPropertyGridCategoryRowParentName = "propertyGridControl1";
		public int UICategoryBarManagerPropertyGridCategoryRowVisibleIndex = 46;
		public int UICategoryBarManagerPropertyGridCategoryRowChildrenCount = 1;
		public string UICategoryBarManagerPropertyGridCategoryRowFixed = "Bottom";
		public bool UIRowMenuManagerPropertyGridRowExpanded = true;
		public string UIRowMenuManagerPropertyGridRowParentName = "categoryBarManager";
		public int UIRowMenuManagerPropertyGridRowVisibleIndex = 47;
		public string UIRowMenuManagerPropertyGridRowFixed = "Bottom";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowNotFixedStateExpectedValues
	{
		#region Fields
		public bool UIRowImagePropertyGridRowExpanded = false;
		public string UIRowImagePropertyGridRowParentName = "propertyGridControl1";
		public int UIRowImagePropertyGridRowVisibleIndex = 30;
		public int UIRowImagePropertyGridRowChildrenCount = 7;
		public string UIRowImagePropertyGridRowFixed = "None";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridFixedRowsAfterResetExpectedValues
	{
		#region Fields
		public bool UIRowImagePropertyGridRowExpanded = false;
		public string UIRowImagePropertyGridRowParentName = "propertyGridControl1";
		public int UIRowImagePropertyGridRowVisibleIndex = 0;
		public string UIRowImagePropertyGridRowFixed = "Top";
		public bool UIRowProperties_PicturPropertyGridRowExpanded = true;
		public string UIRowProperties_PicturPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowProperties_PicturPropertyGridRowVisibleIndex = 1;
		public string UIRowProperties_PicturPropertyGridRowFixed = "Top";
		public bool UIRowProperties_SizeMoPropertyGridRowExpanded = true;
		public string UIRowProperties_SizeMoPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowProperties_SizeMoPropertyGridRowVisibleIndex = 2;
		public string UIRowProperties_SizeMoPropertyGridRowFixed = "Top";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowFixedBottomStateExpectedValues
	{
		#region Fields
		public bool UIRowProperties_PicturPropertyGridRowExpanded = true;
		public string UIRowProperties_PicturPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowProperties_PicturPropertyGridRowVisibleIndex = 47;
		public string UIRowProperties_PicturPropertyGridRowFixed = "Bottom";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class AllowFixingNestedRowsParams
	{
		#region Fields
		public bool UICheAllowFixingNestedCheckBoxChecked = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridNestedRowFixedTopStateExpectedValues
	{
		#region Fields
		public bool UIRowBorderStylePropertyGridRowExpanded = true;
		public string UIRowBorderStylePropertyGridRowParentName = "propertyGridControl1";
		public int UIRowBorderStylePropertyGridRowVisibleIndex = 0;
		public string UIRowBorderStylePropertyGridRowFixed = "Top";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridNestedRowFixedBottomStateExpectedValues
	{
		#region Fields
		public bool UIRowFontPropertyGridRowExpanded = false;
		public string UIRowFontPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowFontPropertyGridRowVisibleIndex = 47;
		public string UIRowFontPropertyGridRowFixed = "Bottom";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapseTreeListNodeViaClickExpandButtonParams
	{
		#region Fields
		public bool UINode0TreeListNode1Expanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckNodeCollapsedStateExpectedValues
	{
		#region Fields
		public bool UINode0TreeListNode1Expanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToColumnAlignmentDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandTreeListNodeViaClickExpandButtonParams
	{
		#region Fields
		public bool UINode0TreeListNode1Expanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckNodeExpandedStateExpectedValues
	{
		#region Fields
		public bool UINode0TreeListNode1Expanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapseTreeListNodeViaCtrlAndLeftArrowKeysParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Left}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandTreeListNodeViaCtrlAndRightArrowKeysParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Right}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapseTreeListNodeViaMinusKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Subtract}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandTreeListNodeViaPlusKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Add}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToColumnCustomizationDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ReorderColumnsViaDraggingParams
	{
		#region Fields
		public int UICommonNameTreeListColumnHeaderVisibleIndex = 0;
		public int UISpeciesNoTreeListColumnHeaderVisibleIndex = 4;
		public int UISpeciesNameTreeListColumnHeaderVisibleIndex = 2;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckColumnsPositionsAfterReorderingExpectedValues
	{
		#region Fields
		public int UICommonNameTreeListColumnHeaderVisibleIndex = 0;
		public int UILengthcmTreeListColumnHeaderVisibleIndex = 1;
		public int UISpeciesNameTreeListColumnHeaderVisibleIndex = 2;
		public int UICategoryTreeListColumnHeaderVisibleIndex = 3;
		public int UISpeciesNoTreeListColumnHeaderVisibleIndex = 4;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DeleteColumnsViaDraggingParams
	{
		#region Fields
		public int UILengthcmTreeListColumnHeaderVisibleIndex = -1;
		public int UICategoryTreeListColumnHeaderVisibleIndex = -1;
		public int UISpeciesNameTreeListColumnHeaderVisibleIndex = -1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDeletedColumnViaDraggingExpectedValues
	{
		#region Fields
		public string UICategoryCustomText = "Category";
		public int UICategoryCustomVisibleIndex = -1;
		public string UICategoryCustomColumnName = "colCategory";
		public int UICategoryCustomIndex = 0;
		public string UILengthcmCustomText = "Length(cm)";
		public int UILengthcmCustomVisibleIndex = -1;
		public string UILengthcmCustomColumnName = "colLength(cm)";
		public int UILengthcmCustomIndex = 1;
		public string UISpeciesNameCustomText = "Species Name";
		public int UISpeciesNameCustomVisibleIndex = -1;
		public string UISpeciesNameCustomColumnName = "colSpeciesName";
		public int UISpeciesNameCustomIndex = 6;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragColumnFromCustomizationFormParams
	{
		#region Fields
		public int UILengthcmCustomVisibleIndex = 2;
		public int UIMarkCustomVisibleIndex = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckColumnsPositionsAfterDraggingFromCustomizationFormExpectedValues
	{
		#region Fields
		public int UISpeciesNoTreeListColumnHeaderVisibleIndex = 0;
		public int UIMarkTreeListColumnHeaderVisibleIndex = 1;
		public int UICommonNameTreeListColumnHeaderVisibleIndex = 2;
		public int UILengthcmTreeListColumnHeaderVisibleIndex = 3;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToTreeListDragAndDropDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "7";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DisableDragNodesOptionParams
	{
		#region Fields
		public bool UICheckBox1CheckBoxChecked = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckEmptyDragAndDropListBoxExpectedValues
	{
		#region Fields
		public string UIListBox1ListSelectedItemsAsString = "";
		public string UIListBox1ListSelectedIndicesAsString = "";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellCurrencyFormatValueParams
	{
		#region Fields
		public string UITextEditEditSendKeys = "{Right}";
		public string UITextEditEditValueAsString = "5120";
		public string UITextEditEditSendKeys1 = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellCurrencyFormatValueExpectedValues
	{
		#region Fields
		public string UIItem512000TreeListCellValueAsString = "5120";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToColumnFormatDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "3";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellPurchaseDateFormatValueParams
	{
		#region Fields
		public string UIDateEditDateTimeEditValueAsString = "2012-07-13 [SelectionStart]0[SelectionLength]2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellPurchaseDateFormatValueExpectedValues
	{
		#region Fields
		public string UIItem13072012TreeListCellValueAsString = "07/13/2012";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToCustomTreeListNodeDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "4";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToTreeListDataModeDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "5";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaCheckBoxEditorParams
	{
		#region Fields
		public bool UICheckEditCheckBoxChecked = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaCheckBoxEditorExpectedValues
	{
		#region Fields
		public string UICheckedTreeListCellText = "Checked";
		public string UICheckedTreeListCellValueAsString = "True";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaTextBoxEditorParams
	{
		#region Fields
		public string UITextEditEditValueAsString = "(617) 555-1234";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaTextBoxEditorExpectedValues
	{
		#region Fields
		public string UIItem6175551234TreeListCellValueAsString = "(617) 555-1234";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToDataStoreDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "6";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaComboBoxEditorParams
	{
		#region Fields
		public string UIImageComboBoxEditComboBoxValueTypeName = "System.Int32";
		public string UIImageComboBoxEditComboBoxValueAsString = "1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaComboBoxEditorExpectedValues
	{
		#region Fields
		public string UILowTreeListCellValueAsString = "1";
		public string UILowTreeListCellText = "Low";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSelectedNodesViaClickAndHoldingDownCtrlKeyExpectedValues
	{
		#region Fields
		public string UILbSelectedRowsCountLabelText = "6";
		public string UILbSelectedRowsLabelText = "0;1;4;8;7;3.";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToMultiSelectDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "10";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSelectedNodesViaClickAndHoldingDownShiftKeyExpectedValues
	{
		#region Fields
		public string UILbSelectedRowsCountLabelText = "8";
		public string UILbSelectedRowsLabelText = "0;1;2;3;4;5;6;7.";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class MoveCellFocusViaCtrlAndArrowKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Up}";
		public string UITreeList1TreeListSendKeys1 = "{Up}";
		public string UITreeList1TreeListSendKeys2 = "{Up}";
		public string UITreeList1TreeListSendKeys3 = "{Up}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSelectedNodesViaShiftAndUpKeysExpectedValues
	{
		#region Fields
		public string UILbSelectedRowsCountLabelText = "6";
		public string UILbSelectedRowsLabelText = "7;6;5;4;3;2.";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellLongDateFormatValueParams
	{
		#region Fields
		public string UIDateEditDateTimeEditValueAsString = "2001-10-24 [SelectionStart]3[SelectionLength]2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellLongDateFormatValueExpectedValues
	{
		#region Fields
		public string UIItem30October2008TreeListCellValueAsString = "2001-10-24";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSelectedNodesViaShiftAndDownKeysExpectedValues
	{
		#region Fields
		public string UILbSelectedRowsCountLabelText = "3";
		public string UILbSelectedRowsLabelText = "5;6;7.";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSelectedNodesViaClickAndHoldingDownCtrlAndShiftKeyExpectedValues
	{
		#region Fields
		public string UILbSelectedRowsCountLabelText = "3";
		public string UILbSelectedRowsLabelText = "0;1;4.";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SelectNodesViaShiftCtrlAndUpKeysParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Up}";
		public string UITreeList1TreeListSendKeys1 = "{Up}";
		public string UITreeList1TreeListSendKeys2 = "{Up}";
		public string UITreeList1TreeListSendKeys3 = "{Up}";
		public string UITreeList1TreeListSendKeys4 = "{Up}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSelectedNodesViaShiftCtrlAndUpKeysExpectedValues
	{
		#region Fields
		public string UILbSelectedRowsCountLabelText = "6";
		public string UILbSelectedRowsLabelText = "7;6;5;4;3;2.";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SelectNodesViaShiftCtrlAndDownKeysParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Down}";
		public string UITreeList1TreeListSendKeys1 = "{Down}";
		public string UITreeList1TreeListSendKeys2 = "{Down}";
		public string UITreeList1TreeListSendKeys3 = "{Down}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSelectedNodesViaShiftCtrlAndDownKeysExpectedValues
	{
		#region Fields
		public string UILbSelectedRowsCountLabelText = "5";
		public string UILbSelectedRowsLabelText = "2;3;4;5;6.";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckNodesParams
	{
		#region Fields
		public bool UINode0TreeListNodeChecked = false;
		public bool UINode1TreeListNodeChecked = true;
		public bool UINode2TreeListNodeChecked = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckNodesCheckedStatesExpectedValues
	{
		#region Fields
		public bool UINode0TreeListNode1Checked = false;
		public bool UINode0TreeListNodeChecked = false;
		public bool UINode1TreeListNodeChecked = true;
		public bool UINode2TreeListNodeChecked = true;
		public bool UINode0TreeListNodeChecked1 = true;
		public bool UINode1TreeListNodeChecked1 = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToNodeCheckingDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "11";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DisableRecursiveNodesCheckingOptionParams
	{
		#region Fields
		public bool UIChkAllowRecursiveCheckBoxChecked = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckNodesViaKeyboardParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Space}{Down}{Down}{Space}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedNodesCheckedStatesViaKeyboardExpectedValues
	{
		#region Fields
		public bool UINode0TreeListNode1Checked = false;
		public bool UINode0TreeListNodeChecked = true;
		public bool UINode1TreeListNodeChecked = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class EnableIndeterminateCheckStateOptionParams
	{
		#region Fields
		public bool UIChkAllowIndeterminatCheckBoxChecked = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckNodesAfterEnablingIndeterminateCheckStateOptionParams
	{
		#region Fields
		public bool UINode1TreeListNodeChecked = false;
		public bool UINode2TreeListNodeChecked = false;
		public bool UINode0TreeListNodeChecked = false;
		public bool UINode0TreeListNodeChecked1 = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedNodesCheckedStateAfterEnablingIndeterminateCheckStateOptionExpectedValues
	{
		#region Fields
		public bool UINode1TreeListNodeChecked = false;
		public bool UINode0TreeListNodeChecked = true;
		public bool UINode1TreeListNodeChecked1 = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToNodesNavigationDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "12";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListFocusedCellEditorValueViaClickCellAndEnterKeyParams
	{
		#region Fields
		public string UITextEditEditValueAsString = "Test";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueExpectedValues
	{
		#region Fields
		public string UITestTreeListCellValueAsString = "Test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListFocusedCellEditorValueViaF2KeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{F2}";
		public string UITextEditEditValueAsString = "Test";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListFocusedCellEditorValueViaCharacterKeysParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "T";
		public string UITextEditEditValueAsString = "Test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListFocusedCellEditorValueViaEscKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "T";
		public string UITextEditEditValueAsString = "Test";
		public string UITreeList1TreeListSendKeys1 = "{Escape}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListFocusedCellEditorValueViaClickIndicatorNodeAndEnterKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "T";
		public string UITextEditEditValueAsString = "Test";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaDownAndRightKeysParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Down}{Down}{Down}{Down}{Right}{Right}T";
		public string UITextEditEditValueAsString = "Test";
		public string UITextEditEdit1SendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaArrowKeysExpectedValues
	{
		#region Fields
		public string UICroakerTreeListCellValueAsString = "Test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaHomeKeyParams
	{
		#region Fields
		public string UICheckEditCheckBoxSendKeys = "{Home}";
		public string UITextEditEditValueAsString = "TestNodes";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaHomeKeyExpectedValues
	{
		#region Fields
		public string UITestNodesTreeListCellValueAsString = "TestNodes";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaEndKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{End}{Space}";
		public string UICheckEditCheckBoxSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaEndKeyExpectedValues
	{
		#region Fields
		public string UICheckedTreeListCellValueAsString = "True";
		public string UICheckedTreeListCellText = "Checked";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaPageUpKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Right}{Right}{PageUp}T";
		public string UITextEditEditValueAsString = "Test";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaPageUpKeyExpectedValues
	{
		#region Fields
		public string UITestTreeListCellValueAsString = "Test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaPageDownKeyParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{Right}{Right}{PageDown}T";
		public string UITextEditEditValueAsString = "Test";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaPageDownKeyExpectedValues
	{
		#region Fields
		public string UITestTreeListCellValueAsString = "Test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListFirstCellValueViaCtrlHomeShortcutParams
	{
		#region Fields
		public string UICheckEditCheckBoxSendKeys = "{Home}";
		public string UITextEditEditValueAsString = "FirstCellTest";
		public string UITextEditEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListFirstCellValueViaCtrlHomeShortcutExpectedValues
	{
		#region Fields
		public string UIFirstCellTestTreeListCellValueAsString = "FirstCellTest";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListLastCellValueViaCtrlEndShortcutParams
	{
		#region Fields
		public string UITreeList1TreeListSendKeys = "{End}";
		public string UITreeList1TreeListSendKeys1 = "{Space}";
		public string UICheckEditCheckBoxSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListLastCellValueViaCtrlEndShortcutExpectedValues
	{
		#region Fields
		public string UICheckedTreeListCellValueAsString = "True";
		public string UICheckedTreeListCellText = "Checked";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ResizeColumnHeaderViaDraggingRightEdgeParams
	{
		#region Fields
		public int UICommonNameTreeListColumnHeaderWidth = 303;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckColumnHeaderWidthAfterDraggingRightEdgeExpectedValues
	{
		#region Fields
		public int UICommonNameTreeListColumnHeaderWidth = 303;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckAddedSummariesMinFooterCellExpectedValues
	{
		#region Fields
		public string UIMINBurlingtonVTTreeListSummaryFooterCellValueAsString = "Burlington, VT";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class SwitchToSummariesDemoModuleParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "18";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckAddedSummariesMaxFooterCellExpectedValues
	{
		#region Fields
		public string UIMINBurlingtonVTTreeListSummaryFooterCellValueAsString = "Monterey";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckAddedSummariesCountGroupFooterCellExpectedValues
	{
		#region Fields
		public string UIItem2TreeListRowFooterCellValueAsString = "2";
		public string UIItem2TreeListRowFooterCellValueAsString1 = "2";
		public string UIItem3TreeListRowFooterCellValueAsString = "3";
		public string UIItem2TreeListRowFooterCellValueAsString2 = "2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckRemovedSummariesFooterCellExpectedValues
	{
		#region Fields
		public string UIItemTreeListSummaryFooterCellValueAsString = null;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckRemovedSummariesGroupFooterCellExpectedValues
	{
		#region Fields
		public string UIItem200000000TreeListRowFooterCellValueAsString = null;
		public string UIItemTreeListRowFooterCellValueAsString = null;
		public string UIItemTreeListRowFooterCellValueAsString1 = null;
		public string UIItemTreeListRowFooterCellValueAsString2 = null;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckSummariesFooterCellExpectedValues
	{
		#region Fields
		public string UIItemTreeListSummaryFooterCellValueAsString = "2";
		public string UISum185000000TreeListSummaryFooterCellValueAsString = "1850000.0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckModifiedSummariesFooterCellsExpectedValues
	{
		#region Fields
		public string UISum185000000TreeListSummaryFooterCellValueAsString = "612222.22222222222222222222222";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckModifiedSummariesGroupFooterCellsTypeExpectedValues
	{
		#region Fields
		public string UIItem200000000TreeListRowFooterCellValueAsString = "1000000.0";
		public string UIItemTreeListRowFooterCellValueAsString = "249000.0";
		public string UIItemTreeListRowFooterCellValueAsString1 = "387333.33333333333333333333333";
		public string UIItemTreeListRowFooterCellValueAsString2 = "925000.0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeFilterModeParams
	{
		#region Fields
		public string UICbFilterModeComboBoxValueTypeName = "DevExpress.XtraTreeList.FilterMode";
		public string UICbFilterModeComboBoxValueAsString = "Standard";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ModifyFilterExpressionViaFilterEditorParams
	{
		#region Fields
		public string UIFilterControlFilterControlFilterString = "[BirthDate] >= #1957-05-01# And [BirthDate] <= #1980-10-01# And [BirthDate] = ?";
		public string UIFilterControlFilterControlFilterString1 = "[BirthDate] >= #1957-05-01# And [BirthDate] <= #1980-10-01# And StartsWith([City]" +
			", ?)";
		public string UIFilterControlFilterControlFilterString2 = "[BirthDate] >= #1957-05-01# And [BirthDate] <= #1980-10-01# And [City] = ?";
		public string UITextEditEditValueAsString = "Ottawa";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckModifiedFilterExpressionFilterResultsExpectedValues
	{
		#region Fields
		public string UIItem19TreeListSummaryFooterCellValueAsString = "3";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDeactivatedFilterExpectedValues
	{
		#region Fields
		public string UIItem19TreeListSummaryFooterCellValueAsString = "55";
		public bool UITreeListFilterPanelATreeListElementChecked = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDeletedFilterExpectedValues
	{
		#region Fields
		public string UIItem19TreeListSummaryFooterCellValueAsString = "55";
		public string UIJobTitleTreeListColumnHeaderFilterString = null;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellsValueForControlPropertyGrindChangesParams
	{
		#region Fields
		public string UINode000ColumntreeLisEditValueAsString = "Market test";
		public string UINode000ColumntreeLisDateTimeEditValueAsString = "2011-05-12 [SelectionStart]0[SelectionLength]1";
		public string UINode000ColumntreeLisDateTimeEditValueAsString1 = "2011-09-22 [SelectionStart]0[SelectionLength]1";
		public string UINode000ColumntreeLisComboBoxValueTypeName = "DevExpress.XtraTreeList.Demos.Priority";
		public string UINode000ColumntreeLisComboBoxValueAsString = "High";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellsValueViaCalcEditorParams
	{
		#region Fields
		public string UICalcEditPopupEditValueAsString = "150 [SelectionStart]0[SelectionLength]3";
		public string UICalcEditPopupEdit1SendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellsValueViaCalcEditorExpectedValues
	{
		#region Fields
		public string UIItem1800TreeListCellValueAsString = "150";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellsValueViaSpinEditorParams
	{
		#region Fields
		public string UISpinEditEditValueAsString = "50 [SelectionStart]0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellsValueViaSpinEditorExpectedValues
	{
		#region Fields
		public string UIItem50TreeListCellValueAsString = "50";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellsValueViaImageComboBoxEditorParams
	{
		#region Fields
		public string UIImageComboBoxEditComboBoxValueTypeName = "System.Int32";
		public string UIImageComboBoxEditComboBoxValueAsString = "2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellsValueViaImageComboBoxEditorExpectedValues
	{
		#region Fields
		public string UIConfectionsTreeListCellValueAsString = "2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellsValueViaTextEditorWithMaskParams
	{
		#region Fields
		public string UITextEditEditValueAsString = "(100)512-3456 [SelectionStart]12[SelectionLength]1";
		public string UITextEditEditSendKeys = "{Right}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellsValueViaTextEditorWithMaskExpectedValues
	{
		#region Fields
		public string UIItem1005512345TreeListCellValueAsString = "(100)512-3456";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ScrollTreeListForControlFixedColumnParams
	{
		#region Fields
		public string UIHTLScrollBarScrollBarControlValueAsString = "419";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckHiddenNodesViaDoubleClickExpectedValues
	{
		#region Fields
		public string UICustomerServicesListItemText = "Customer Services";
		public int UICustomerServicesListItemIndex = 0;
		public bool UICustomerServicesListItemSelected = true;
		public string UIFieldOfficeJapanListItemText = "Field Office: Japan";
		public int UIFieldOfficeJapanListItemIndex = 1;
		public string UIConsumerElectronicsDListItemText = "Consumer Electronics Div.";
		public int UIConsumerElectronicsDListItemIndex = 2;
		public string UISalesandMarketingListItemText = "Sales and Marketing";
		public int UISalesandMarketingListItemIndex = 3;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class MakeNodeVisibleViaHiddenListItemDoubleClickParams
	{
		#region Fields
		public string UIListBoxControl1ListSelectedIndicesAsString = "";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckVisibleNodeExpectedValues
	{
		#region Fields
		public bool UINode3TreeListNodeChecked = false;
		public bool UINode3TreeListNodeExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ScrollPropertyGridViaMouseParams
	{
		#region Fields
		public string UIVGridVertScrollBarScrollBarControlValueAsString = "23";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragRowWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowLast_Name[RecordIndex]0[CellIndex]0";
		public string UIRowLast_NameVerticalGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragCategoryRowWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UICategoryRow2VerticalGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridRowToCustomizationFormParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UIRowPhotoVerticalGridRowDraggingDestination = "InsertBefore";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridCategoryRowToCustomizationFormParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UICategoryRow1VerticalGridRowDraggingDestination = "InsertBefore";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridRowFromCustomizationFormWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UIRowLast_NameVerticalGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridCategoryRowFromCustomizationFormWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UICategoryRow1VerticalGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragAddedCategoryFromCustomizationFormWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UICategoryTestCategoryVerticalGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowsWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UIRowBorderStylePropertyGridRowParentName = "rowBackgroundImage";
		public int UIRowBorderStylePropertyGridRowVisibleIndex = 6;
		public string UIRowCursorPropertyGridRowParentName = "rowFont";
		public int UIRowCursorPropertyGridRowVisibleIndex = 10;
		public bool UIRowFontPropertyGridRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIVGridVertScrollBarScrollBarControlValueAsString = "23";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowProperties[RecordIndex]0[CellIndex]0";
		public string UIRowPropertiesPropertyGridRowDraggingDestination = "MoveToEnd";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowSize[RecordIndex]0[CellIndex]0";
		public string UIRowSizePropertyGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowsWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UIRowPropertiesPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowPropertiesPropertyGridRowVisibleIndex = 39;
		public string UIRowSizePropertyGridRowParentName = "propertyGridControl1";
		public int UIRowSizePropertyGridRowVisibleIndex = 40;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyRowsWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UIRowBackgroundImagePropertyGridRowParentName = "categoryBehavior";
		public int UIRowBackgroundImagePropertyGridRowVisibleIndex = 17;
		public string UIRowFontPropertyGridRowParentName = "categoryBehavior";
		public int UIRowFontPropertyGridRowVisibleIndex = 20;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyCategoryRowWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UICategoryBarManagerPropertyGridCategoryRowParentName = "categoryAppearance";
		public int UICategoryBarManagerPropertyGridCategoryRowVisibleIndex = 7;
		public string UIRowMenuManagerPropertyGridRowParentName = "categoryBarManager";
		public int UIRowMenuManagerPropertyGridRowVisibleIndex = 8;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridCategoryRowWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UICategoryAppearancePropertyGridCategoryRowParentName = "categoryBarManager";
		public int UICategoryAppearancePropertyGridCategoryRowVisibleIndex = 4;
		public int UICategoryBarManagerPropertyGridCategoryRowChildrenCount = 2;
		public string UIRowBorderStylePropertyGridRowParentName = "categoryAppearance";
		public int UIRowBorderStylePropertyGridRowVisibleIndex = 8;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsToCustomizationFormParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowBorderStylePropertyGridRowDraggingDestination = "InsertBefore";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowFontPropertyGridRowDraggingDestination = "InsertBefore";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridRowsInCustomizationFormExpectedValues
	{
		#region Fields
		public string UIBorderStyleListItemText = "BorderStyle";
		public int UIBorderStyleListItemIndex = 0;
		public string UIFontListItemText = "Font";
		public int UIFontListItemIndex = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckFilteringAfterChangingFilterModeExpectedValues
	{
		#region Fields
		public string UIItem19TreeListSummaryFooterCellValueAsString = "27";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckFilteringAfterChangingFilterExpressionExpectedValues
	{
		#region Fields
		public string UIItem19TreeListSummaryFooterCellValueAsString = "19";
		public string UITreeListFilterPanelTTreeListElementFilterString = "[Origin State] = \'California\'";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaEscKeyExpectedValues
	{
		#region Fields
		public string UITestTreeListCellValueAsString = "Firefish";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryAppearance[RecordIndex]0[CellIndex]0";
		public string UICategoryAppearancePropertyGridRowDraggingDestination = "InsertAfter[Row]rowMenuManager[ParentName]categoryBarManager";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryBarManager[RecordIndex]0[CellIndex]0";
		public string UICategoryBarManagerPropertyGridRowDraggingDestination = "InsertBefore[Row]rowBorderStyle[ParentName]categoryAppearance";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowTabIndex[RecordIndex]0[CellIndex]0";
		public string UIRowTabIndexPropertyGridRowDraggingDestination = "InsertAfter[Row]rowMenuManager[ParentName]categoryBarManager";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowFont[RecordIndex]0[CellIndex]0";
		public string UIRowFontPropertyGridRowDraggingDestination = "InsertAfter[Row]rowTabIndex[ParentName]categoryBarManager";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowsWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UIRowFontPropertyGridRowParentName = "categoryBarManager";
		public int UIRowFontPropertyGridRowVisibleIndex = 15;
		public string UIRowTabIndexPropertyGridRowParentName = "categoryBarManager";
		public int UIRowTabIndexPropertyGridRowVisibleIndex = 17;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowBackgroundImage[RecordIndex]0[CellIndex]0";
		public string UIRowBackgroundImagePropertyGridRowDraggingDestination = "InsertBefore[Row]rowEnterMoveNextControl[ParentName]categoryBehavior";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowFont[RecordIndex]0[CellIndex]0";
		public string UIRowFontPropertyGridRowDraggingDestination = "InsertBefore[Row]rowEnabled[ParentName]categoryBehavior";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragAddedCategoryFromCustomizationFormWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryTestCategory[RecordIndex]0[CellIndex]0";
		public string UICategoryTestCategoryVerticalGridCategoryRowDraggingDestination = "InsertAfter[Row]categoryTestCategory[ParentName]vGridControl1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragAddedCategoryFromCustomizationFormWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UICategoryTestCategoryVerticalGridRowDraggingDestination = "InsertBefore[Row]rowPhoto[ParentName]categoryRow3";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragAddedCategoryFromCustomizationFormWithMoveChildDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UICategoryTestCategoryVerticalGridRowDraggingDestination = "MoveChild[Row]rowHome_Phone[ParentName]rowHome_Phone";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragCategoryRowWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow3[RecordIndex]0[CellIndex]0";
		public string UICategoryRow3VerticalGridCategoryRowDraggingDestination = "InsertBefore[Row]rowTitle[ParentName]categoryRow1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragCategoryRowWithMoveChildDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow3[RecordIndex]0[CellIndex]0";
		public string UICategoryRow3VerticalGridCategoryRowDraggingDestination = "MoveChild[Row]multiEditorRow2[ParentName]multiEditorRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragRowWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowTitle_Of_Courtesy[RecordIndex]0[CellIndex]0";
		public string UIRowTitle_Of_CourtesyVerticalGridRowDraggingDestination = "InsertAfter[Row]rowExtension[ParentName]categoryRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragRowWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowPhoto[RecordIndex]0[CellIndex]0";
		public string UIRowPhotoVerticalGridRowDraggingDestination = "InsertBefore[Row]rowTitle[ParentName]categoryRow1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragRowWithMoveChildDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowLast_Name[RecordIndex]0[CellIndex]0";
		public string UIRowLast_NameVerticalGridRowDraggingDestination = "MoveChild[Row]multiEditorRow2[ParentName]multiEditorRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridCategoryRowFromCustomizationFormWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UICategoryRow1VerticalGridRowDraggingDestination = "InsertBefore[Row]multiEditorRow2[ParentName]categoryRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridCategoryRowFromCustomizationFormWithMoveChildDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UICategoryRow1VerticalGridRowDraggingDestination = "MoveChild[Row]multiEditorRow2[ParentName]multiEditorRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridRowFromCustomizationFormWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UIRowExtensionVerticalGridRowDraggingDestination = "InsertAfter[Row]rowHome_Phone[ParentName]categoryRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridRowFromCustomizationFormWithMoveChildDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UIRowTitle_Of_CourtesyVerticalGridRowDraggingDestination = "MoveChild[Row]rowHome_Phone[ParentName]rowHome_Phone";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragCategoryRowWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow1[RecordIndex]0[CellIndex]0";
		public string UICategoryRow1VerticalGridRowDraggingDestination = "InsertAfter[Row]rowExtension[ParentName]categoryRow2";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckTreeListColumnsFilterStringPropertiesExpectedValues
	{
		#region Fields
		public string UIOriginCityTreeListColumnHeaderFilterString = "[City] = \'Ottawa\'";
		public string UITreeListFilterPanelTTreeListElementFilterString = "And [Origin City] = \'Ottawa\'";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridRowFromCustomizationFormWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UIRowHire_DateVerticalGridRowDraggingDestination = "InsertBefore[Row]categoryRow2[ParentName]vGridControl1";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragVerticalGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "categoryRow2[RecordIndex]0[CellIndex]0";
		public string UICategoryRow1VerticalGridRowDraggingDestination = "InsertAfter[Row]rowNotes[ParentName]categoryRow3";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsWithMoveChildDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowBorderStyle[RecordIndex]0[CellIndex]0";
		public string UIRowBorderStylePropertyGridRowDraggingDestination = "MoveChild[Row]rowBackgroundImage[ParentName]rowBackgroundImage";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowCursor[RecordIndex]0[CellIndex]0";
		public string UIRowCursorPropertyGridRowDraggingDestination = "InsertBefore[Row]rowFont_Name[ParentName]rowFont";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowWithMoveChildDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryBehavior[RecordIndex]0[CellIndex]0";
		public string UICategoryBehaviorPropertyGridRowDraggingDestination = "MoveChild[Row]rowBackgroundImageLayout[ParentName]rowBackgroundImageLayout";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "categoryBarManager[RecordIndex]0[CellIndex]0";
		public string UICategoryBarManagerPropertyGridRowDraggingDestination = "InsertBefore[Row]rowFont_Name[ParentName]rowFont";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridCategoryRowWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public int UIRowBackgroundImageLaPropertyGridRowChildrenCount = 1;
		public string UICategoryBehaviorPropertyGridCategoryRowParentName = "rowBackgroundImageLayout";
		public int UICategoryBehaviorPropertyGridCategoryRowVisibleIndex = 7;
		public int UIRowFontPropertyGridRowChildrenCount = 10;
		public string UICategoryBarManagerPropertyGridCategoryRowParentName = "rowFont";
		public int UICategoryBarManagerPropertyGridCategoryRowVisibleIndex = 18;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsFromCustomizationFormWithMoveChildDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowFontPropertyGridRowDraggingDestination = "MoveChild[Row]rowTabIndex[ParentName]rowTabIndex";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowBackgroundImagePropertyGridRowDraggingDestination = "MoveChild[Row]rowMenuManager[ParentName]rowMenuManager";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowFromCustomizationFormWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UIRowBackgroundImagePropertyGridRowParentName = "rowMenuManager";
		public int UIRowBackgroundImagePropertyGridRowVisibleIndex = 5;
		public string UIRowFontPropertyGridRowParentName = "rowTabIndex";
		public int UIRowFontPropertyGridRowVisibleIndex = 12;
		public int UIRowTabIndexPropertyGridRowChildrenCount = 1;
		public int UIRowMenuManagerPropertyGridRowChildrenCount = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowRightToLeftPropertyGridRowDraggingDestination = "MoveToEnd";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowUseWaitCursorPropertyGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingNodeWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public bool UINode0TreeListNode1Exists = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingNodeWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public bool UINode1TreeListNodeExists = true;
		public bool UINode0TreeListNodeExists = true;
		public bool UINode1TreeListNode1Exists = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingNodeWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public bool UINode2TreeListNodeExists = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowsToCustomizationFormParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryAppearancePropertyGridRowDraggingDestination = "InsertBefore";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryDataPropertyGridRowDraggingDestination = "InsertBefore";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString2 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryLayoutPropertyGridRowDraggingDestination = "InsertBefore";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGridCategoryRowsInCustomizationFormExpectedValues
	{
		#region Fields
		public string UIAppearanceListItemText = "Appearance";
		public int UIAppearanceListItemIndex = 0;
		public string UIDataListItemText = "Data";
		public int UIDataListItemIndex = 1;
		public string UILayoutListItemText = "Layout";
		public int UILayoutListItemIndex = 2;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UIRowRightToLeftPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowRightToLeftPropertyGridRowVisibleIndex = 17;
		public string UIRowUseWaitCursorPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowUseWaitCursorPropertyGridRowVisibleIndex = 25;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowAnchorPropertyGridRowDraggingDestination = "InsertBefore[Row]categoryBarManager[ParentName]propertyGridControl1";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowFontPropertyGridRowDraggingDestination = "InsertBefore[Row]rowImeMode[ParentName]categoryBehavior";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString2 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowRightToLeftPropertyGridRowDraggingDestination = "InsertBefore[Row]rowShowToolTips[ParentName]categoryToolTip";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UIRowAnchorPropertyGridRowParentName = "propertyGridControl1";
		public int UIRowAnchorPropertyGridRowVisibleIndex = 3;
		public string UIRowFontPropertyGridRowParentName = "categoryBehavior";
		public int UIRowFontPropertyGridRowVisibleIndex = 10;
		public string UIRowRightToLeftPropertyGridRowParentName = "categoryToolTip";
		public int UIRowRightToLeftPropertyGridRowVisibleIndex = 21;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowFromCustomizationFormWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowFontPropertyGridRowDraggingDestination = "InsertAfter[Row]rowCausesValidation[ParentName]categoryFocus";
		public string UIVScrollBarScrollBarControlValueAsString = "10";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowLocationPropertyGridRowDraggingDestination = "InsertAfter[Row]rowFont[ParentName]categoryFocus";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString2 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowUseWaitCursorPropertyGridRowDraggingDestination = "InsertAfter[Row]rowProperties[ParentName]categoryProperties";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UIRowFontPropertyGridRowParentName = "categoryFocus";
		public int UIRowFontPropertyGridRowVisibleIndex = 15;
		public string UIRowLocationPropertyGridRowParentName = "categoryFocus";
		public int UIRowLocationPropertyGridRowVisibleIndex = 16;
		public string UIRowUseWaitCursorPropertyGridRowParentName = "categoryProperties";
		public int UIRowUseWaitCursorPropertyGridRowVisibleIndex = 19;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowForeColorPropertyGridRowDraggingDestination = "MoveChild[Row]rowProperties[ParentName]rowProperties";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UIRowLocationPropertyGridRowDraggingDestination = "MoveChild[Row]rowProperties[ParentName]rowProperties";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UIRowForeColorPropertyGridRowParentName = "rowProperties";
		public int UIRowForeColorPropertyGridRowVisibleIndex = 43;
		public string UIRowLocationPropertyGridRowParentName = "rowProperties";
		public int UIRowLocationPropertyGridRowVisibleIndex = 46;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryAppearancePropertyGridRowDraggingDestination = "MoveChild[Row]rowMenuManager[ParentName]rowMenuManager";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryLayoutPropertyGridRowDraggingDestination = "InsertAfter[Row]rowMenuManager[ParentName]categoryBarManager";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString2 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryDataPropertyGridRowDraggingDestination = "MoveChild[Row]rowBackgroundImage[ParentName]rowBackgroundImage";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UICategoryLayoutPropertyGridCategoryRowParentName = "categoryBarManager";
		public int UICategoryLayoutPropertyGridCategoryRowVisibleIndex = 4;
		public string UICategoryAppearancePropertyGridCategoryRowParentName = "rowMenuManager";
		public int UICategoryAppearancePropertyGridCategoryRowVisibleIndex = 13;
		public string UICategoryDataPropertyGridCategoryRowParentName = "rowBackgroundImage";
		public int UICategoryDataPropertyGridCategoryRowVisibleIndex = 16;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryLayoutPropertyGridRowDraggingDestination = "MoveChild[Row]rowProperties[ParentName]rowProperties";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryAppearancePropertyGridRowDraggingDestination = "MoveChild[Row]categoryBarManager[ParentName]categoryBarManager";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString2 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryDataPropertyGridRowDraggingDestination = "MoveChild[Row]rowProperties[ParentName]rowProperties";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridCategoryRowsFromCustomizationFormToCollapsedRowWithMoveChildDragActionExpectedValues
	{
		#region Fields
		public string UICategoryAppearancePropertyGridCategoryRowParentName = "categoryBarManager";
		public int UICategoryAppearancePropertyGridCategoryRowVisibleIndex = 4;
		public string UICategoryDataPropertyGridCategoryRowParentName = "rowProperties";
		public int UICategoryDataPropertyGridCategoryRowVisibleIndex = 48;
		public string UICategoryLayoutPropertyGridCategoryRowParentName = "rowProperties";
		public int UICategoryLayoutPropertyGridCategoryRowVisibleIndex = 61;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragLastPropertyGridCategoryRowsToCustomizationFormParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryPropertiesPropertyGridRowDraggingDestination = "InsertBefore";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryToolTipPropertyGridRowDraggingDestination = "InsertBefore";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckLastPropertyGridCategoryRowsInCustomizationFormExpectedValues
	{
		#region Fields
		public string UIPropertiesListItemText = "Properties";
		public int UIPropertiesListItemIndex = 0;
		public string UIToolTipListItemText = "ToolTip";
		public int UIToolTipListItemIndex = 1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryToolTipPropertyGridRowDraggingDestination = "MoveToEnd";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryPropertiesPropertyGridRowDraggingDestination = "MoveToEnd";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingDragPropertyGridCategoryRowsFromCustomizationFormWithMoveToEndDragActionExpectedValues
	{
		#region Fields
		public string UICategoryPropertiesPropertyGridCategoryRowParentName = "propertyGridControl1";
		public int UICategoryPropertiesPropertyGridCategoryRowVisibleIndex = 39;
		public string UICategoryToolTipPropertyGridCategoryRowParentName = "propertyGridControl1";
		public int UICategoryToolTipPropertyGridCategoryRowVisibleIndex = 41;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryAppearancePropertyGridRowDraggingDestination = "InsertBefore[Row]categoryBarManager[ParentName]propertyGridControl1";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryDataPropertyGridRowDraggingDestination = "InsertBefore[Row]rowBorderStyle[ParentName]categoryAppearance";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString2 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryLayoutPropertyGridRowDraggingDestination = "InsertBefore[Row]rowDataBindings[ParentName]categoryData";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridCategoryRowsFromCustomizationFormWithInsertBeforeDragActionExpectedValues
	{
		#region Fields
		public string UICategoryAppearancePropertyGridCategoryRowParentName = "propertyGridControl1";
		public int UICategoryAppearancePropertyGridCategoryRowVisibleIndex = 3;
		public string UICategoryDataPropertyGridCategoryRowParentName = "categoryAppearance";
		public int UICategoryDataPropertyGridCategoryRowVisibleIndex = 9;
		public string UICategoryLayoutPropertyGridCategoryRowParentName = "categoryData";
		public int UICategoryLayoutPropertyGridCategoryRowVisibleIndex = 12;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class DragPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryDataPropertyGridRowDraggingDestination = "InsertAfter[Row]rowCausesValidation[ParentName]categoryFocus";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "rowImage[RecordIndex]0[CellIndex]0";
		public string UICategoryLayoutPropertyGridRowDraggingDestination = "InsertAfter[Row]rowTag[ParentName]categoryData";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingPropertyGridCategoryRowFromCustomizationFormWithInsertAfterDragActionExpectedValues
	{
		#region Fields
		public string UICategoryDataPropertyGridCategoryRowParentName = "categoryFocus";
		public int UICategoryDataPropertyGridCategoryRowVisibleIndex = 15;
		public string UICategoryLayoutPropertyGridCategoryRowParentName = "categoryData";
		public int UICategoryLayoutPropertyGridCategoryRowVisibleIndex = 18;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDragAndDropListBoxItemsExpectedValues
	{
		#region Fields
		public string UIHomePhone2065559857ListItemText = "Field Office: East Coast; 500000; Boston.";
		public int UIHomePhone2065559857ListItemIndex = 0;
		public bool UIHomePhone2065559857ListItemSelected = true;
		public string UIEngineering1100000MoListItemText = "Field Office: East Coast; 500000; Boston.";
		public int UIEngineering1100000MoListItemIndex = 1;
		public string UICustomerServices8500ListItemText = "Finance; 40000; Monterey.";
		public int UICustomerServices8500ListItemIndex = 2;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CollapseExpandedCategoryRowParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "categoryBarManager[RecordIndex]0[CellIndex]0";
		public bool UICategoryBarManagerPropertyGridCategoryRowExpanded = false;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ExpandCollapsedRowsParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowProperties[RecordIndex]0[CellIndex]0";
		public bool UIRowPropertiesPropertyGridRowExpanded = true;
		public string UIVGridVertScrollBarScrollBarControlValueAsString = "0";
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString1 = "categoryBarManager[RecordIndex]0[CellIndex]0";
		public bool UICategoryBarManagerPropertyGridCategoryRowExpanded = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellsValueViaProgressBarEditorParams
	{
		#region Fields
		public string UINode4ColumntreeListCProgressBarValueAsString = "49";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellsValueViaProgressBarEditorExpectedValues
	{
		#region Fields
		public string UIItem58TreeListCellValueAsString = "49";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeTreeListCellValueViaUpAndLeftKeysParams
	{
		#region Fields
		public string UINode11ColumntreeListEditSendKeys = "{Up}";
		public string UINode10ColumntreeListEditSendKeys = "{Up}";
		public string UINode9ColumntreeListCEditSendKeys = "{Up}";
		public string UINode8ColumntreeListCEditSendKeys = "{Up}";
		public string UINode7ColumntreeListCEditSendKeys = "{Up}";
		public string UINode6ColumntreeListCEditSendKeys = "{Up}";
		public string UINode5ColumntreeListCEditSendKeys = "{Left}";
		public string UINode5ColumntreeListCEditSendKeys1 = "{Left}";
		public string UINode5ColumntreeListCEditValueAsString = "Test";
		public string UINode5ColumntreeListCEditSendKeys2 = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedTreeListCellValueViaUpAndLeftKeysExpectedValues
	{
		#region Fields
		public string UITestTreeListCellValueAsString = "Test";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ResizeNodesViaDraggingIndicatorRowBottomEdgeParams
	{
		#region Fields
		public int UINode0TreeListNodeHeight = 91;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridCellValueViaEscKeyParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowBackColor[RecordIndex]0[CellIndex]0";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangeVerticalGridFocusedCellEditorValueViaEscKeyParams
	{
		#region Fields
		public string UIVGridControl1VerticalGridFocusedCellAsString = "rowMPG[RecordIndex]1[CellIndex]1";
		public string UITextEditEdit2SendKeys = "{Escape}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class ChangePropertyGridCellValueViaMouseParams
	{
		#region Fields
		public string UIPropertyGridControl1PropertyGridFocusedCellAsString = "rowBackColor[RecordIndex]0[CellIndex]0";
		public string UIColorEditColorEditValueAsString = "ControlLightLight";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckChangedPropertyGridCellValueViaMouseExpectedValues
	{
		#region Fields
		public string UIColorEditColorEditValueAsString = "ControlLightLight";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingRowsToDragAndDropAreaExpectedValues
	{
		#region Fields
		public int UIHomePhone2065559857ListItemIndex = 0;
		public int UIEngineering1100000MoListItemIndex = 1;
		public bool UIEngineering1100000MoListItemSelected = true;
		public int UICustomerServices8500ListItemIndex = 2;
		public int UICorporateHeadquarterListItemIndex = 3;
		public int UICustomerServices8500ListItem1Index = 4;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckDraggingCategoryRowsToDragAndDropAreaExpectedValues
	{
		#region Fields
		public bool UIEngineering1100000MoListItemSelected = true;
		public int UIEngineering1100000MoListItemIndex = 1;
		public int UIHomePhone2065559857ListItemIndex = 0;
		public int UICustomerServices8500ListItemIndex = 2;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckReorderedTreeListNodesViaDraggingExpectedValues
	{
		#region Fields
		public bool UINode0TreeListNodeExists = true;
		public bool UINode0TreeListNodeExists1 = true;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CreateNodesHierarchyParams
	{
		#region Fields
		public string UINode0ColumntreeListCEditValueAsString = "Test";
		public string UINode0ColumntreeListCEditSendKeys = "{Enter}";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckCreatedNodesHierarchyExpectedValues
	{
		#region Fields
		public int UITreeList1TreeListNodesCount = 3;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckPropertyGrindChangesExpectedValues
	{
		#region Fields
		public string UIRowrowNameMarkettestPropertyGridCellText = "Market test";
		public string UIRowrowStartDate05062PropertyGridCellValueAsString = "2011-05-12";
		public string UIRowrowEndDate1506202PropertyGridCellValueAsString = "2011-09-22";
		public string UIRowrowPriorityHighPropertyGridCellValueAsString = "High";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckCopedTreeListNodeViaDraggingAndHoldingDownCtrlKeyExpectedValues
	{
		#region Fields
		public string UIMarketresearchTreeListCellValueAsString = "Market research";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class CheckAddedTreeListNodesExpectedValues
	{
		#region Fields
		public string UITaskTreeListCellValueAsString = "Task";
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITutorialsCcodeWindow : DXWindow
	{
		public UITutorialsCcodeWindow()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Tutorials (C# code)";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		public UIPcMainClient UIPcMainClient
		{
			get
			{
				if ((this.mUIPcMainClient == null))
				{
					this.mUIPcMainClient = new UIPcMainClient(this);
				}
				return this.mUIPcMainClient;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient mUIGcNavigationsClient;
		private UIPcMainClient mUIPcMainClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient : DXTestControl
	{
		public UIGcNavigationsClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXListBox UIListBoxControl1List
		{
			get
			{
				if ((this.mUIListBoxControl1List == null))
				{
					this.mUIListBoxControl1List = new DXListBox(this);
					#region Search Criteria
					this.mUIListBoxControl1List.SearchProperties[DXTestControl.PropertyNames.Name] = "listBoxControl1";
					this.mUIListBoxControl1List.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControl";
					this.mUIListBoxControl1List.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIListBoxControl1List;
			}
		}
		#endregion
		#region Fields
		private DXListBox mUIListBoxControl1List;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPcMainClient : DXTestControl
	{
		public UIPcMainClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "pcMain";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIGcContainerClient UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient : DXTestControl
	{
		public UIGcContainerClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UICategoryRowButtonsCustom UICategoryRowButtonsCustom
		{
			get
			{
				if ((this.mUICategoryRowButtonsCustom == null))
				{
					this.mUICategoryRowButtonsCustom = new UICategoryRowButtonsCustom(this);
				}
				return this.mUICategoryRowButtonsCustom;
			}
		}
		public UIDragDropCustom UIDragDropCustom
		{
			get
			{
				if ((this.mUIDragDropCustom == null))
				{
					this.mUIDragDropCustom = new UIDragDropCustom(this);
				}
				return this.mUIDragDropCustom;
			}
		}
		public UIResizingCustom UIResizingCustom
		{
			get
			{
				if ((this.mUIResizingCustom == null))
				{
					this.mUIResizingCustom = new UIResizingCustom(this);
				}
				return this.mUIResizingCustom;
			}
		}
		public UILayoutAndPaintStylesCustom UILayoutAndPaintStylesCustom
		{
			get
			{
				if ((this.mUILayoutAndPaintStylesCustom == null))
				{
					this.mUILayoutAndPaintStylesCustom = new UILayoutAndPaintStylesCustom(this);
				}
				return this.mUILayoutAndPaintStylesCustom;
			}
		}
		public UIMultiEditorsRowCustom UIMultiEditorsRowCustom
		{
			get
			{
				if ((this.mUIMultiEditorsRowCustom == null))
				{
					this.mUIMultiEditorsRowCustom = new UIMultiEditorsRowCustom(this);
				}
				return this.mUIMultiEditorsRowCustom;
			}
		}
		public UIRowCustomizationCustom UIRowCustomizationCustom
		{
			get
			{
				if ((this.mUIRowCustomizationCustom == null))
				{
					this.mUIRowCustomizationCustom = new UIRowCustomizationCustom(this);
				}
				return this.mUIRowCustomizationCustom;
			}
		}
		public UIDataModeCustom UIDataModeCustom
		{
			get
			{
				if ((this.mUIDataModeCustom == null))
				{
					this.mUIDataModeCustom = new UIDataModeCustom(this);
				}
				return this.mUIDataModeCustom;
			}
		}
		public UIRowFormatCustom UIRowFormatCustom
		{
			get
			{
				if ((this.mUIRowFormatCustom == null))
				{
					this.mUIRowFormatCustom = new UIRowFormatCustom(this);
				}
				return this.mUIRowFormatCustom;
			}
		}
		public UIEditorsCustom UIEditorsCustom
		{
			get
			{
				if ((this.mUIEditorsCustom == null))
				{
					this.mUIEditorsCustom = new UIEditorsCustom(this);
				}
				return this.mUIEditorsCustom;
			}
		}
		public UIRowsNavigationCustom UIRowsNavigationCustom
		{
			get
			{
				if ((this.mUIRowsNavigationCustom == null))
				{
					this.mUIRowsNavigationCustom = new UIRowsNavigationCustom(this);
				}
				return this.mUIRowsNavigationCustom;
			}
		}
		public UIScrollVisibilitySampCustom UIScrollVisibilitySampCustom
		{
			get
			{
				if ((this.mUIScrollVisibilitySampCustom == null))
				{
					this.mUIScrollVisibilitySampCustom = new UIScrollVisibilitySampCustom(this);
				}
				return this.mUIScrollVisibilitySampCustom;
			}
		}
		public UIColumnAlignmentCustom UIColumnAlignmentCustom
		{
			get
			{
				if ((this.mUIColumnAlignmentCustom == null))
				{
					this.mUIColumnAlignmentCustom = new UIColumnAlignmentCustom(this);
				}
				return this.mUIColumnAlignmentCustom;
			}
		}
		public UIColumnCustomizationCustom UIColumnCustomizationCustom
		{
			get
			{
				if ((this.mUIColumnCustomizationCustom == null))
				{
					this.mUIColumnCustomizationCustom = new UIColumnCustomizationCustom(this);
				}
				return this.mUIColumnCustomizationCustom;
			}
		}
		public UIColumnFormatCustom UIColumnFormatCustom
		{
			get
			{
				if ((this.mUIColumnFormatCustom == null))
				{
					this.mUIColumnFormatCustom = new UIColumnFormatCustom(this);
				}
				return this.mUIColumnFormatCustom;
			}
		}
		public UICustomTreeListNodeCustom UICustomTreeListNodeCustom
		{
			get
			{
				if ((this.mUICustomTreeListNodeCustom == null))
				{
					this.mUICustomTreeListNodeCustom = new UICustomTreeListNodeCustom(this);
				}
				return this.mUICustomTreeListNodeCustom;
			}
		}
		public UIDataStoreCustom UIDataStoreCustom
		{
			get
			{
				if ((this.mUIDataStoreCustom == null))
				{
					this.mUIDataStoreCustom = new UIDataStoreCustom(this);
				}
				return this.mUIDataStoreCustom;
			}
		}
		public UIMultiSelectCustom UIMultiSelectCustom
		{
			get
			{
				if ((this.mUIMultiSelectCustom == null))
				{
					this.mUIMultiSelectCustom = new UIMultiSelectCustom(this);
				}
				return this.mUIMultiSelectCustom;
			}
		}
		public UINodeCheckingCustom UINodeCheckingCustom
		{
			get
			{
				if ((this.mUINodeCheckingCustom == null))
				{
					this.mUINodeCheckingCustom = new UINodeCheckingCustom(this);
				}
				return this.mUINodeCheckingCustom;
			}
		}
		public UIVerticalHeadersCustom UIVerticalHeadersCustom
		{
			get
			{
				if ((this.mUIVerticalHeadersCustom == null))
				{
					this.mUIVerticalHeadersCustom = new UIVerticalHeadersCustom(this);
				}
				return this.mUIVerticalHeadersCustom;
			}
		}
		public UINodesNavigationCustom UINodesNavigationCustom
		{
			get
			{
				if ((this.mUINodesNavigationCustom == null))
				{
					this.mUINodesNavigationCustom = new UINodesNavigationCustom(this);
				}
				return this.mUINodesNavigationCustom;
			}
		}
		public UISummariesCustom UISummariesCustom
		{
			get
			{
				if ((this.mUISummariesCustom == null))
				{
					this.mUISummariesCustom = new UISummariesCustom(this);
				}
				return this.mUISummariesCustom;
			}
		}
		#endregion
		#region Fields
		private UICategoryRowButtonsCustom mUICategoryRowButtonsCustom;
		private UIDragDropCustom mUIDragDropCustom;
		private UIResizingCustom mUIResizingCustom;
		private UILayoutAndPaintStylesCustom mUILayoutAndPaintStylesCustom;
		private UIMultiEditorsRowCustom mUIMultiEditorsRowCustom;
		private UIRowCustomizationCustom mUIRowCustomizationCustom;
		private UIDataModeCustom mUIDataModeCustom;
		private UIRowFormatCustom mUIRowFormatCustom;
		private UIEditorsCustom mUIEditorsCustom;
		private UIRowsNavigationCustom mUIRowsNavigationCustom;
		private UIScrollVisibilitySampCustom mUIScrollVisibilitySampCustom;
		private UIColumnAlignmentCustom mUIColumnAlignmentCustom;
		private UIColumnCustomizationCustom mUIColumnCustomizationCustom;
		private UIColumnFormatCustom mUIColumnFormatCustom;
		private UICustomTreeListNodeCustom mUICustomTreeListNodeCustom;
		private UIDataStoreCustom mUIDataStoreCustom;
		private UIMultiSelectCustom mUIMultiSelectCustom;
		private UINodeCheckingCustom mUINodeCheckingCustom;
		private UIVerticalHeadersCustom mUIVerticalHeadersCustom;
		private UINodesNavigationCustom mUINodesNavigationCustom;
		private UISummariesCustom mUISummariesCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryRowButtonsCustom : DXTestControl
	{
		public UICategoryRowButtonsCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "CategoryRowButtons";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowButtons";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		public UIPanel2Client UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client(this);
				}
				return this.mUIPanel2Client;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid mUIVGridControl1VerticalGrid;
		private UIPanel2Client mUIPanel2Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UICategoryRow1VerticalGridRow UICategoryRow1VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridRow == null))
				{
					this.mUICategoryRow1VerticalGridRow = new UICategoryRow1VerticalGridRow(this);
				}
				return this.mUICategoryRow1VerticalGridRow;
			}
		}
		public DXVerticalGridRow UICategoryRow1VerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridCategoryRow == null))
				{
					this.mUICategoryRow1VerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryRow1VerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow1VerticalGridCategoryRow;
			}
		}
		#endregion
		#region Fields
		private UICategoryRow1VerticalGridRow mUICategoryRow1VerticalGridRow;
		private DXVerticalGridRow mUICategoryRow1VerticalGridCategoryRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryRow1VerticalGridRow : DXVerticalGridRow
	{
		public UICategoryRow1VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIVerticalGridExpandBuVerticalGridExpandButton
		{
			get
			{
				if ((this.mUIVerticalGridExpandBuVerticalGridExpandButton == null))
				{
					this.mUIVerticalGridExpandBuVerticalGridExpandButton = new DXTestControl(this);
					#region Search Criteria
					this.mUIVerticalGridExpandBuVerticalGridExpandButton.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUIVerticalGridExpandBuVerticalGridExpandButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridExpandButton";
					this.mUIVerticalGridExpandBuVerticalGridExpandButton.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIVerticalGridExpandBuVerticalGridExpandButton;
			}
		}
		public DXVerticalGridHeaderCell UIEmployeeVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIEmployeeVerticalGridHeaderCell == null))
				{
					this.mUIEmployeeVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIEmployeeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1[Name]Employee";
					this.mUIEmployeeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIEmployeeVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIEmployeeVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIVerticalGridExpandBuVerticalGridExpandButton;
		private DXVerticalGridHeaderCell mUIEmployeeVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client : DXTestControl
	{
		public UIPanel2Client(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXRadioGroup UIRadioGroup1RadioGroup
		{
			get
			{
				if ((this.mUIRadioGroup1RadioGroup == null))
				{
					this.mUIRadioGroup1RadioGroup = new DXRadioGroup(this);
					#region Search Criteria
					this.mUIRadioGroup1RadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "radioGroup1";
					this.mUIRadioGroup1RadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroup";
					this.mUIRadioGroup1RadioGroup.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRadioGroup1RadioGroup;
			}
		}
		#endregion
		#region Fields
		private DXRadioGroup mUIRadioGroup1RadioGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDragDropCustom : DXTestControl
	{
		public UIDragDropCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "DragDrop";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DragDrop";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheckBox1CheckBox
		{
			get
			{
				if ((this.mUICheckBox1CheckBox == null))
				{
					this.mUICheckBox1CheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckBox1CheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "checkBox1";
					this.mUICheckBox1CheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckBox1CheckBox.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
					this.mUICheckBox1CheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckBox1CheckBox;
			}
		}
		public UIVGridControl1VerticalGrid1 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid1(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		public UIListBox1List UIListBox1List
		{
			get
			{
				if ((this.mUIListBox1List == null))
				{
					this.mUIListBox1List = new UIListBox1List(this);
				}
				return this.mUIListBox1List;
			}
		}
		public UITreeList1TreeList UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheckBox1CheckBox;
		private UIVGridControl1VerticalGrid1 mUIVGridControl1VerticalGrid;
		private UIListBox1List mUIListBox1List;
		private UITreeList1TreeList mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid1 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridRow UIRowLast_NameVerticalGridRow
		{
			get
			{
				if ((this.mUIRowLast_NameVerticalGridRow == null))
				{
					this.mUIRowLast_NameVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowLast_NameVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowLast_Name";
					this.mUIRowLast_NameVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUIRowLast_NameVerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRowLast_NameVerticalGridRow;
			}
		}
		public UIMultiEditorRow2VerticalGridRow UIMultiEditorRow2VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow2VerticalGridRow == null))
				{
					this.mUIMultiEditorRow2VerticalGridRow = new UIMultiEditorRow2VerticalGridRow(this);
				}
				return this.mUIMultiEditorRow2VerticalGridRow;
			}
		}
		public DXVerticalGridRow UIRowPhotoVerticalGridRow
		{
			get
			{
				if ((this.mUIRowPhotoVerticalGridRow == null))
				{
					this.mUIRowPhotoVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowPhotoVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPhoto";
					this.mUIRowPhotoVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUIRowPhotoVerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRowPhotoVerticalGridRow;
			}
		}
		public UIRowTitle_Of_CourtesyVerticalGridRow UIRowTitle_Of_CourtesyVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTitle_Of_CourtesyVerticalGridRow == null))
				{
					this.mUIRowTitle_Of_CourtesyVerticalGridRow = new UIRowTitle_Of_CourtesyVerticalGridRow(this);
				}
				return this.mUIRowTitle_Of_CourtesyVerticalGridRow;
			}
		}
		public UICategoryRow3VerticalGridRow UICategoryRow3VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow3VerticalGridRow == null))
				{
					this.mUICategoryRow3VerticalGridRow = new UICategoryRow3VerticalGridRow(this);
				}
				return this.mUICategoryRow3VerticalGridRow;
			}
		}
		public DXVerticalGridRow UICategoryRow3VerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryRow3VerticalGridCategoryRow == null))
				{
					this.mUICategoryRow3VerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow3VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow3";
					this.mUICategoryRow3VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryRow3VerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow3VerticalGridCategoryRow;
			}
		}
		public UICategoryRow2VerticalGridRow UICategoryRow2VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow2VerticalGridRow == null))
				{
					this.mUICategoryRow2VerticalGridRow = new UICategoryRow2VerticalGridRow(this);
				}
				return this.mUICategoryRow2VerticalGridRow;
			}
		}
		public DXVerticalGridRow UICategoryRow2VerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryRow2VerticalGridCategoryRow == null))
				{
					this.mUICategoryRow2VerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow2VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow2";
					this.mUICategoryRow2VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryRow2VerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow2VerticalGridCategoryRow;
			}
		}
		public DXVerticalGridRow UICategoryRow1VerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridCategoryRow == null))
				{
					this.mUICategoryRow1VerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryRow1VerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow1VerticalGridCategoryRow;
			}
		}
		public UICategoryRow1VerticalGridRow1 UICategoryRow1VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridRow == null))
				{
					this.mUICategoryRow1VerticalGridRow = new UICategoryRow1VerticalGridRow1(this);
				}
				return this.mUICategoryRow1VerticalGridRow;
			}
		}
		public UIRowHome_PhoneVerticalGridRow UIRowHome_PhoneVerticalGridRow
		{
			get
			{
				if ((this.mUIRowHome_PhoneVerticalGridRow == null))
				{
					this.mUIRowHome_PhoneVerticalGridRow = new UIRowHome_PhoneVerticalGridRow(this);
				}
				return this.mUIRowHome_PhoneVerticalGridRow;
			}
		}
		public UIRowAddressVerticalGridRow UIRowAddressVerticalGridRow
		{
			get
			{
				if ((this.mUIRowAddressVerticalGridRow == null))
				{
					this.mUIRowAddressVerticalGridRow = new UIRowAddressVerticalGridRow(this);
				}
				return this.mUIRowAddressVerticalGridRow;
			}
		}
		public UIMultiEditorRow1VerticalGridRow UIMultiEditorRow1VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow1VerticalGridRow == null))
				{
					this.mUIMultiEditorRow1VerticalGridRow = new UIMultiEditorRow1VerticalGridRow(this);
				}
				return this.mUIMultiEditorRow1VerticalGridRow;
			}
		}
		public UIRowFirst_NameVerticalGridRow UIRowFirst_NameVerticalGridRow
		{
			get
			{
				if ((this.mUIRowFirst_NameVerticalGridRow == null))
				{
					this.mUIRowFirst_NameVerticalGridRow = new UIRowFirst_NameVerticalGridRow(this);
				}
				return this.mUIRowFirst_NameVerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridRow mUIRowLast_NameVerticalGridRow;
		private UIMultiEditorRow2VerticalGridRow mUIMultiEditorRow2VerticalGridRow;
		private DXVerticalGridRow mUIRowPhotoVerticalGridRow;
		private UIRowTitle_Of_CourtesyVerticalGridRow mUIRowTitle_Of_CourtesyVerticalGridRow;
		private UICategoryRow3VerticalGridRow mUICategoryRow3VerticalGridRow;
		private DXVerticalGridRow mUICategoryRow3VerticalGridCategoryRow;
		private UICategoryRow2VerticalGridRow mUICategoryRow2VerticalGridRow;
		private DXVerticalGridRow mUICategoryRow2VerticalGridCategoryRow;
		private DXVerticalGridRow mUICategoryRow1VerticalGridCategoryRow;
		private UICategoryRow1VerticalGridRow1 mUICategoryRow1VerticalGridRow;
		private UIRowHome_PhoneVerticalGridRow mUIRowHome_PhoneVerticalGridRow;
		private UIRowAddressVerticalGridRow mUIRowAddressVerticalGridRow;
		private UIMultiEditorRow1VerticalGridRow mUIMultiEditorRow1VerticalGridRow;
		private UIRowFirst_NameVerticalGridRow mUIRowFirst_NameVerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMultiEditorRow2VerticalGridRow : DXVerticalGridRow
	{
		public UIMultiEditorRow2VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIPostalCodeVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIPostalCodeVerticalGridHeaderCell == null))
				{
					this.mUIPostalCodeVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIPostalCodeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow2[Name]Postal Code";
					this.mUIPostalCodeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIPostalCodeVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIPostalCodeVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIPostalCodeVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTitle_Of_CourtesyVerticalGridRow : DXVerticalGridRow
	{
		public UIRowTitle_Of_CourtesyVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle_Of_Courtesy";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UITitleOfCourtesyVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUITitleOfCourtesyVerticalGridHeaderCell == null))
				{
					this.mUITitleOfCourtesyVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUITitleOfCourtesyVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle_Of_Courtesy[Name]Title Of Courtesy";
					this.mUITitleOfCourtesyVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUITitleOfCourtesyVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITitleOfCourtesyVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUITitleOfCourtesyVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryRow3VerticalGridRow : DXVerticalGridRow
	{
		public UICategoryRow3VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIPhotoNotesVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIPhotoNotesVerticalGridHeaderCell == null))
				{
					this.mUIPhotoNotesVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIPhotoNotesVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow3[Name]Photo & Notes";
					this.mUIPhotoNotesVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIPhotoNotesVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIPhotoNotesVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIPhotoNotesVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryRow2VerticalGridRow : DXVerticalGridRow
	{
		public UICategoryRow2VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIAddressVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIAddressVerticalGridHeaderCell == null))
				{
					this.mUIAddressVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIAddressVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow2[Name]Address";
					this.mUIAddressVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIAddressVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIAddressVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIAddressVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryRow1VerticalGridRow1 : DXVerticalGridRow
	{
		public UICategoryRow1VerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIEmployeeVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIEmployeeVerticalGridHeaderCell == null))
				{
					this.mUIEmployeeVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIEmployeeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1[Name]Employee";
					this.mUIEmployeeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIEmployeeVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIEmployeeVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIEmployeeVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowHome_PhoneVerticalGridRow : DXVerticalGridRow
	{
		public UIRowHome_PhoneVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHome_Phone";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIHomePhoneVerticalGridHeaderCell UIHomePhoneVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIHomePhoneVerticalGridHeaderCell == null))
				{
					this.mUIHomePhoneVerticalGridHeaderCell = new UIHomePhoneVerticalGridHeaderCell(this);
				}
				return this.mUIHomePhoneVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private UIHomePhoneVerticalGridHeaderCell mUIHomePhoneVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIHomePhoneVerticalGridHeaderCell : DXVerticalGridHeaderCell
	{
		public UIHomePhoneVerticalGridHeaderCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHome_Phone[Name]Home Phone";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIVerticalGridHeaderCeVerticalGridHeaderCellImage
		{
			get
			{
				if ((this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage == null))
				{
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage = new DXTestControl(this);
					#region Search Criteria
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHome_Phone[Index]0";
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCellImage";
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIVerticalGridHeaderCeVerticalGridHeaderCellImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowAddressVerticalGridRow : DXVerticalGridRow
	{
		public UIRowAddressVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowAddress";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIAddressVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIAddressVerticalGridHeaderCell == null))
				{
					this.mUIAddressVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIAddressVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowAddress[Name]Address";
					this.mUIAddressVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIAddressVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIAddressVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIAddressVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMultiEditorRow1VerticalGridRow : DXVerticalGridRow
	{
		public UIMultiEditorRow1VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UICityVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUICityVerticalGridHeaderCell == null))
				{
					this.mUICityVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUICityVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow1[Name]City";
					this.mUICityVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUICityVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICityVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUICityVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowFirst_NameVerticalGridRow : DXVerticalGridRow
	{
		public UIRowFirst_NameVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFirst_Name";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIFirstNameVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIFirstNameVerticalGridHeaderCell == null))
				{
					this.mUIFirstNameVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIFirstNameVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFirst_Name[Name]First Name";
					this.mUIFirstNameVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIFirstNameVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIFirstNameVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIFirstNameVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIListBox1List : DXListBox
	{
		public UIListBox1List(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "listBox1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControl";
			this.SearchProperties[DXTestControl.PropertyNames.HierarchyLevel] = "2";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIHomePhone2065559857ListItem
		{
			get
			{
				if ((this.mUIHomePhone2065559857ListItem == null))
				{
					this.mUIHomePhone2065559857ListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIHomePhone2065559857ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBox1Item[0]";
					this.mUIHomePhone2065559857ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIHomePhone2065559857ListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIHomePhone2065559857ListItem;
			}
		}
		public DXListBoxItem UIEngineering1100000MoListItem
		{
			get
			{
				if ((this.mUIEngineering1100000MoListItem == null))
				{
					this.mUIEngineering1100000MoListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIEngineering1100000MoListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBox1Item[1]";
					this.mUIEngineering1100000MoListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIEngineering1100000MoListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIEngineering1100000MoListItem;
			}
		}
		public DXListBoxItem UICustomerServices8500ListItem
		{
			get
			{
				if ((this.mUICustomerServices8500ListItem == null))
				{
					this.mUICustomerServices8500ListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUICustomerServices8500ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBox1Item[2]";
					this.mUICustomerServices8500ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUICustomerServices8500ListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICustomerServices8500ListItem;
			}
		}
		public DXListBoxItem UICorporateHeadquarterListItem
		{
			get
			{
				if ((this.mUICorporateHeadquarterListItem == null))
				{
					this.mUICorporateHeadquarterListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUICorporateHeadquarterListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBox1Item[3]";
					this.mUICorporateHeadquarterListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUICorporateHeadquarterListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICorporateHeadquarterListItem;
			}
		}
		public DXListBoxItem UICustomerServices8500ListItem1
		{
			get
			{
				if ((this.mUICustomerServices8500ListItem1 == null))
				{
					this.mUICustomerServices8500ListItem1 = new DXListBoxItem(this);
					#region Search Criteria
					this.mUICustomerServices8500ListItem1.SearchProperties[DXTestControl.PropertyNames.Name] = "listBox1Item[4]";
					this.mUICustomerServices8500ListItem1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUICustomerServices8500ListItem1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICustomerServices8500ListItem1;
			}
		}
		public DXListBoxItem UIFinance40000MontereyListItem
		{
			get
			{
				if ((this.mUIFinance40000MontereyListItem == null))
				{
					this.mUIFinance40000MontereyListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIFinance40000MontereyListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBox1Item[5]";
					this.mUIFinance40000MontereyListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIFinance40000MontereyListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIFinance40000MontereyListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIHomePhone2065559857ListItem;
		private DXListBoxItem mUIEngineering1100000MoListItem;
		private DXListBoxItem mUICustomerServices8500ListItem;
		private DXListBoxItem mUICorporateHeadquarterListItem;
		private DXListBoxItem mUICustomerServices8500ListItem1;
		private DXListBoxItem mUIFinance40000MontereyListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList : DXTreeList
	{
		public UITreeList1TreeList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode1TreeListNode1 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode1(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode mUINode0TreeListNode;
		private UINode1TreeListNode1 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode : DXTreeListNode
	{
		public UINode0TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode1 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode1(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public UINode2TreeListNode UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		public DXTestControl UINode0TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeSelectImage == null))
				{
					this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNodeSelectImage;
			}
		}
		public UINode1TreeListNode UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public DXTestControl UINode0TreeListRowIndicator
		{
			get
			{
				if ((this.mUINode0TreeListRowIndicator == null))
				{
					this.mUINode0TreeListRowIndicator = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowIndicator";
					this.mUINode0TreeListRowIndicator.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListRowIndicator;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode1 mUINode0TreeListNode1;
		private UINode2TreeListNode mUINode2TreeListNode;
		private DXTestControl mUINode0TreeListNodeSelectImage;
		private UINode1TreeListNode mUINode1TreeListNode;
		private DXTestControl mUINode0TreeListRowIndicator;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode1 : DXTreeListNode
	{
		public UINode0TreeListNode1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode2 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode2(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public DXTestControl UINode0TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeSelectImage == null))
				{
					this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNodeSelectImage;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode2 mUINode0TreeListNode;
		private DXTestControl mUINode0TreeListNodeSelectImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode2 : DXTreeListNode
	{
		public UINode0TreeListNode2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode0TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeSelectImage == null))
				{
					this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNodeSelectImage;
			}
		}
		public DXTreeListCell UIFieldOfficeEastCoastTreeListCell
		{
			get
			{
				if ((this.mUIFieldOfficeEastCoastTreeListCell == null))
				{
					this.mUIFieldOfficeEastCoastTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIFieldOfficeEastCoastTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIFieldOfficeEastCoastTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIFieldOfficeEastCoastTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIFieldOfficeEastCoastTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIFieldOfficeEastCoastTreeListCell;
			}
		}
		public UINode0TreeListNode11 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode11(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode0TreeListNodeSelectImage;
		private DXTreeListCell mUIFieldOfficeEastCoastTreeListCell;
		private UINode0TreeListNode11 mUINode0TreeListNode1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode11 : DXTreeListNode
	{
		public UINode0TreeListNode11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode0TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeSelectImage == null))
				{
					this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
					this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNodeSelectImage;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode0TreeListNodeSelectImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode : DXTreeListNode
	{
		public UINode2TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode2TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode2TreeListNodeSelectImage == null))
				{
					this.mUINode2TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode2TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
					this.mUINode2TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode2TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode2TreeListNodeSelectImage;
			}
		}
		public UINode0TreeListNode3 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode3(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode2TreeListNodeSelectImage;
		private UINode0TreeListNode3 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode3 : DXTreeListNode
	{
		public UINode0TreeListNode3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode0TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeSelectImage == null))
				{
					this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNodeSelectImage;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode0TreeListNodeSelectImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode : DXTreeListNode
	{
		public UINode1TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIFinanceTreeListCell
		{
			get
			{
				if ((this.mUIFinanceTreeListCell == null))
				{
					this.mUIFinanceTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIFinanceTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIFinanceTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIFinanceTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIFinanceTreeListCell;
			}
		}
		public DXTestControl UINode1TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode1TreeListNodeSelectImage == null))
				{
					this.mUINode1TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode1TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode1TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode1TreeListNodeSelectImage;
			}
		}
		public UINode0TreeListNode4 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode4(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public DXTreeListNode UINode1TreeListNode1
		{
			get
			{
				if ((this.mUINode1TreeListNode1 == null))
				{
					this.mUINode1TreeListNode1 = new DXTreeListNode(this);
					#region Search Criteria
					this.mUINode1TreeListNode1.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListNode1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
					this.mUINode1TreeListNode1.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUINode1TreeListNode1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode1TreeListNode1;
			}
		}
		public UINode2TreeListNode1 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode1(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIFinanceTreeListCell;
		private DXTestControl mUINode1TreeListNodeSelectImage;
		private UINode0TreeListNode4 mUINode0TreeListNode;
		private DXTreeListNode mUINode1TreeListNode1;
		private UINode2TreeListNode1 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode4 : DXTreeListNode
	{
		public UINode0TreeListNode4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode0TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeSelectImage == null))
				{
					this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNodeSelectImage;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode0TreeListNodeSelectImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode1 : DXTreeListNode
	{
		public UINode2TreeListNode1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIFinanceTreeListCell
		{
			get
			{
				if ((this.mUIFinanceTreeListCell == null))
				{
					this.mUIFinanceTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIFinanceTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIFinanceTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIFinanceTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIFinanceTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIFinanceTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode1 : DXTreeListNode
	{
		public UINode1TreeListNode1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode1TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode1TreeListNodeSelectImage == null))
				{
					this.mUINode1TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode1TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode1TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode1TreeListNodeSelectImage;
			}
		}
		public DXTestControl UINode1TreeListRowIndicator
		{
			get
			{
				if ((this.mUINode1TreeListRowIndicator == null))
				{
					this.mUINode1TreeListRowIndicator = new DXTestControl(this);
					#region Search Criteria
					this.mUINode1TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowIndicator";
					this.mUINode1TreeListRowIndicator.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode1TreeListRowIndicator;
			}
		}
		public DXTreeListCell UICustomerServicesTreeListCell
		{
			get
			{
				if ((this.mUICustomerServicesTreeListCell == null))
				{
					this.mUICustomerServicesTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUICustomerServicesTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUICustomerServicesTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUICustomerServicesTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICustomerServicesTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode1TreeListNodeSelectImage;
		private DXTestControl mUINode1TreeListRowIndicator;
		private DXTreeListCell mUICustomerServicesTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIResizingCustom : DXTestControl
	{
		public UIResizingCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Resizing";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "Resizing";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid2 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid2(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		public UIPanel2Client1 UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client1(this);
				}
				return this.mUIPanel2Client;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid2 mUIVGridControl1VerticalGrid;
		private UIPanel2Client1 mUIPanel2Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid2 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridRow UICategoryRow1VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridRow == null))
				{
					this.mUICategoryRow1VerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow1VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUICategoryRow1VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUICategoryRow1VerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow1VerticalGridRow;
			}
		}
		public DXVerticalGridRow UICategoryRow1VerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridCategoryRow == null))
				{
					this.mUICategoryRow1VerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryRow1VerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow1VerticalGridCategoryRow;
			}
		}
		public DXVerticalGridRow UIRowTitle_Of_CourtesyVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTitle_Of_CourtesyVerticalGridRow == null))
				{
					this.mUIRowTitle_Of_CourtesyVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowTitle_Of_CourtesyVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle_Of_Courtesy";
					this.mUIRowTitle_Of_CourtesyVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUIRowTitle_Of_CourtesyVerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRowTitle_Of_CourtesyVerticalGridRow;
			}
		}
		public UIRowTitleVerticalGridRow UIRowTitleVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTitleVerticalGridRow == null))
				{
					this.mUIRowTitleVerticalGridRow = new UIRowTitleVerticalGridRow(this);
				}
				return this.mUIRowTitleVerticalGridRow;
			}
		}
		public UIRowHome_PhoneVerticalGridRow1 UIRowHome_PhoneVerticalGridRow
		{
			get
			{
				if ((this.mUIRowHome_PhoneVerticalGridRow == null))
				{
					this.mUIRowHome_PhoneVerticalGridRow = new UIRowHome_PhoneVerticalGridRow1(this);
				}
				return this.mUIRowHome_PhoneVerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridRow mUICategoryRow1VerticalGridRow;
		private DXVerticalGridRow mUICategoryRow1VerticalGridCategoryRow;
		private DXVerticalGridRow mUIRowTitle_Of_CourtesyVerticalGridRow;
		private UIRowTitleVerticalGridRow mUIRowTitleVerticalGridRow;
		private UIRowHome_PhoneVerticalGridRow1 mUIRowHome_PhoneVerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTitleVerticalGridRow : DXVerticalGridRow
	{
		public UIRowTitleVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UITitleVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUITitleVerticalGridHeaderCell == null))
				{
					this.mUITitleVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUITitleVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle[Name]Title";
					this.mUITitleVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUITitleVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITitleVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUITitleVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowHome_PhoneVerticalGridRow1 : DXVerticalGridRow
	{
		public UIRowHome_PhoneVerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHome_Phone";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIHomePhoneVerticalGridHeaderCell1 UIHomePhoneVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIHomePhoneVerticalGridHeaderCell == null))
				{
					this.mUIHomePhoneVerticalGridHeaderCell = new UIHomePhoneVerticalGridHeaderCell1(this);
				}
				return this.mUIHomePhoneVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private UIHomePhoneVerticalGridHeaderCell1 mUIHomePhoneVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIHomePhoneVerticalGridHeaderCell1 : DXVerticalGridHeaderCell
	{
		public UIHomePhoneVerticalGridHeaderCell1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHome_Phone[Name]Home Phone";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIVerticalGridHeaderCeVerticalGridHeaderCellImage
		{
			get
			{
				if ((this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage == null))
				{
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage = new DXTestControl(this);
					#region Search Criteria
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHome_Phone[Index]0";
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCellImage";
					this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIVerticalGridHeaderCeVerticalGridHeaderCellImage;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIVerticalGridHeaderCeVerticalGridHeaderCellImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client1 : DXTestControl
	{
		public UIPanel2Client1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UISpinEdit1Edit
		{
			get
			{
				if ((this.mUISpinEdit1Edit == null))
				{
					this.mUISpinEdit1Edit = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEdit1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "spinEdit1";
					this.mUISpinEdit1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEdit1Edit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpinEdit1Edit;
			}
		}
		public DXTextEdit UISpinEdit2Edit
		{
			get
			{
				if ((this.mUISpinEdit2Edit == null))
				{
					this.mUISpinEdit2Edit = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEdit2Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "spinEdit2";
					this.mUISpinEdit2Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEdit2Edit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpinEdit2Edit;
			}
		}
		public DXTextEdit UISpinEdit3Edit
		{
			get
			{
				if ((this.mUISpinEdit3Edit == null))
				{
					this.mUISpinEdit3Edit = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEdit3Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "spinEdit3";
					this.mUISpinEdit3Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEdit3Edit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpinEdit3Edit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUISpinEdit1Edit;
		private DXTextEdit mUISpinEdit2Edit;
		private DXTextEdit mUISpinEdit3Edit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILayoutAndPaintStylesCustom : DXTestControl
	{
		public UILayoutAndPaintStylesCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "LayoutAndPaintStyles";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutAndPaintStyles";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIPanel2Client2 UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client2(this);
				}
				return this.mUIPanel2Client;
			}
		}
		public DXVerticalGrid UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new DXVerticalGrid(this);
					#region Search Criteria
					this.mUIVGridControl1VerticalGrid.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
					this.mUIVGridControl1VerticalGrid.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
					this.mUIVGridControl1VerticalGrid.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIPanel2Client2 mUIPanel2Client;
		private DXVerticalGrid mUIVGridControl1VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client2 : DXTestControl
	{
		public UIPanel2Client2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXRadioGroup UIRadioGroup1RadioGroup
		{
			get
			{
				if ((this.mUIRadioGroup1RadioGroup == null))
				{
					this.mUIRadioGroup1RadioGroup = new DXRadioGroup(this);
					#region Search Criteria
					this.mUIRadioGroup1RadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "radioGroup1";
					this.mUIRadioGroup1RadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroup";
					this.mUIRadioGroup1RadioGroup.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRadioGroup1RadioGroup;
			}
		}
		#endregion
		#region Fields
		private DXRadioGroup mUIRadioGroup1RadioGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMultiEditorsRowCustom : DXTestControl
	{
		public UIMultiEditorsRowCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "MultiEditorsRow";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MultiEditorsRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid3 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid3(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		public UIPanel2Client3 UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client3(this);
				}
				return this.mUIPanel2Client;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid3 mUIVGridControl1VerticalGrid;
		private UIPanel2Client3 mUIPanel2Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid3 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridRow UIMultiEditorRow2VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow2VerticalGridRow == null))
				{
					this.mUIMultiEditorRow2VerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIMultiEditorRow2VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow2";
					this.mUIMultiEditorRow2VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					#endregion
				}
				return this.mUIMultiEditorRow2VerticalGridRow;
			}
		}
		public DXVerticalGridRow UIMultiEditorRow1VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow1VerticalGridRow == null))
				{
					this.mUIMultiEditorRow1VerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIMultiEditorRow1VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow1";
					this.mUIMultiEditorRow1VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					#endregion
				}
				return this.mUIMultiEditorRow1VerticalGridRow;
			}
		}
		public UIMultiEditorRow5VerticalGridRow UIMultiEditorRow5VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow5VerticalGridRow == null))
				{
					this.mUIMultiEditorRow5VerticalGridRow = new UIMultiEditorRow5VerticalGridRow(this);
				}
				return this.mUIMultiEditorRow5VerticalGridRow;
			}
		}
		public DXVerticalGridRow UIMultiEditorRow6VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow6VerticalGridRow == null))
				{
					this.mUIMultiEditorRow6VerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIMultiEditorRow6VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow6";
					this.mUIMultiEditorRow6VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					#endregion
				}
				return this.mUIMultiEditorRow6VerticalGridRow;
			}
		}
		public DXVerticalGridRow UIMultiEditorRow3VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow3VerticalGridRow == null))
				{
					this.mUIMultiEditorRow3VerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIMultiEditorRow3VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow3";
					this.mUIMultiEditorRow3VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					#endregion
				}
				return this.mUIMultiEditorRow3VerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridRow mUIMultiEditorRow2VerticalGridRow;
		private DXVerticalGridRow mUIMultiEditorRow1VerticalGridRow;
		private UIMultiEditorRow5VerticalGridRow mUIMultiEditorRow5VerticalGridRow;
		private DXVerticalGridRow mUIMultiEditorRow6VerticalGridRow;
		private DXVerticalGridRow mUIMultiEditorRow3VerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMultiEditorRow5VerticalGridRow : DXVerticalGridRow
	{
		public UIMultiEditorRow5VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator
		{
			get
			{
				if ((this.mUIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator == null))
				{
					this.mUIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator = new DXTestControl(this);
					#region Search Criteria
					this.mUIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow5[RecordIndex]0[Index]0";
					this.mUIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridMultiEditorCellSeparator";
					this.mUIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIVerticalGridMultiEdiVerticalGridMultiEditorCellSeparator;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client3 : DXTestControl
	{
		public UIPanel2Client3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextBox1Edit
		{
			get
			{
				if ((this.mUITextBox1Edit == null))
				{
					this.mUITextBox1Edit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextBox1Edit.SearchProperties[DXTestControl.PropertyNames.Name] = "textBox1";
					this.mUITextBox1Edit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextBox1Edit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextBox1Edit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextBox1Edit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowCustomizationCustom : DXTestControl
	{
		public UIRowCustomizationCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "RowCustomization";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowCustomization";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid4 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid4(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid4 mUIVGridControl1VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid4 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridRow UIRowPhotoVerticalGridRow
		{
			get
			{
				if ((this.mUIRowPhotoVerticalGridRow == null))
				{
					this.mUIRowPhotoVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowPhotoVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPhoto";
					this.mUIRowPhotoVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUIRowPhotoVerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRowPhotoVerticalGridRow;
			}
		}
		public UIVGridControl1CustomiWindow UIVGridControl1CustomiWindow
		{
			get
			{
				if ((this.mUIVGridControl1CustomiWindow == null))
				{
					this.mUIVGridControl1CustomiWindow = new UIVGridControl1CustomiWindow(this);
				}
				return this.mUIVGridControl1CustomiWindow;
			}
		}
		public DXVerticalGridRow UICategoryRow1VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridRow == null))
				{
					this.mUICategoryRow1VerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow1VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUICategoryRow1VerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUICategoryRow1VerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow1VerticalGridRow;
			}
		}
		public DXVerticalGridRow UIRowTitle_Of_CourtesyVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTitle_Of_CourtesyVerticalGridRow == null))
				{
					this.mUIRowTitle_Of_CourtesyVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowTitle_Of_CourtesyVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle_Of_Courtesy";
					this.mUIRowTitle_Of_CourtesyVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUIRowTitle_Of_CourtesyVerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRowTitle_Of_CourtesyVerticalGridRow;
			}
		}
		public DXVerticalGridRow UIRowLast_NameVerticalGridRow
		{
			get
			{
				if ((this.mUIRowLast_NameVerticalGridRow == null))
				{
					this.mUIRowLast_NameVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowLast_NameVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowLast_Name";
					this.mUIRowLast_NameVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					#endregion
				}
				return this.mUIRowLast_NameVerticalGridRow;
			}
		}
		public DXVerticalGridRow UIRowHire_DateVerticalGridRow
		{
			get
			{
				if ((this.mUIRowHire_DateVerticalGridRow == null))
				{
					this.mUIRowHire_DateVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowHire_DateVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHire_Date";
					this.mUIRowHire_DateVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					#endregion
				}
				return this.mUIRowHire_DateVerticalGridRow;
			}
		}
		public DXVerticalGridRow UIRowExtensionVerticalGridRow
		{
			get
			{
				if ((this.mUIRowExtensionVerticalGridRow == null))
				{
					this.mUIRowExtensionVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowExtensionVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowExtension";
					this.mUIRowExtensionVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					#endregion
				}
				return this.mUIRowExtensionVerticalGridRow;
			}
		}
		public DXVerticalGridRow UICategoryRow1VerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridCategoryRow == null))
				{
					this.mUICategoryRow1VerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUICategoryRow1VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryRow1VerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow1VerticalGridCategoryRow;
			}
		}
		public DXVerticalGridRow UICategoryTestCategoryVerticalGridRow
		{
			get
			{
				if ((this.mUICategoryTestCategoryVerticalGridRow == null))
				{
					this.mUICategoryTestCategoryVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryTestCategoryVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryTestCategory";
					this.mUICategoryTestCategoryVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUICategoryTestCategoryVerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryTestCategoryVerticalGridRow;
			}
		}
		public DXVerticalGridRow UICategoryTestCategoryVerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryTestCategoryVerticalGridCategoryRow == null))
				{
					this.mUICategoryTestCategoryVerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryTestCategoryVerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryTestCategory";
					this.mUICategoryTestCategoryVerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryTestCategoryVerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryTestCategoryVerticalGridCategoryRow;
			}
		}
		public DXVerticalGridRow UIRowHome_PhoneVerticalGridRow
		{
			get
			{
				if ((this.mUIRowHome_PhoneVerticalGridRow == null))
				{
					this.mUIRowHome_PhoneVerticalGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowHome_PhoneVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHome_Phone";
					this.mUIRowHome_PhoneVerticalGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
					this.mUIRowHome_PhoneVerticalGridRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRowHome_PhoneVerticalGridRow;
			}
		}
		public DXVerticalGridRow UICategoryRow2VerticalGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryRow2VerticalGridCategoryRow == null))
				{
					this.mUICategoryRow2VerticalGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryRow2VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow2";
					this.mUICategoryRow2VerticalGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCategoryRow";
					this.mUICategoryRow2VerticalGridCategoryRow.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryRow2VerticalGridCategoryRow;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridRow mUIRowPhotoVerticalGridRow;
		private UIVGridControl1CustomiWindow mUIVGridControl1CustomiWindow;
		private DXVerticalGridRow mUICategoryRow1VerticalGridRow;
		private DXVerticalGridRow mUIRowTitle_Of_CourtesyVerticalGridRow;
		private DXVerticalGridRow mUIRowLast_NameVerticalGridRow;
		private DXVerticalGridRow mUIRowHire_DateVerticalGridRow;
		private DXVerticalGridRow mUIRowExtensionVerticalGridRow;
		private DXVerticalGridRow mUICategoryRow1VerticalGridCategoryRow;
		private DXVerticalGridRow mUICategoryTestCategoryVerticalGridRow;
		private DXVerticalGridRow mUICategoryTestCategoryVerticalGridCategoryRow;
		private DXVerticalGridRow mUIRowHome_PhoneVerticalGridRow;
		private DXVerticalGridRow mUICategoryRow2VerticalGridCategoryRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1CustomiWindow : DXWindow
	{
		public UIVGridControl1CustomiWindow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1CustomizationForm";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CustomizationForm";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITabControl1TabList UITabControl1TabList
		{
			get
			{
				if ((this.mUITabControl1TabList == null))
				{
					this.mUITabControl1TabList = new UITabControl1TabList(this);
				}
				return this.mUITabControl1TabList;
			}
		}
		#endregion
		#region Fields
		private UITabControl1TabList mUITabControl1TabList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITabControl1TabList : DXTestControl
	{
		public UITabControl1TabList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITpRowsClient UITpRowsClient
		{
			get
			{
				if ((this.mUITpRowsClient == null))
				{
					this.mUITpRowsClient = new UITpRowsClient(this);
				}
				return this.mUITpRowsClient;
			}
		}
		public UITpCategoriesClient UITpCategoriesClient
		{
			get
			{
				if ((this.mUITpCategoriesClient == null))
				{
					this.mUITpCategoriesClient = new UITpCategoriesClient(this);
				}
				return this.mUITpCategoriesClient;
			}
		}
		public DXTestControl UIXtraTabControlHeaderTabPage
		{
			get
			{
				if ((this.mUIXtraTabControlHeaderTabPage == null))
				{
					this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
					#region Search Criteria
					this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControl1PageHeader0";
					this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
					this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIXtraTabControlHeaderTabPage;
			}
		}
		public DXTestControl UIXtraTabControlHeaderTabPage1
		{
			get
			{
				if ((this.mUIXtraTabControlHeaderTabPage1 == null))
				{
					this.mUIXtraTabControlHeaderTabPage1 = new DXTestControl(this);
					#region Search Criteria
					this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControl1PageHeader1";
					this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
					this.mUIXtraTabControlHeaderTabPage1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIXtraTabControlHeaderTabPage1;
			}
		}
		#endregion
		#region Fields
		private UITpRowsClient mUITpRowsClient;
		private UITpCategoriesClient mUITpCategoriesClient;
		private DXTestControl mUIXtraTabControlHeaderTabPage;
		private DXTestControl mUIXtraTabControlHeaderTabPage1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITpRowsClient : DXTestControl
	{
		public UITpRowsClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpRows";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UILbRowsList UILbRowsList
		{
			get
			{
				if ((this.mUILbRowsList == null))
				{
					this.mUILbRowsList = new UILbRowsList(this);
				}
				return this.mUILbRowsList;
			}
		}
		#endregion
		#region Fields
		private UILbRowsList mUILbRowsList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILbRowsList : DXListBox
	{
		public UILbRowsList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "lbRows";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowsListBox";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIPhotoListItem
		{
			get
			{
				if ((this.mUIPhotoListItem == null))
				{
					this.mUIPhotoListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIPhotoListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPhoto";
					this.mUIPhotoListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowCustomizationListBoxItem";
					this.mUIPhotoListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIPhotoListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIPhotoListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITpCategoriesClient : DXTestControl
	{
		public UITpCategoriesClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpCategories";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UILbCategoriesList UILbCategoriesList
		{
			get
			{
				if ((this.mUILbCategoriesList == null))
				{
					this.mUILbCategoriesList = new UILbCategoriesList(this);
				}
				return this.mUILbCategoriesList;
			}
		}
		public DXButton UINewButton
		{
			get
			{
				if ((this.mUINewButton == null))
				{
					this.mUINewButton = new DXButton(this);
					#region Search Criteria
					this.mUINewButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btNew";
					this.mUINewButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUINewButton.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINewButton;
			}
		}
		public DXButton UIDeleteButton
		{
			get
			{
				if ((this.mUIDeleteButton == null))
				{
					this.mUIDeleteButton = new DXButton(this);
					#region Search Criteria
					this.mUIDeleteButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btDelete";
					this.mUIDeleteButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUIDeleteButton.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIDeleteButton;
			}
		}
		#endregion
		#region Fields
		private UILbCategoriesList mUILbCategoriesList;
		private DXButton mUINewButton;
		private DXButton mUIDeleteButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILbCategoriesList : DXListBox
	{
		public UILbCategoriesList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "lbCategories";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowsListBox";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIEmployeeListItem
		{
			get
			{
				if ((this.mUIEmployeeListItem == null))
				{
					this.mUIEmployeeListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIEmployeeListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
					this.mUIEmployeeListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUIEmployeeListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIEmployeeListItem;
			}
		}
		public DXListBoxItem UITestCategoryListItem
		{
			get
			{
				if ((this.mUITestCategoryListItem == null))
				{
					this.mUITestCategoryListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUITestCategoryListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryTestCategory";
					this.mUITestCategoryListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUITestCategoryListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITestCategoryListItem;
			}
		}
		public DXListBoxItem UIAddressListItem
		{
			get
			{
				if ((this.mUIAddressListItem == null))
				{
					this.mUIAddressListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIAddressListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow2";
					this.mUIAddressListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUIAddressListItem.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIAddressListItem;
			}
		}
		public DXListBoxItem UITestCategoryListItem1
		{
			get
			{
				if ((this.mUITestCategoryListItem1 == null))
				{
					this.mUITestCategoryListItem1 = new DXListBoxItem(this);
					#region Search Criteria
					this.mUITestCategoryListItem1.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryTestCategory";
					this.mUITestCategoryListItem1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUITestCategoryListItem1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITestCategoryListItem1;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIEmployeeListItem;
		private DXListBoxItem mUITestCategoryListItem;
		private DXListBoxItem mUIAddressListItem;
		private DXListBoxItem mUITestCategoryListItem1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDataModeCustom : DXTestControl
	{
		public UIDataModeCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "DataMode";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DataMode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid5 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid5(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		public UITreeList1TreeList1 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList1(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid5 mUIVGridControl1VerticalGrid;
		private UITreeList1TreeList1 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid5 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIRadioGroupRadioGroup UIRadioGroupRadioGroup
		{
			get
			{
				if ((this.mUIRadioGroupRadioGroup == null))
				{
					this.mUIRadioGroupRadioGroup = new UIRadioGroupRadioGroup(this);
				}
				return this.mUIRadioGroupRadioGroup;
			}
		}
		public UICategoryRow1VerticalGridRow2 UICategoryRow1VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridRow == null))
				{
					this.mUICategoryRow1VerticalGridRow = new UICategoryRow1VerticalGridRow2(this);
				}
				return this.mUICategoryRow1VerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowHP[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public UIRowHPVerticalGridRow UIRowHPVerticalGridRow
		{
			get
			{
				if ((this.mUIRowHPVerticalGridRow == null))
				{
					this.mUIRowHPVerticalGridRow = new UIRowHPVerticalGridRow(this);
				}
				return this.mUIRowHPVerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit1
		{
			get
			{
				if ((this.mUITextEditEdit1 == null))
				{
					this.mUITextEditEdit1 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowCyl[RecordIndex]2[CellIndex]0";
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit1;
			}
		}
		public UIRowCylVerticalGridRow UIRowCylVerticalGridRow
		{
			get
			{
				if ((this.mUIRowCylVerticalGridRow == null))
				{
					this.mUIRowCylVerticalGridRow = new UIRowCylVerticalGridRow(this);
				}
				return this.mUIRowCylVerticalGridRow;
			}
		}
		public UIRowMPGVerticalGridRow UIRowMPGVerticalGridRow
		{
			get
			{
				if ((this.mUIRowMPGVerticalGridRow == null))
				{
					this.mUIRowMPGVerticalGridRow = new UIRowMPGVerticalGridRow(this);
				}
				return this.mUIRowMPGVerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit2
		{
			get
			{
				if ((this.mUITextEditEdit2 == null))
				{
					this.mUITextEditEdit2 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowMPG[RecordIndex]1[CellIndex]1";
					this.mUITextEditEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit2.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit2;
			}
		}
		public DXTextEdit UITextEditEdit3
		{
			get
			{
				if ((this.mUITextEditEdit3 == null))
				{
					this.mUITextEditEdit3 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowMPG[RecordIndex]1[CellIndex]1";
					this.mUITextEditEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit3.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit3;
			}
		}
		#endregion
		#region Fields
		private UIRadioGroupRadioGroup mUIRadioGroupRadioGroup;
		private UICategoryRow1VerticalGridRow2 mUICategoryRow1VerticalGridRow;
		private DXTextEdit mUITextEditEdit;
		private UIRowHPVerticalGridRow mUIRowHPVerticalGridRow;
		private DXTextEdit mUITextEditEdit1;
		private UIRowCylVerticalGridRow mUIRowCylVerticalGridRow;
		private UIRowMPGVerticalGridRow mUIRowMPGVerticalGridRow;
		private DXTextEdit mUITextEditEdit2;
		private DXTextEdit mUITextEditEdit3;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRadioGroupRadioGroup : DXRadioGroup
	{
		public UIRadioGroupRadioGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "RadioGroup[Row]rowTransmiss_Automatic[RecordIndex]0[CellIndex]0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroup";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXRadioButton UIRadioGroupItemRadioButton
		{
			get
			{
				if ((this.mUIRadioGroupItemRadioButton == null))
				{
					this.mUIRadioGroupItemRadioButton = new DXRadioButton(this);
					#region Search Criteria
					this.mUIRadioGroupItemRadioButton.SearchProperties[DXTestControl.PropertyNames.Name] = "RadioGroup[Row]rowTransmiss_Automatic[RecordIndex]0[CellIndex]0Item[1]";
					this.mUIRadioGroupItemRadioButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroupItem";
					this.mUIRadioGroupItemRadioButton.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRadioGroupItemRadioButton;
			}
		}
		#endregion
		#region Fields
		private DXRadioButton mUIRadioGroupItemRadioButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryRow1VerticalGridRow2 : DXVerticalGridRow
	{
		public UICategoryRow1VerticalGridRow2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIPerformanceAttributeVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIPerformanceAttributeVerticalGridHeaderCell == null))
				{
					this.mUIPerformanceAttributeVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIPerformanceAttributeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1[Name]Performance Attributes";
					this.mUIPerformanceAttributeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIPerformanceAttributeVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIPerformanceAttributeVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIPerformanceAttributeVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowHPVerticalGridRow : DXVerticalGridRow
	{
		public UIRowHPVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHP";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem355VerticalGridCell
		{
			get
			{
				if ((this.mUIItem355VerticalGridCell == null))
				{
					this.mUIItem355VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem355VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowHP[RecordIndex]0[CellIndex]0";
					this.mUIItem355VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem355VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem355VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem355VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowCylVerticalGridRow : DXVerticalGridRow
	{
		public UIRowCylVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowCyl";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem125VerticalGridCell
		{
			get
			{
				if ((this.mUIItem125VerticalGridCell == null))
				{
					this.mUIItem125VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem125VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowCyl[RecordIndex]2[CellIndex]0";
					this.mUIItem125VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem125VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem125VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem125VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowMPGVerticalGridRow : DXVerticalGridRow
	{
		public UIRowMPGVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowMPG";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem24VerticalGridCell
		{
			get
			{
				if ((this.mUIItem24VerticalGridCell == null))
				{
					this.mUIItem24VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem24VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowMPG[RecordIndex]1[CellIndex]1";
					this.mUIItem24VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem24VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem24VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem24VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList1 : DXTreeList
	{
		public UITreeList1TreeList1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode5 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode5(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode5 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode5 : DXTreeListNode
	{
		public UINode0TreeListNode5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode12 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode12(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public UICheckedTreeListCell UICheckedTreeListCell
		{
			get
			{
				if ((this.mUICheckedTreeListCell == null))
				{
					this.mUICheckedTreeListCell = new UICheckedTreeListCell(this);
				}
				return this.mUICheckedTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode12 mUINode0TreeListNode1;
		private UICheckedTreeListCell mUICheckedTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode12 : DXTreeListNode
	{
		public UINode0TreeListNode12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode6 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode6(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode1TreeListNode2 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode2(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode6 mUINode0TreeListNode;
		private UINode1TreeListNode2 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode6 : DXTreeListNode
	{
		public UINode0TreeListNode6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UICheckedTreeListCell
		{
			get
			{
				if ((this.mUICheckedTreeListCell == null))
				{
					this.mUICheckedTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUICheckedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colCheck";
					this.mUICheckedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUICheckedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUICheckedTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckedTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUICheckedTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode2 : DXTreeListNode
	{
		public UINode1TreeListNode2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIItem6175551234TreeListCell UIItem6175551234TreeListCell
		{
			get
			{
				if ((this.mUIItem6175551234TreeListCell == null))
				{
					this.mUIItem6175551234TreeListCell = new UIItem6175551234TreeListCell(this);
				}
				return this.mUIItem6175551234TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem6175551234TreeListCell mUIItem6175551234TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem6175551234TreeListCell : DXTreeListCell
	{
		public UIItem6175551234TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "colPhone";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICheckedTreeListCell : DXTreeListCell
	{
		public UICheckedTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "colCheck";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheckEditCheckBox
		{
			get
			{
				if ((this.mUICheckEditCheckBox == null))
				{
					this.mUICheckEditCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit";
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckEditCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckEditCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheckEditCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowFormatCustom : DXTestControl
	{
		public UIRowFormatCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "RowFormat";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowFormat";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid6 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid6(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid6 mUIVGridControl1VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid6 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXDateTimePicker UIDateEditDateTimeEdit
		{
			get
			{
				if ((this.mUIDateEditDateTimeEdit == null))
				{
					this.mUIDateEditDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "DateEdit[Row]rowPurchaseDate[RecordIndex]1[CellIndex]0";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					#endregion
				}
				return this.mUIDateEditDateTimeEdit;
			}
		}
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowPayment1[RecordIndex]1[CellIndex]0";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public UIRowPayment1VerticalGridRow UIRowPayment1VerticalGridRow
		{
			get
			{
				if ((this.mUIRowPayment1VerticalGridRow == null))
				{
					this.mUIRowPayment1VerticalGridRow = new UIRowPayment1VerticalGridRow(this);
				}
				return this.mUIRowPayment1VerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private DXDateTimePicker mUIDateEditDateTimeEdit;
		private DXTextEdit mUITextEditEdit;
		private UIRowPayment1VerticalGridRow mUIRowPayment1VerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowPayment1VerticalGridRow : DXVerticalGridRow
	{
		public UIRowPayment1VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPayment1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem10099VerticalGridCell
		{
			get
			{
				if ((this.mUIItem10099VerticalGridCell == null))
				{
					this.mUIItem10099VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem10099VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPayment1[RecordIndex]2[CellIndex]0";
					this.mUIItem10099VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem10099VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem10099VerticalGridCell;
			}
		}
		public DXVerticalGridCell UIItem55500VerticalGridCell
		{
			get
			{
				if ((this.mUIItem55500VerticalGridCell == null))
				{
					this.mUIItem55500VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem55500VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPayment1[RecordIndex]1[CellIndex]0";
					this.mUIItem55500VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem55500VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem55500VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem10099VerticalGridCell;
		private DXVerticalGridCell mUIItem55500VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIEditorsCustom : DXTestControl
	{
		public UIEditorsCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Editors";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "Editors";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid7 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid7(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid7 mUIVGridControl1VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid7 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UISpinEditEdit
		{
			get
			{
				if ((this.mUISpinEditEdit == null))
				{
					this.mUISpinEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "SpinEdit[Row]rowTransmiss_Speed_Count[RecordIndex]0[CellIndex]0";
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpinEditEdit;
			}
		}
		public DXComboBox UIImageComboBoxEditComboBox
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox == null))
				{
					this.mUIImageComboBoxEditComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit[Row]rowTransmiss_Automatic[RecordIndex]0[CellIndex]0";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox;
			}
		}
		public UIRowTransmiss_AutomatVerticalGridRow UIRowTransmiss_AutomatVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTransmiss_AutomatVerticalGridRow == null))
				{
					this.mUIRowTransmiss_AutomatVerticalGridRow = new UIRowTransmiss_AutomatVerticalGridRow(this);
				}
				return this.mUIRowTransmiss_AutomatVerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUISpinEditEdit;
		private DXComboBox mUIImageComboBoxEditComboBox;
		private UIRowTransmiss_AutomatVerticalGridRow mUIRowTransmiss_AutomatVerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTransmiss_AutomatVerticalGridRow : DXVerticalGridRow
	{
		public UIRowTransmiss_AutomatVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTransmiss_Automatic";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UINOVerticalGridCell
		{
			get
			{
				if ((this.mUINOVerticalGridCell == null))
				{
					this.mUINOVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUINOVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTransmiss_Automatic[RecordIndex]0[CellIndex]0";
					this.mUINOVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUINOVerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINOVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUINOVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowsNavigationCustom : DXTestControl
	{
		public UIRowsNavigationCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "RowsNavigation";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowsNavigation";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid8 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid8(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid8 mUIVGridControl1VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid8 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UICategoryRow1VerticalGridRow3 UICategoryRow1VerticalGridRow
		{
			get
			{
				if ((this.mUICategoryRow1VerticalGridRow == null))
				{
					this.mUICategoryRow1VerticalGridRow = new UICategoryRow1VerticalGridRow3(this);
				}
				return this.mUICategoryRow1VerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowTitle[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public UIRowTitleVerticalGridRow1 UIRowTitleVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTitleVerticalGridRow == null))
				{
					this.mUIRowTitleVerticalGridRow = new UIRowTitleVerticalGridRow1(this);
				}
				return this.mUIRowTitleVerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit1
		{
			get
			{
				if ((this.mUITextEditEdit1 == null))
				{
					this.mUITextEditEdit1 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowFirst_Name[RecordIndex]4[CellIndex]0";
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit1;
			}
		}
		public DXTextEdit UITextEditEdit2
		{
			get
			{
				if ((this.mUITextEditEdit2 == null))
				{
					this.mUITextEditEdit2 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowExtension[RecordIndex]1[CellIndex]0";
					this.mUITextEditEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit2.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit2;
			}
		}
		public DXTextEdit UITextEditEdit3
		{
			get
			{
				if ((this.mUITextEditEdit3 == null))
				{
					this.mUITextEditEdit3 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit3.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowExtension[RecordIndex]1[CellIndex]0";
					this.mUITextEditEdit3.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit3.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit3;
			}
		}
		public UIRowExtensionVerticalGridRow UIRowExtensionVerticalGridRow
		{
			get
			{
				if ((this.mUIRowExtensionVerticalGridRow == null))
				{
					this.mUIRowExtensionVerticalGridRow = new UIRowExtensionVerticalGridRow(this);
				}
				return this.mUIRowExtensionVerticalGridRow;
			}
		}
		public DXPopupEdit UIMemoExEditPopupEdit
		{
			get
			{
				if ((this.mUIMemoExEditPopupEdit == null))
				{
					this.mUIMemoExEditPopupEdit = new DXPopupEdit(this);
					#region Search Criteria
					this.mUIMemoExEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "MemoExEdit[Row]rowNotes[RecordIndex]2[CellIndex]0";
					this.mUIMemoExEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MemoExEdit";
					this.mUIMemoExEditPopupEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIMemoExEditPopupEdit;
			}
		}
		public DXTextEdit UITextEditEdit4
		{
			get
			{
				if ((this.mUITextEditEdit4 == null))
				{
					this.mUITextEditEdit4 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit4.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowFirst_Name[RecordIndex]2[CellIndex]0";
					this.mUITextEditEdit4.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit4.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit4;
			}
		}
		public DXTextEdit UITextEditEdit5
		{
			get
			{
				if ((this.mUITextEditEdit5 == null))
				{
					this.mUITextEditEdit5 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit5.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowFirst_Name[RecordIndex]2[CellIndex]0";
					this.mUITextEditEdit5.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit5.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit5;
			}
		}
		public UIRowFirst_NameVerticalGridRow1 UIRowFirst_NameVerticalGridRow
		{
			get
			{
				if ((this.mUIRowFirst_NameVerticalGridRow == null))
				{
					this.mUIRowFirst_NameVerticalGridRow = new UIRowFirst_NameVerticalGridRow1(this);
				}
				return this.mUIRowFirst_NameVerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit6
		{
			get
			{
				if ((this.mUITextEditEdit6 == null))
				{
					this.mUITextEditEdit6 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit6.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowExtension[RecordIndex]4[CellIndex]0";
					this.mUITextEditEdit6.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit6.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit6;
			}
		}
		public DXTextEdit UITextEditEdit7
		{
			get
			{
				if ((this.mUITextEditEdit7 == null))
				{
					this.mUITextEditEdit7 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit7.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowExtension[RecordIndex]4[CellIndex]0";
					this.mUITextEditEdit7.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit7.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit7;
			}
		}
		public DXPopupEdit UIMemoExEditPopupEdit1
		{
			get
			{
				if ((this.mUIMemoExEditPopupEdit1 == null))
				{
					this.mUIMemoExEditPopupEdit1 = new DXPopupEdit(this);
					#region Search Criteria
					this.mUIMemoExEditPopupEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "MemoExEdit[Row]rowNotes[RecordIndex]4[CellIndex]0";
					this.mUIMemoExEditPopupEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MemoExEdit";
					this.mUIMemoExEditPopupEdit1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIMemoExEditPopupEdit1;
			}
		}
		public DXPopupEdit UIMemoExEditPopupEdit2
		{
			get
			{
				if ((this.mUIMemoExEditPopupEdit2 == null))
				{
					this.mUIMemoExEditPopupEdit2 = new DXPopupEdit(this);
					#region Search Criteria
					this.mUIMemoExEditPopupEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "MemoExEdit[Row]rowNotes[RecordIndex]4[CellIndex]0";
					this.mUIMemoExEditPopupEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MemoExEdit";
					this.mUIMemoExEditPopupEdit2.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIMemoExEditPopupEdit2;
			}
		}
		public DXTextEdit UITextEditEdit8
		{
			get
			{
				if ((this.mUITextEditEdit8 == null))
				{
					this.mUITextEditEdit8 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit8.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowFirst_Name[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit8.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit8.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit8;
			}
		}
		public DXTextEdit UITextEditEdit9
		{
			get
			{
				if ((this.mUITextEditEdit9 == null))
				{
					this.mUITextEditEdit9 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit9.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowLast_Name[RecordIndex]3[CellIndex]0";
					this.mUITextEditEdit9.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit9.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit9;
			}
		}
		public DXTextEdit UITextEditEdit10
		{
			get
			{
				if ((this.mUITextEditEdit10 == null))
				{
					this.mUITextEditEdit10 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit10.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowLast_Name[RecordIndex]3[CellIndex]0";
					this.mUITextEditEdit10.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit10.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit10;
			}
		}
		public UIRowLast_NameVerticalGridRow UIRowLast_NameVerticalGridRow
		{
			get
			{
				if ((this.mUIRowLast_NameVerticalGridRow == null))
				{
					this.mUIRowLast_NameVerticalGridRow = new UIRowLast_NameVerticalGridRow(this);
				}
				return this.mUIRowLast_NameVerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private UICategoryRow1VerticalGridRow3 mUICategoryRow1VerticalGridRow;
		private DXTextEdit mUITextEditEdit;
		private UIRowTitleVerticalGridRow1 mUIRowTitleVerticalGridRow;
		private DXTextEdit mUITextEditEdit1;
		private DXTextEdit mUITextEditEdit2;
		private DXTextEdit mUITextEditEdit3;
		private UIRowExtensionVerticalGridRow mUIRowExtensionVerticalGridRow;
		private DXPopupEdit mUIMemoExEditPopupEdit;
		private DXTextEdit mUITextEditEdit4;
		private DXTextEdit mUITextEditEdit5;
		private UIRowFirst_NameVerticalGridRow1 mUIRowFirst_NameVerticalGridRow;
		private DXTextEdit mUITextEditEdit6;
		private DXTextEdit mUITextEditEdit7;
		private DXPopupEdit mUIMemoExEditPopupEdit1;
		private DXPopupEdit mUIMemoExEditPopupEdit2;
		private DXTextEdit mUITextEditEdit8;
		private DXTextEdit mUITextEditEdit9;
		private DXTextEdit mUITextEditEdit10;
		private UIRowLast_NameVerticalGridRow mUIRowLast_NameVerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryRow1VerticalGridRow3 : DXVerticalGridRow
	{
		public UICategoryRow1VerticalGridRow3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIEmployeeVerticalGridHeaderCell
		{
			get
			{
				if ((this.mUIEmployeeVerticalGridHeaderCell == null))
				{
					this.mUIEmployeeVerticalGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIEmployeeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryRow1[Name]Employee";
					this.mUIEmployeeVerticalGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridHeaderCell";
					this.mUIEmployeeVerticalGridHeaderCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIEmployeeVerticalGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIEmployeeVerticalGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTitleVerticalGridRow1 : DXVerticalGridRow
	{
		public UIRowTitleVerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem123VerticalGridCell
		{
			get
			{
				if ((this.mUIItem123VerticalGridCell == null))
				{
					this.mUIItem123VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem123VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTitle[RecordIndex]0[CellIndex]0";
					this.mUIItem123VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem123VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem123VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem123VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowExtensionVerticalGridRow : DXVerticalGridRow
	{
		public UIRowExtensionVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowExtension";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem123VerticalGridCell
		{
			get
			{
				if ((this.mUIItem123VerticalGridCell == null))
				{
					this.mUIItem123VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem123VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowExtension[RecordIndex]1[CellIndex]0";
					this.mUIItem123VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem123VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem123VerticalGridCell;
			}
		}
		public DXVerticalGridCell UIItem123VerticalGridCell1
		{
			get
			{
				if ((this.mUIItem123VerticalGridCell1 == null))
				{
					this.mUIItem123VerticalGridCell1 = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem123VerticalGridCell1.SearchProperties[DXTestControl.PropertyNames.Name] = "rowExtension[RecordIndex]4[CellIndex]0";
					this.mUIItem123VerticalGridCell1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem123VerticalGridCell1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem123VerticalGridCell1;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem123VerticalGridCell;
		private DXVerticalGridCell mUIItem123VerticalGridCell1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowFirst_NameVerticalGridRow1 : DXVerticalGridRow
	{
		public UIRowFirst_NameVerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFirst_Name";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem123VerticalGridCell
		{
			get
			{
				if ((this.mUIItem123VerticalGridCell == null))
				{
					this.mUIItem123VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem123VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFirst_Name[RecordIndex]2[CellIndex]0";
					this.mUIItem123VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem123VerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem123VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem123VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowLast_NameVerticalGridRow : DXVerticalGridRow
	{
		public UIRowLast_NameVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowLast_Name";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIBuchan123anVerticalGridCell
		{
			get
			{
				if ((this.mUIBuchan123anVerticalGridCell == null))
				{
					this.mUIBuchan123anVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIBuchan123anVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowLast_Name[RecordIndex]3[CellIndex]0";
					this.mUIBuchan123anVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIBuchan123anVerticalGridCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIBuchan123anVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIBuchan123anVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIScrollVisibilitySampCustom : DXTestControl
	{
		public UIScrollVisibilitySampCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "ScrollVisibilitySample";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ScrollVisibilitySample";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIPanel2Client4 UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client4(this);
				}
				return this.mUIPanel2Client;
			}
		}
		public UIVGridControl1VerticalGrid9 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid9(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIPanel2Client4 mUIPanel2Client;
		private UIVGridControl1VerticalGrid9 mUIVGridControl1VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client4 : DXTestControl
	{
		public UIPanel2Client4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXRadioGroup UIRadioGroup1RadioGroup
		{
			get
			{
				if ((this.mUIRadioGroup1RadioGroup == null))
				{
					this.mUIRadioGroup1RadioGroup = new DXRadioGroup(this);
					#region Search Criteria
					this.mUIRadioGroup1RadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "radioGroup1";
					this.mUIRadioGroup1RadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroup";
					this.mUIRadioGroup1RadioGroup.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRadioGroup1RadioGroup;
			}
		}
		public DXRadioGroup UIRadioGroup2RadioGroup
		{
			get
			{
				if ((this.mUIRadioGroup2RadioGroup == null))
				{
					this.mUIRadioGroup2RadioGroup = new DXRadioGroup(this);
					#region Search Criteria
					this.mUIRadioGroup2RadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "radioGroup2";
					this.mUIRadioGroup2RadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroup";
					this.mUIRadioGroup2RadioGroup.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRadioGroup2RadioGroup;
			}
		}
		#endregion
		#region Fields
		private DXRadioGroup mUIRadioGroup1RadioGroup;
		private DXRadioGroup mUIRadioGroup2RadioGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid9 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXScrollBar UIVGridHorzScrollBarScrollBarControl
		{
			get
			{
				if ((this.mUIVGridHorzScrollBarScrollBarControl == null))
				{
					this.mUIVGridHorzScrollBarScrollBarControl = new DXScrollBar(this);
					#region Search Criteria
					this.mUIVGridHorzScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1VGridHorzScrollBar";
					this.mUIVGridHorzScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridHorzScrollBar";
					this.mUIVGridHorzScrollBarScrollBarControl.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIVGridHorzScrollBarScrollBarControl;
			}
		}
		public DXComboBox UIComboBoxEditComboBox
		{
			get
			{
				if ((this.mUIComboBoxEditComboBox == null))
				{
					this.mUIComboBoxEditComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUIComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ComboBoxEdit[Row]multiEditorRow1[RecordIndex]4[CellIndex]1";
					this.mUIComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxEdit";
					this.mUIComboBoxEditComboBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIComboBoxEditComboBox;
			}
		}
		#endregion
		#region Fields
		private DXScrollBar mUIVGridHorzScrollBarScrollBarControl;
		private DXComboBox mUIComboBoxEditComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIColumnAlignmentCustom : DXTestControl
	{
		public UIColumnAlignmentCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "ColumnAlignment";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ColumnAlignment";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList2 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList2(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList2 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList2 : DXTreeList
	{
		public UITreeList1TreeList2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode7 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode7(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode7 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode7 : DXTreeListNode
	{
		public UINode0TreeListNode7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode13 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode13(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode13 mUINode0TreeListNode1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode13 : DXTreeListNode
	{
		public UINode0TreeListNode13(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode0TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeSelectImage == null))
				{
					this.mUINode0TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode0TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUINode0TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNodeSelectImage;
			}
		}
		public DXTestControl UINode0TreeListRowIndicator
		{
			get
			{
				if ((this.mUINode0TreeListRowIndicator == null))
				{
					this.mUINode0TreeListRowIndicator = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowIndicator";
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUINode0TreeListRowIndicator.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListRowIndicator;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode0TreeListNodeSelectImage;
		private DXTestControl mUINode0TreeListRowIndicator;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIColumnCustomizationCustom : DXTestControl
	{
		public UIColumnCustomizationCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "ColumnCustomization";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ColumnCustomization";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList3 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList3(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList3 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList3 : DXTreeList
	{
		public UITreeList1TreeList3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListColumnHeader UICommonNameTreeListColumnHeader
		{
			get
			{
				if ((this.mUICommonNameTreeListColumnHeader == null))
				{
					this.mUICommonNameTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUICommonNameTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colCommonName";
					this.mUICommonNameTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUICommonNameTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICommonNameTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UISpeciesNoTreeListColumnHeader
		{
			get
			{
				if ((this.mUISpeciesNoTreeListColumnHeader == null))
				{
					this.mUISpeciesNoTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUISpeciesNoTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colSpeciesNo";
					this.mUISpeciesNoTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUISpeciesNoTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpeciesNoTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UISpeciesNameTreeListColumnHeader
		{
			get
			{
				if ((this.mUISpeciesNameTreeListColumnHeader == null))
				{
					this.mUISpeciesNameTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUISpeciesNameTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colSpeciesName";
					this.mUISpeciesNameTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUISpeciesNameTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpeciesNameTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UILengthcmTreeListColumnHeader
		{
			get
			{
				if ((this.mUILengthcmTreeListColumnHeader == null))
				{
					this.mUILengthcmTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUILengthcmTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colLength(cm)";
					this.mUILengthcmTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUILengthcmTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUILengthcmTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UICategoryTreeListColumnHeader
		{
			get
			{
				if ((this.mUICategoryTreeListColumnHeader == null))
				{
					this.mUICategoryTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUICategoryTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colCategory";
					this.mUICategoryTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUICategoryTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UIMarkTreeListColumnHeader
		{
			get
			{
				if ((this.mUIMarkTreeListColumnHeader == null))
				{
					this.mUIMarkTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUIMarkTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colMark";
					this.mUIMarkTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUIMarkTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIMarkTreeListColumnHeader;
			}
		}
		#endregion
		#region Fields
		private DXTreeListColumnHeader mUICommonNameTreeListColumnHeader;
		private DXTreeListColumnHeader mUISpeciesNoTreeListColumnHeader;
		private DXTreeListColumnHeader mUISpeciesNameTreeListColumnHeader;
		private DXTreeListColumnHeader mUILengthcmTreeListColumnHeader;
		private DXTreeListColumnHeader mUICategoryTreeListColumnHeader;
		private DXTreeListColumnHeader mUIMarkTreeListColumnHeader;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIColumnFormatCustom : DXTestControl
	{
		public UIColumnFormatCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "ColumnFormat";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ColumnFormat";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList4 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList4(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList4 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList4 : DXTreeList
	{
		public UITreeList1TreeList4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode3 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode3(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode2TreeListNode2 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode2(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode3 mUINode1TreeListNode;
		private UINode2TreeListNode2 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode3 : DXTreeListNode
	{
		public UINode1TreeListNode3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIItem512000TreeListCell UIItem512000TreeListCell
		{
			get
			{
				if ((this.mUIItem512000TreeListCell == null))
				{
					this.mUIItem512000TreeListCell = new UIItem512000TreeListCell(this);
				}
				return this.mUIItem512000TreeListCell;
			}
		}
		public UIItem30October2008TreeListCell UIItem30October2008TreeListCell
		{
			get
			{
				if ((this.mUIItem30October2008TreeListCell == null))
				{
					this.mUIItem30October2008TreeListCell = new UIItem30October2008TreeListCell(this);
				}
				return this.mUIItem30October2008TreeListCell;
			}
		}
		public DXTreeListCell UIItem1000001TreeListCell
		{
			get
			{
				if ((this.mUIItem1000001TreeListCell == null))
				{
					this.mUIItem1000001TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItem1000001TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "col[3]";
					this.mUIItem1000001TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItem1000001TreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem1000001TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem512000TreeListCell mUIItem512000TreeListCell;
		private UIItem30October2008TreeListCell mUIItem30October2008TreeListCell;
		private DXTreeListCell mUIItem1000001TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem512000TreeListCell : DXTreeListCell
	{
		public UIItem512000TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "col";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem30October2008TreeListCell : DXTreeListCell
	{
		public UIItem30October2008TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "col[2]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXDateTimePicker UIDateEditDateTimeEdit
		{
			get
			{
				if ((this.mUIDateEditDateTimeEdit == null))
				{
					this.mUIDateEditDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "DateEdit";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					this.mUIDateEditDateTimeEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIDateEditDateTimeEdit;
			}
		}
		#endregion
		#region Fields
		private DXDateTimePicker mUIDateEditDateTimeEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode2 : DXTreeListNode
	{
		public UINode2TreeListNode2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIItem13072012TreeListCell UIItem13072012TreeListCell
		{
			get
			{
				if ((this.mUIItem13072012TreeListCell == null))
				{
					this.mUIItem13072012TreeListCell = new UIItem13072012TreeListCell(this);
				}
				return this.mUIItem13072012TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem13072012TreeListCell mUIItem13072012TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem13072012TreeListCell : DXTreeListCell
	{
		public UIItem13072012TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "colPurchaseDate";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXDateTimePicker UIDateEditDateTimeEdit
		{
			get
			{
				if ((this.mUIDateEditDateTimeEdit == null))
				{
					this.mUIDateEditDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "DateEdit";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					#endregion
				}
				return this.mUIDateEditDateTimeEdit;
			}
		}
		#endregion
		#region Fields
		private DXDateTimePicker mUIDateEditDateTimeEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICustomTreeListNodeCustom : DXTestControl
	{
		public UICustomTreeListNodeCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "CustomTreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CustomTreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIPanel2Client5 UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client5(this);
				}
				return this.mUIPanel2Client;
			}
		}
		public UITreeList1TreeList5 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList5(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UIPanel2Client5 mUIPanel2Client;
		private UITreeList1TreeList5 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client5 : DXTestControl
	{
		public UIPanel2Client5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXButton UIAddRootButton
		{
			get
			{
				if ((this.mUIAddRootButton == null))
				{
					this.mUIAddRootButton = new DXButton(this);
					#region Search Criteria
					this.mUIAddRootButton.SearchProperties[DXTestControl.PropertyNames.Name] = "button1";
					this.mUIAddRootButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUIAddRootButton.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIAddRootButton;
			}
		}
		public DXButton UIAddChildButton
		{
			get
			{
				if ((this.mUIAddChildButton == null))
				{
					this.mUIAddChildButton = new DXButton(this);
					#region Search Criteria
					this.mUIAddChildButton.SearchProperties[DXTestControl.PropertyNames.Name] = "button2";
					this.mUIAddChildButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUIAddChildButton.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIAddChildButton;
			}
		}
		public DXButton UIDeleteButton
		{
			get
			{
				if ((this.mUIDeleteButton == null))
				{
					this.mUIDeleteButton = new DXButton(this);
					#region Search Criteria
					this.mUIDeleteButton.SearchProperties[DXTestControl.PropertyNames.Name] = "button3";
					this.mUIDeleteButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUIDeleteButton.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIDeleteButton;
			}
		}
		#endregion
		#region Fields
		private DXButton mUIAddRootButton;
		private DXButton mUIAddChildButton;
		private DXButton mUIDeleteButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList5 : DXTreeList
	{
		public UITreeList1TreeList5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CustomTreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1TextEdit[0]";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public UINode0TreeListNode8 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode8(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode2TreeListNode3 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode3(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		private UINode0TreeListNode8 mUINode0TreeListNode;
		private UINode2TreeListNode3 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode8 : DXTreeListNode
	{
		public UINode0TreeListNode8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0ChildNodesCountTreeListCell UINode0ChildNodesCountTreeListCell
		{
			get
			{
				if ((this.mUINode0ChildNodesCountTreeListCell == null))
				{
					this.mUINode0ChildNodesCountTreeListCell = new UINode0ChildNodesCountTreeListCell(this);
				}
				return this.mUINode0ChildNodesCountTreeListCell;
			}
		}
		public UINode0TreeListNode14 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode14(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		#endregion
		#region Fields
		private UINode0ChildNodesCountTreeListCell mUINode0ChildNodesCountTreeListCell;
		private UINode0TreeListNode14 mUINode0TreeListNode1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0ChildNodesCountTreeListCell : DXTreeListCell
	{
		public UINode0ChildNodesCountTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode0ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode0ColumntreeListCEdit == null))
				{
					this.mUINode0ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode0ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]0[Column]treeListColumn1";
					this.mUINode0ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode0ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode0ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode14 : DXTreeListNode
	{
		public UINode0TreeListNode14(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UINode4ChildNodesCountTreeListCell
		{
			get
			{
				if ((this.mUINode4ChildNodesCountTreeListCell == null))
				{
					this.mUINode4ChildNodesCountTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUINode4ChildNodesCountTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUINode4ChildNodesCountTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUINode4ChildNodesCountTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode4ChildNodesCountTreeListCell;
			}
		}
		public UINode0TreeListNode9 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode9(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUINode4ChildNodesCountTreeListCell;
		private UINode0TreeListNode9 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode9 : DXTreeListNode
	{
		public UINode0TreeListNode9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UINode5ChildNodesCountTreeListCell
		{
			get
			{
				if ((this.mUINode5ChildNodesCountTreeListCell == null))
				{
					this.mUINode5ChildNodesCountTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUINode5ChildNodesCountTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUINode5ChildNodesCountTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUINode5ChildNodesCountTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode5ChildNodesCountTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUINode5ChildNodesCountTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode3 : DXTreeListNode
	{
		public UINode2TreeListNode3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UINode2TreeListCell
		{
			get
			{
				if ((this.mUINode2TreeListCell == null))
				{
					this.mUINode2TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUINode2TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUINode2TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUINode2TreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode2TreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUINode2TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDataStoreCustom : DXTestControl
	{
		public UIDataStoreCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "DataStore";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DataStore";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList6 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList6(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList6 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList6 : DXTreeList
	{
		public UITreeList1TreeList6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode10 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode10(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode2TreeListNode4 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode4(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode10 mUINode0TreeListNode;
		private UINode2TreeListNode4 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode10 : DXTreeListNode
	{
		public UINode0TreeListNode10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode15 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode15(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode15 mUINode0TreeListNode1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode15 : DXTreeListNode
	{
		public UINode0TreeListNode15(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode4 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode4(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UILowTreeListCell UILowTreeListCell
		{
			get
			{
				if ((this.mUILowTreeListCell == null))
				{
					this.mUILowTreeListCell = new UILowTreeListCell(this);
				}
				return this.mUILowTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode4 mUINode1TreeListNode;
		private UILowTreeListCell mUILowTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode4 : DXTreeListNode
	{
		public UINode1TreeListNode4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UINormalTreeListCell
		{
			get
			{
				if ((this.mUINormalTreeListCell == null))
				{
					this.mUINormalTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUINormalTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
					this.mUINormalTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUINormalTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUINormalTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINormalTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUINormalTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILowTreeListCell : DXTreeListCell
	{
		public UILowTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXComboBox UIImageComboBoxEditComboBox
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox == null))
				{
					this.mUIImageComboBoxEditComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIImageComboBoxEditComboBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox;
			}
		}
		#endregion
		#region Fields
		private DXComboBox mUIImageComboBoxEditComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode4 : DXTreeListNode
	{
		public UINode2TreeListNode4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode16 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode16(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode16 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode16 : DXTreeListNode
	{
		public UINode0TreeListNode16(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UINormalTreeListCell
		{
			get
			{
				if ((this.mUINormalTreeListCell == null))
				{
					this.mUINormalTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUINormalTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
					this.mUINormalTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUINormalTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINormalTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUINormalTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMultiSelectCustom : DXTestControl
	{
		public UIMultiSelectCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "MultiSelect";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MultiSelect";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList7 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList7(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		public UIPanel2Client6 UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client6(this);
				}
				return this.mUIPanel2Client;
			}
		}
		public UIPanel3Client UIPanel3Client
		{
			get
			{
				if ((this.mUIPanel3Client == null))
				{
					this.mUIPanel3Client = new UIPanel3Client(this);
				}
				return this.mUIPanel3Client;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList7 mUITreeList1TreeList;
		private UIPanel2Client6 mUIPanel2Client;
		private UIPanel3Client mUIPanel3Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList7 : DXTreeList
	{
		public UITreeList1TreeList7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode5 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode5(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode0TreeListNode17 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode17(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode5 mUINode1TreeListNode;
		private UINode0TreeListNode17 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode5 : DXTreeListNode
	{
		public UINode1TreeListNode5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UICustomerServicesTreeListCell
		{
			get
			{
				if ((this.mUICustomerServicesTreeListCell == null))
				{
					this.mUICustomerServicesTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUICustomerServicesTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUICustomerServicesTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUICustomerServicesTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICustomerServicesTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUICustomerServicesTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode17 : DXTreeListNode
	{
		public UINode0TreeListNode17(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode2TreeListNode5 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode5(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		public UINode0TreeListNode19 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode19(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public UINode1TreeListNode8 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode8(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode2TreeListNode5 mUINode2TreeListNode;
		private UINode0TreeListNode19 mUINode0TreeListNode1;
		private UINode1TreeListNode8 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode5 : DXTreeListNode
	{
		public UINode2TreeListNode5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode6 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode6(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode0TreeListNode18 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode18(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode6 mUINode1TreeListNode;
		private UINode0TreeListNode18 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode6 : DXTreeListNode
	{
		public UINode1TreeListNode6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIResearchandDevelopmeTreeListCell
		{
			get
			{
				if ((this.mUIResearchandDevelopmeTreeListCell == null))
				{
					this.mUIResearchandDevelopmeTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIResearchandDevelopmeTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIResearchandDevelopmeTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIResearchandDevelopmeTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIResearchandDevelopmeTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIResearchandDevelopmeTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode18 : DXTreeListNode
	{
		public UINode0TreeListNode18(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UICustomerSupportTreeListCell
		{
			get
			{
				if ((this.mUICustomerSupportTreeListCell == null))
				{
					this.mUICustomerSupportTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUICustomerSupportTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUICustomerSupportTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUICustomerSupportTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICustomerSupportTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUICustomerSupportTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode19 : DXTreeListNode
	{
		public UINode0TreeListNode19(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode7 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode7(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode0TreeListNode20 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode20(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode7 mUINode1TreeListNode;
		private UINode0TreeListNode20 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode7 : DXTreeListNode
	{
		public UINode1TreeListNode7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIMarketingTreeListCell
		{
			get
			{
				if ((this.mUIMarketingTreeListCell == null))
				{
					this.mUIMarketingTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIMarketingTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIMarketingTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIMarketingTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode20 : DXTreeListNode
	{
		public UINode0TreeListNode20(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIFieldOfficeEastCoastTreeListCell
		{
			get
			{
				if ((this.mUIFieldOfficeEastCoastTreeListCell == null))
				{
					this.mUIFieldOfficeEastCoastTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIFieldOfficeEastCoastTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIFieldOfficeEastCoastTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIFieldOfficeEastCoastTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIFieldOfficeEastCoastTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIFieldOfficeEastCoastTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIFieldOfficeEastCoastTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode8 : DXTreeListNode
	{
		public UINode1TreeListNode8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIFinanceTreeListCell
		{
			get
			{
				if ((this.mUIFinanceTreeListCell == null))
				{
					this.mUIFinanceTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIFinanceTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIFinanceTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIFinanceTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIFinanceTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIFinanceTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client6 : DXTestControl
	{
		public UIPanel2Client6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UILbSelectedRowsCountLabel
		{
			get
			{
				if ((this.mUILbSelectedRowsCountLabel == null))
				{
					this.mUILbSelectedRowsCountLabel = new DXTestControl(this);
					#region Search Criteria
					this.mUILbSelectedRowsCountLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "lbSelectedRowsCount";
					this.mUILbSelectedRowsCountLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LabelControl";
					this.mUILbSelectedRowsCountLabel.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUILbSelectedRowsCountLabel;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUILbSelectedRowsCountLabel;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel3Client : DXTestControl
	{
		public UIPanel3Client(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UILbSelectedRowsLabel
		{
			get
			{
				if ((this.mUILbSelectedRowsLabel == null))
				{
					this.mUILbSelectedRowsLabel = new DXTestControl(this);
					#region Search Criteria
					this.mUILbSelectedRowsLabel.SearchProperties[DXTestControl.PropertyNames.Name] = "lbSelectedRows";
					this.mUILbSelectedRowsLabel.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LabelControl";
					this.mUILbSelectedRowsLabel.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUILbSelectedRowsLabel;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUILbSelectedRowsLabel;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINodeCheckingCustom : DXTestControl
	{
		public UINodeCheckingCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "NodeChecking";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NodeChecking";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList8 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList8(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		public UIPanel2Client7 UIPanel2Client
		{
			get
			{
				if ((this.mUIPanel2Client == null))
				{
					this.mUIPanel2Client = new UIPanel2Client7(this);
				}
				return this.mUIPanel2Client;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList8 mUITreeList1TreeList;
		private UIPanel2Client7 mUIPanel2Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList8 : DXTreeList
	{
		public UITreeList1TreeList8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode21 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode21(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public DXTreeListColumnHeader UIBudgetTreeListColumnHeader
		{
			get
			{
				if ((this.mUIBudgetTreeListColumnHeader == null))
				{
					this.mUIBudgetTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUIBudgetTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colBudget";
					this.mUIBudgetTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUIBudgetTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIBudgetTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UIDepartmentTreeListColumnHeader
		{
			get
			{
				if ((this.mUIDepartmentTreeListColumnHeader == null))
				{
					this.mUIDepartmentTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUIDepartmentTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIDepartmentTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUIDepartmentTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIDepartmentTreeListColumnHeader;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode21 mUINode0TreeListNode;
		private DXTreeListColumnHeader mUIBudgetTreeListColumnHeader;
		private DXTreeListColumnHeader mUIDepartmentTreeListColumnHeader;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode21 : DXTreeListNode
	{
		public UINode0TreeListNode21(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode110 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode110(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public DXTreeListNode UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new DXTreeListNode(this);
					#region Search Criteria
					this.mUINode1TreeListNode.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListNode.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
					this.mUINode1TreeListNode.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode2TreeListNode6 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode6(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode110 mUINode0TreeListNode1;
		private DXTreeListNode mUINode1TreeListNode;
		private UINode2TreeListNode6 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode110 : DXTreeListNode
	{
		public UINode0TreeListNode110(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListNode UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new DXTreeListNode(this);
					#region Search Criteria
					this.mUINode0TreeListNode.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNode.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
					this.mUINode0TreeListNode.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUINode0TreeListNode.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListNode;
			}
		}
		public DXTreeListCell UISalesandMarketingTreeListCell
		{
			get
			{
				if ((this.mUISalesandMarketingTreeListCell == null))
				{
					this.mUISalesandMarketingTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUISalesandMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUISalesandMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUISalesandMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUISalesandMarketingTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISalesandMarketingTreeListCell;
			}
		}
		public UINode1TreeListNode9 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode9(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private DXTreeListNode mUINode0TreeListNode;
		private DXTreeListCell mUISalesandMarketingTreeListCell;
		private UINode1TreeListNode9 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode9 : DXTreeListNode
	{
		public UINode1TreeListNode9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIMarketingTreeListCell
		{
			get
			{
				if ((this.mUIMarketingTreeListCell == null))
				{
					this.mUIMarketingTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIMarketingTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIMarketingTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIMarketingTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode6 : DXTreeListNode
	{
		public UINode2TreeListNode6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode22 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode22(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode1TreeListNode10 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode10(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode22 mUINode0TreeListNode;
		private UINode1TreeListNode10 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode22 : DXTreeListNode
	{
		public UINode0TreeListNode22(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UICustomerSupportTreeListCell
		{
			get
			{
				if ((this.mUICustomerSupportTreeListCell == null))
				{
					this.mUICustomerSupportTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUICustomerSupportTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUICustomerSupportTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUICustomerSupportTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICustomerSupportTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUICustomerSupportTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode10 : DXTreeListNode
	{
		public UINode1TreeListNode10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIResearchandDevelopmeTreeListCell
		{
			get
			{
				if ((this.mUIResearchandDevelopmeTreeListCell == null))
				{
					this.mUIResearchandDevelopmeTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIResearchandDevelopmeTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIResearchandDevelopmeTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIResearchandDevelopmeTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIResearchandDevelopmeTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIResearchandDevelopmeTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel2Client7 : DXTestControl
	{
		public UIPanel2Client7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UIChkAllowRecursiveCheckBox
		{
			get
			{
				if ((this.mUIChkAllowRecursiveCheckBox == null))
				{
					this.mUIChkAllowRecursiveCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUIChkAllowRecursiveCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkAllowRecursive";
					this.mUIChkAllowRecursiveCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUIChkAllowRecursiveCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIChkAllowRecursiveCheckBox;
			}
		}
		public DXCheckBox UIChkAllowIndeterminatCheckBox
		{
			get
			{
				if ((this.mUIChkAllowIndeterminatCheckBox == null))
				{
					this.mUIChkAllowIndeterminatCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUIChkAllowIndeterminatCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "chkAllowIndeterminate";
					this.mUIChkAllowIndeterminatCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUIChkAllowIndeterminatCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIChkAllowIndeterminatCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUIChkAllowRecursiveCheckBox;
		private DXCheckBox mUIChkAllowIndeterminatCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVerticalHeadersCustom : DXTestControl
	{
		public UIVerticalHeadersCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "VerticalHeaders";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalHeaders";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList9 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList9(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList9 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList9 : DXTreeList
	{
		public UITreeList1TreeList9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListColumnHeader UIBudgetTreeListColumnHeader
		{
			get
			{
				if ((this.mUIBudgetTreeListColumnHeader == null))
				{
					this.mUIBudgetTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUIBudgetTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "colBudget";
					this.mUIBudgetTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUIBudgetTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIBudgetTreeListColumnHeader;
			}
		}
		#endregion
		#region Fields
		private DXTreeListColumnHeader mUIBudgetTreeListColumnHeader;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINodesNavigationCustom : DXTestControl
	{
		public UINodesNavigationCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "NodesNavigation";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NodesNavigation";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList10 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList10(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList10 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList10 : DXTreeList
	{
		public UITreeList1TreeList10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UICommonNameTreeListColumnHeader UICommonNameTreeListColumnHeader
		{
			get
			{
				if ((this.mUICommonNameTreeListColumnHeader == null))
				{
					this.mUICommonNameTreeListColumnHeader = new UICommonNameTreeListColumnHeader(this);
				}
				return this.mUICommonNameTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UILengthcmTreeListColumnHeader
		{
			get
			{
				if ((this.mUILengthcmTreeListColumnHeader == null))
				{
					this.mUILengthcmTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUILengthcmTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUILengthcmTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUILengthcmTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUILengthcmTreeListColumnHeader;
			}
		}
		public UINode0TreeListNode23 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode23(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode15TreeListNode UINode15TreeListNode
		{
			get
			{
				if ((this.mUINode15TreeListNode == null))
				{
					this.mUINode15TreeListNode = new UINode15TreeListNode(this);
				}
				return this.mUINode15TreeListNode;
			}
		}
		public UINode5TreeListNode UINode5TreeListNode
		{
			get
			{
				if ((this.mUINode5TreeListNode == null))
				{
					this.mUINode5TreeListNode = new UINode5TreeListNode(this);
				}
				return this.mUINode5TreeListNode;
			}
		}
		public UINode20TreeListNode UINode20TreeListNode
		{
			get
			{
				if ((this.mUINode20TreeListNode == null))
				{
					this.mUINode20TreeListNode = new UINode20TreeListNode(this);
				}
				return this.mUINode20TreeListNode;
			}
		}
		public DXTreeListColumnHeader UICategoryTreeListColumnHeader
		{
			get
			{
				if ((this.mUICategoryTreeListColumnHeader == null))
				{
					this.mUICategoryTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUICategoryTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
					this.mUICategoryTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUICategoryTreeListColumnHeader.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICategoryTreeListColumnHeader;
			}
		}
		public UINode1TreeListNode11 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode11(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode4TreeListNode UINode4TreeListNode
		{
			get
			{
				if ((this.mUINode4TreeListNode == null))
				{
					this.mUINode4TreeListNode = new UINode4TreeListNode(this);
				}
				return this.mUINode4TreeListNode;
			}
		}
		public UINode17TreeListNode UINode17TreeListNode
		{
			get
			{
				if ((this.mUINode17TreeListNode == null))
				{
					this.mUINode17TreeListNode = new UINode17TreeListNode(this);
				}
				return this.mUINode17TreeListNode;
			}
		}
		public UINode6TreeListNode UINode6TreeListNode
		{
			get
			{
				if ((this.mUINode6TreeListNode == null))
				{
					this.mUINode6TreeListNode = new UINode6TreeListNode(this);
				}
				return this.mUINode6TreeListNode;
			}
		}
		public UINode7TreeListNode UINode7TreeListNode
		{
			get
			{
				if ((this.mUINode7TreeListNode == null))
				{
					this.mUINode7TreeListNode = new UINode7TreeListNode(this);
				}
				return this.mUINode7TreeListNode;
			}
		}
		public UINode12TreeListNode UINode12TreeListNode
		{
			get
			{
				if ((this.mUINode12TreeListNode == null))
				{
					this.mUINode12TreeListNode = new UINode12TreeListNode(this);
				}
				return this.mUINode12TreeListNode;
			}
		}
		public UINode8TreeListNode UINode8TreeListNode
		{
			get
			{
				if ((this.mUINode8TreeListNode == null))
				{
					this.mUINode8TreeListNode = new UINode8TreeListNode(this);
				}
				return this.mUINode8TreeListNode;
			}
		}
		public UINode14TreeListNode UINode14TreeListNode
		{
			get
			{
				if ((this.mUINode14TreeListNode == null))
				{
					this.mUINode14TreeListNode = new UINode14TreeListNode(this);
				}
				return this.mUINode14TreeListNode;
			}
		}
		public UINode9TreeListNode UINode9TreeListNode
		{
			get
			{
				if ((this.mUINode9TreeListNode == null))
				{
					this.mUINode9TreeListNode = new UINode9TreeListNode(this);
				}
				return this.mUINode9TreeListNode;
			}
		}
		public UINode10TreeListNode UINode10TreeListNode
		{
			get
			{
				if ((this.mUINode10TreeListNode == null))
				{
					this.mUINode10TreeListNode = new UINode10TreeListNode(this);
				}
				return this.mUINode10TreeListNode;
			}
		}
		public UINode11TreeListNode UINode11TreeListNode
		{
			get
			{
				if ((this.mUINode11TreeListNode == null))
				{
					this.mUINode11TreeListNode = new UINode11TreeListNode(this);
				}
				return this.mUINode11TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UICommonNameTreeListColumnHeader mUICommonNameTreeListColumnHeader;
		private DXTreeListColumnHeader mUILengthcmTreeListColumnHeader;
		private UINode0TreeListNode23 mUINode0TreeListNode;
		private UINode15TreeListNode mUINode15TreeListNode;
		private UINode5TreeListNode mUINode5TreeListNode;
		private UINode20TreeListNode mUINode20TreeListNode;
		private DXTreeListColumnHeader mUICategoryTreeListColumnHeader;
		private UINode1TreeListNode11 mUINode1TreeListNode;
		private UINode4TreeListNode mUINode4TreeListNode;
		private UINode17TreeListNode mUINode17TreeListNode;
		private UINode6TreeListNode mUINode6TreeListNode;
		private UINode7TreeListNode mUINode7TreeListNode;
		private UINode12TreeListNode mUINode12TreeListNode;
		private UINode8TreeListNode mUINode8TreeListNode;
		private UINode14TreeListNode mUINode14TreeListNode;
		private UINode9TreeListNode mUINode9TreeListNode;
		private UINode10TreeListNode mUINode10TreeListNode;
		private UINode11TreeListNode mUINode11TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICommonNameTreeListColumnHeader : DXTreeListColumnHeader
	{
		public UICommonNameTreeListColumnHeader(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UICommonNameTreeListColumnHeaderEdge
		{
			get
			{
				if ((this.mUICommonNameTreeListColumnHeaderEdge == null))
				{
					this.mUICommonNameTreeListColumnHeaderEdge = new DXTestControl(this);
					#region Search Criteria
					this.mUICommonNameTreeListColumnHeaderEdge.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
					this.mUICommonNameTreeListColumnHeaderEdge.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeaderEdge";
					this.mUICommonNameTreeListColumnHeaderEdge.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICommonNameTreeListColumnHeaderEdge;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUICommonNameTreeListColumnHeaderEdge;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode23 : DXTreeListNode
	{
		public UINode0TreeListNode23(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIItem15TreeListCell
		{
			get
			{
				if ((this.mUIItem15TreeListCell == null))
				{
					this.mUIItem15TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItem15TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIItem15TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItem15TreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem15TreeListCell;
			}
		}
		public DXTestControl UINode0TreeListRowIndicator
		{
			get
			{
				if ((this.mUINode0TreeListRowIndicator == null))
				{
					this.mUINode0TreeListRowIndicator = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowIndicator";
					this.mUINode0TreeListRowIndicator.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode0TreeListRowIndicator;
			}
		}
		public UITestTreeListCell UITestTreeListCell
		{
			get
			{
				if ((this.mUITestTreeListCell == null))
				{
					this.mUITestTreeListCell = new UITestTreeListCell(this);
				}
				return this.mUITestTreeListCell;
			}
		}
		public UIFirstCellTestTreeListCell UIFirstCellTestTreeListCell
		{
			get
			{
				if ((this.mUIFirstCellTestTreeListCell == null))
				{
					this.mUIFirstCellTestTreeListCell = new UIFirstCellTestTreeListCell(this);
				}
				return this.mUIFirstCellTestTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIItem15TreeListCell;
		private DXTestControl mUINode0TreeListRowIndicator;
		private UITestTreeListCell mUITestTreeListCell;
		private UIFirstCellTestTreeListCell mUIFirstCellTestTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITestTreeListCell : DXTreeListCell
	{
		public UITestTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIFirstCellTestTreeListCell : DXTreeListCell
	{
		public UIFirstCellTestTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode15TreeListNode : DXTreeListNode
	{
		public UINode15TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node15";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIItem91TreeListCell
		{
			get
			{
				if ((this.mUIItem91TreeListCell == null))
				{
					this.mUIItem91TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItem91TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIItem91TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItem91TreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem91TreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIItem91TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode5TreeListNode : DXTreeListNode
	{
		public UINode5TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIItem91TreeListCell
		{
			get
			{
				if ((this.mUIItem91TreeListCell == null))
				{
					this.mUIItem91TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItem91TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIItem91TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItem91TreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem91TreeListCell;
			}
		}
		public DXTestControl UINode5TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode5TreeListNodeSelectImage == null))
				{
					this.mUINode5TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode5TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node5";
					this.mUINode5TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode5TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode5TreeListNodeSelectImage;
			}
		}
		public UIGruntTreeListCell UIGruntTreeListCell
		{
			get
			{
				if ((this.mUIGruntTreeListCell == null))
				{
					this.mUIGruntTreeListCell = new UIGruntTreeListCell(this);
				}
				return this.mUIGruntTreeListCell;
			}
		}
		public UIHaemulonflavolineatuTreeListCell UIHaemulonflavolineatuTreeListCell
		{
			get
			{
				if ((this.mUIHaemulonflavolineatuTreeListCell == null))
				{
					this.mUIHaemulonflavolineatuTreeListCell = new UIHaemulonflavolineatuTreeListCell(this);
				}
				return this.mUIHaemulonflavolineatuTreeListCell;
			}
		}
		public UITestTreeListCell1 UITestTreeListCell
		{
			get
			{
				if ((this.mUITestTreeListCell == null))
				{
					this.mUITestTreeListCell = new UITestTreeListCell1(this);
				}
				return this.mUITestTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIItem91TreeListCell;
		private DXTestControl mUINode5TreeListNodeSelectImage;
		private UIGruntTreeListCell mUIGruntTreeListCell;
		private UIHaemulonflavolineatuTreeListCell mUIHaemulonflavolineatuTreeListCell;
		private UITestTreeListCell1 mUITestTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGruntTreeListCell : DXTreeListCell
	{
		public UIGruntTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode5ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode5ColumntreeListCEdit == null))
				{
					this.mUINode5ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode5ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]5[Column]treeListColumn2";
					this.mUINode5ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode5ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode5ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode5ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIHaemulonflavolineatuTreeListCell : DXTreeListCell
	{
		public UIHaemulonflavolineatuTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn4";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode5ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode5ColumntreeListCEdit == null))
				{
					this.mUINode5ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode5ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]5[Column]treeListColumn4";
					this.mUINode5ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode5ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode5ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode5ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITestTreeListCell1 : DXTreeListCell
	{
		public UITestTreeListCell1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode5ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode5ColumntreeListCEdit == null))
				{
					this.mUINode5ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode5ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]5[Column]treeListColumn3";
					this.mUINode5ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode5ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode5ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode5ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode20TreeListNode : DXTreeListNode
	{
		public UINode20TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node20";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIItem15TreeListCell
		{
			get
			{
				if ((this.mUIItem15TreeListCell == null))
				{
					this.mUIItem15TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItem15TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIItem15TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItem15TreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem15TreeListCell;
			}
		}
		public UITestTreeListCell2 UITestTreeListCell
		{
			get
			{
				if ((this.mUITestTreeListCell == null))
				{
					this.mUITestTreeListCell = new UITestTreeListCell2(this);
				}
				return this.mUITestTreeListCell;
			}
		}
		public UICheckedTreeListCell1 UICheckedTreeListCell
		{
			get
			{
				if ((this.mUICheckedTreeListCell == null))
				{
					this.mUICheckedTreeListCell = new UICheckedTreeListCell1(this);
				}
				return this.mUICheckedTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIItem15TreeListCell;
		private UITestTreeListCell2 mUITestTreeListCell;
		private UICheckedTreeListCell1 mUICheckedTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITestTreeListCell2 : DXTreeListCell
	{
		public UITestTreeListCell2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICheckedTreeListCell1 : DXTreeListCell
	{
		public UICheckedTreeListCell1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheckEditCheckBox
		{
			get
			{
				if ((this.mUICheckEditCheckBox == null))
				{
					this.mUICheckEditCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit";
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckEditCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckEditCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheckEditCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode11 : DXTreeListNode
	{
		public UINode1TreeListNode11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIBarracudaTreeListCell
		{
			get
			{
				if ((this.mUIBarracudaTreeListCell == null))
				{
					this.mUIBarracudaTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIBarracudaTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
					this.mUIBarracudaTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIBarracudaTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIBarracudaTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIBarracudaTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode4TreeListNode : DXTreeListNode
	{
		public UINode4TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node4";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UICroakerTreeListCell UICroakerTreeListCell
		{
			get
			{
				if ((this.mUICroakerTreeListCell == null))
				{
					this.mUICroakerTreeListCell = new UICroakerTreeListCell(this);
				}
				return this.mUICroakerTreeListCell;
			}
		}
		public UICheckedTreeListCell2 UICheckedTreeListCell
		{
			get
			{
				if ((this.mUICheckedTreeListCell == null))
				{
					this.mUICheckedTreeListCell = new UICheckedTreeListCell2(this);
				}
				return this.mUICheckedTreeListCell;
			}
		}
		public UIItem30TreeListCell UIItem30TreeListCell
		{
			get
			{
				if ((this.mUIItem30TreeListCell == null))
				{
					this.mUIItem30TreeListCell = new UIItem30TreeListCell(this);
				}
				return this.mUIItem30TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UICroakerTreeListCell mUICroakerTreeListCell;
		private UICheckedTreeListCell2 mUICheckedTreeListCell;
		private UIItem30TreeListCell mUIItem30TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICroakerTreeListCell : DXTreeListCell
	{
		public UICroakerTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public DXTextEdit UITextEditEdit1
		{
			get
			{
				if ((this.mUITextEditEdit1 == null))
				{
					this.mUITextEditEdit1 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit1.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit1;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		private DXTextEdit mUITextEditEdit1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICheckedTreeListCell2 : DXTreeListCell
	{
		public UICheckedTreeListCell2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheckEditCheckBox
		{
			get
			{
				if ((this.mUICheckEditCheckBox == null))
				{
					this.mUICheckEditCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit";
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckEditCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckEditCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheckEditCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem30TreeListCell : DXTreeListCell
	{
		public UIItem30TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UISpinEditEdit
		{
			get
			{
				if ((this.mUISpinEditEdit == null))
				{
					this.mUISpinEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "SpinEdit";
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpinEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUISpinEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode17TreeListNode : DXTreeListNode
	{
		public UINode17TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node17";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UISpadefishTreeListCell
		{
			get
			{
				if ((this.mUISpadefishTreeListCell == null))
				{
					this.mUISpadefishTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUISpadefishTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
					this.mUISpadefishTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUISpadefishTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISpadefishTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUISpadefishTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode6TreeListNode : DXTreeListNode
	{
		public UINode6TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITestTreeListCell3 UITestTreeListCell
		{
			get
			{
				if ((this.mUITestTreeListCell == null))
				{
					this.mUITestTreeListCell = new UITestTreeListCell3(this);
				}
				return this.mUITestTreeListCell;
			}
		}
		public DXTestControl UINode6TreeListRowIndicator
		{
			get
			{
				if ((this.mUINode6TreeListRowIndicator == null))
				{
					this.mUINode6TreeListRowIndicator = new DXTestControl(this);
					#region Search Criteria
					this.mUINode6TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
					this.mUINode6TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowIndicator";
					this.mUINode6TreeListRowIndicator.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode6TreeListRowIndicator;
			}
		}
		public DXTestControl UINode6TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode6TreeListNodeSelectImage == null))
				{
					this.mUINode6TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode6TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node6";
					this.mUINode6TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode6TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode6TreeListNodeSelectImage;
			}
		}
		public UIScorpionfishTreeListCell UIScorpionfishTreeListCell
		{
			get
			{
				if ((this.mUIScorpionfishTreeListCell == null))
				{
					this.mUIScorpionfishTreeListCell = new UIScorpionfishTreeListCell(this);
				}
				return this.mUIScorpionfishTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UITestTreeListCell3 mUITestTreeListCell;
		private DXTestControl mUINode6TreeListRowIndicator;
		private DXTestControl mUINode6TreeListNodeSelectImage;
		private UIScorpionfishTreeListCell mUIScorpionfishTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITestTreeListCell3 : DXTreeListCell
	{
		public UITestTreeListCell3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIScorpionfishTreeListCell : DXTreeListCell
	{
		public UIScorpionfishTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode6ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode6ColumntreeListCEdit == null))
				{
					this.mUINode6ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode6ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]6[Column]treeListColumn2";
					this.mUINode6ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode6ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode6ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode6ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode7TreeListNode : DXTreeListNode
	{
		public UINode7TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node7";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIRedtailSurfperchTreeListCell
		{
			get
			{
				if ((this.mUIRedtailSurfperchTreeListCell == null))
				{
					this.mUIRedtailSurfperchTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIRedtailSurfperchTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
					this.mUIRedtailSurfperchTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIRedtailSurfperchTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIRedtailSurfperchTreeListCell;
			}
		}
		public DXTreeListCell UICheckedTreeListCell
		{
			get
			{
				if ((this.mUICheckedTreeListCell == null))
				{
					this.mUICheckedTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUICheckedTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
					this.mUICheckedTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUICheckedTreeListCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckedTreeListCell;
			}
		}
		public UISurfperchTreeListCell UISurfperchTreeListCell
		{
			get
			{
				if ((this.mUISurfperchTreeListCell == null))
				{
					this.mUISurfperchTreeListCell = new UISurfperchTreeListCell(this);
				}
				return this.mUISurfperchTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIRedtailSurfperchTreeListCell;
		private DXTreeListCell mUICheckedTreeListCell;
		private UISurfperchTreeListCell mUISurfperchTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISurfperchTreeListCell : DXTreeListCell
	{
		public UISurfperchTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode7ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode7ColumntreeListCEdit == null))
				{
					this.mUINode7ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode7ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]7[Column]treeListColumn2";
					this.mUINode7ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode7ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode7ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode7ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode12TreeListNode : DXTreeListNode
	{
		public UINode12TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node12";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UICheckedTreeListCell3 UICheckedTreeListCell
		{
			get
			{
				if ((this.mUICheckedTreeListCell == null))
				{
					this.mUICheckedTreeListCell = new UICheckedTreeListCell3(this);
				}
				return this.mUICheckedTreeListCell;
			}
		}
		public UITestNodesTreeListCell UITestNodesTreeListCell
		{
			get
			{
				if ((this.mUITestNodesTreeListCell == null))
				{
					this.mUITestNodesTreeListCell = new UITestNodesTreeListCell(this);
				}
				return this.mUITestNodesTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UICheckedTreeListCell3 mUICheckedTreeListCell;
		private UITestNodesTreeListCell mUITestNodesTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICheckedTreeListCell3 : DXTreeListCell
	{
		public UICheckedTreeListCell3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheckEditCheckBox
		{
			get
			{
				if ((this.mUICheckEditCheckBox == null))
				{
					this.mUICheckEditCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit";
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckEditCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckEditCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheckEditCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITestNodesTreeListCell : DXTreeListCell
	{
		public UITestNodesTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode8TreeListNode : DXTreeListNode
	{
		public UINode8TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node8";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode8TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode8TreeListNodeSelectImage == null))
				{
					this.mUINode8TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode8TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node8";
					this.mUINode8TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode8TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode8TreeListNodeSelectImage;
			}
		}
		public UICheckedTreeListCell4 UICheckedTreeListCell
		{
			get
			{
				if ((this.mUICheckedTreeListCell == null))
				{
					this.mUICheckedTreeListCell = new UICheckedTreeListCell4(this);
				}
				return this.mUICheckedTreeListCell;
			}
		}
		public UITriggerfishTreeListCell UITriggerfishTreeListCell
		{
			get
			{
				if ((this.mUITriggerfishTreeListCell == null))
				{
					this.mUITriggerfishTreeListCell = new UITriggerfishTreeListCell(this);
				}
				return this.mUITriggerfishTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode8TreeListNodeSelectImage;
		private UICheckedTreeListCell4 mUICheckedTreeListCell;
		private UITriggerfishTreeListCell mUITriggerfishTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICheckedTreeListCell4 : DXTreeListCell
	{
		public UICheckedTreeListCell4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheckEditCheckBox
		{
			get
			{
				if ((this.mUICheckEditCheckBox == null))
				{
					this.mUICheckEditCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit";
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckEditCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckEditCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheckEditCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITriggerfishTreeListCell : DXTreeListCell
	{
		public UITriggerfishTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode8ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode8ColumntreeListCEdit == null))
				{
					this.mUINode8ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode8ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]8[Column]treeListColumn2";
					this.mUINode8ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode8ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode8ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode8ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode14TreeListNode : DXTreeListNode
	{
		public UINode14TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node14";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode14TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode14TreeListNodeSelectImage == null))
				{
					this.mUINode14TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode14TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node14";
					this.mUINode14TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode14TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode14TreeListNodeSelectImage;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode14TreeListNodeSelectImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode9TreeListNode : DXTreeListNode
	{
		public UINode9TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode9TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode9TreeListNodeSelectImage == null))
				{
					this.mUINode9TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode9TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node9";
					this.mUINode9TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode9TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode9TreeListNodeSelectImage;
			}
		}
		public UIRayTreeListCell UIRayTreeListCell
		{
			get
			{
				if ((this.mUIRayTreeListCell == null))
				{
					this.mUIRayTreeListCell = new UIRayTreeListCell(this);
				}
				return this.mUIRayTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode9TreeListNodeSelectImage;
		private UIRayTreeListCell mUIRayTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRayTreeListCell : DXTreeListCell
	{
		public UIRayTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode9ColumntreeListCEdit
		{
			get
			{
				if ((this.mUINode9ColumntreeListCEdit == null))
				{
					this.mUINode9ColumntreeListCEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode9ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]9[Column]treeListColumn2";
					this.mUINode9ColumntreeListCEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode9ColumntreeListCEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode9ColumntreeListCEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode9ColumntreeListCEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode10TreeListNode : DXTreeListNode
	{
		public UINode10TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node10";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UIUncheckedTreeListCell UIUncheckedTreeListCell
		{
			get
			{
				if ((this.mUIUncheckedTreeListCell == null))
				{
					this.mUIUncheckedTreeListCell = new UIUncheckedTreeListCell(this);
				}
				return this.mUIUncheckedTreeListCell;
			}
		}
		public UIGreenlingTreeListCell UIGreenlingTreeListCell
		{
			get
			{
				if ((this.mUIGreenlingTreeListCell == null))
				{
					this.mUIGreenlingTreeListCell = new UIGreenlingTreeListCell(this);
				}
				return this.mUIGreenlingTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIUncheckedTreeListCell mUIUncheckedTreeListCell;
		private UIGreenlingTreeListCell mUIGreenlingTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIUncheckedTreeListCell : DXTreeListCell
	{
		public UIUncheckedTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheckEditCheckBox
		{
			get
			{
				if ((this.mUICheckEditCheckBox == null))
				{
					this.mUICheckEditCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit";
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckEditCheckBox.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUICheckEditCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheckEditCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGreenlingTreeListCell : DXTreeListCell
	{
		public UIGreenlingTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode10ColumntreeListEdit
		{
			get
			{
				if ((this.mUINode10ColumntreeListEdit == null))
				{
					this.mUINode10ColumntreeListEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode10ColumntreeListEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]10[Column]treeListColumn2";
					this.mUINode10ColumntreeListEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode10ColumntreeListEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode10ColumntreeListEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode10ColumntreeListEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode11TreeListNode : DXTreeListNode
	{
		public UINode11TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node11";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINode11TreeListNodeSelectImage
		{
			get
			{
				if ((this.mUINode11TreeListNodeSelectImage == null))
				{
					this.mUINode11TreeListNodeSelectImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode11TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node11";
					this.mUINode11TreeListNodeSelectImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeSelectImage";
					this.mUINode11TreeListNodeSelectImage.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode11TreeListNodeSelectImage;
			}
		}
		public UICodTreeListCell UICodTreeListCell
		{
			get
			{
				if ((this.mUICodTreeListCell == null))
				{
					this.mUICodTreeListCell = new UICodTreeListCell(this);
				}
				return this.mUICodTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode11TreeListNodeSelectImage;
		private UICodTreeListCell mUICodTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICodTreeListCell : DXTreeListCell
	{
		public UICodTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode11ColumntreeListEdit
		{
			get
			{
				if ((this.mUINode11ColumntreeListEdit == null))
				{
					this.mUINode11ColumntreeListEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode11ColumntreeListEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]11[Column]treeListColumn2";
					this.mUINode11ColumntreeListEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode11ColumntreeListEdit.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUINode11ColumntreeListEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode11ColumntreeListEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISummariesCustom : DXTestControl
	{
		public UISummariesCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Summaries";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "Summaries";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList11 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList11(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList11 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList11 : DXTreeList
	{
		public UITreeList1TreeList11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UITreeListSummaryFooteTreeListSummaryFooter UITreeListSummaryFooteTreeListSummaryFooter
		{
			get
			{
				if ((this.mUITreeListSummaryFooteTreeListSummaryFooter == null))
				{
					this.mUITreeListSummaryFooteTreeListSummaryFooter = new UITreeListSummaryFooteTreeListSummaryFooter(this);
				}
				return this.mUITreeListSummaryFooteTreeListSummaryFooter;
			}
		}
		public UINode0TreeListNode24 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode24(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode1TreeListNode14 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode14(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UITreeListSummaryFooteTreeListSummaryFooter mUITreeListSummaryFooteTreeListSummaryFooter;
		private UINode0TreeListNode24 mUINode0TreeListNode;
		private UINode1TreeListNode14 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeListSummaryFooteTreeListSummaryFooter : DXTestControl
	{
		public UITreeListSummaryFooteTreeListSummaryFooter(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListSummaryFooter";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListSummaryFooter";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIMINBurlingtonVTTreeListSummaryFooterCell
		{
			get
			{
				if ((this.mUIMINBurlingtonVTTreeListSummaryFooterCell == null))
				{
					this.mUIMINBurlingtonVTTreeListSummaryFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIMINBurlingtonVTTreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colLocation";
					this.mUIMINBurlingtonVTTreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListSummaryFooterCell";
					this.mUIMINBurlingtonVTTreeListSummaryFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIMINBurlingtonVTTreeListSummaryFooterCell;
			}
		}
		public DXTestControl UIItemTreeListSummaryFooterCell
		{
			get
			{
				if ((this.mUIItemTreeListSummaryFooterCell == null))
				{
					this.mUIItemTreeListSummaryFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItemTreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIItemTreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListSummaryFooterCell";
					this.mUIItemTreeListSummaryFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItemTreeListSummaryFooterCell;
			}
		}
		public DXTestControl UISum185000000TreeListSummaryFooterCell
		{
			get
			{
				if ((this.mUISum185000000TreeListSummaryFooterCell == null))
				{
					this.mUISum185000000TreeListSummaryFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUISum185000000TreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colBudget";
					this.mUISum185000000TreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListSummaryFooterCell";
					this.mUISum185000000TreeListSummaryFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUISum185000000TreeListSummaryFooterCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIMINBurlingtonVTTreeListSummaryFooterCell;
		private DXTestControl mUIItemTreeListSummaryFooterCell;
		private DXTestControl mUISum185000000TreeListSummaryFooterCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode24 : DXTreeListNode
	{
		public UINode0TreeListNode24(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode111 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode111(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public UINode2TreeListNode7 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode7(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode111 mUINode0TreeListNode1;
		private UINode2TreeListNode7 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode111 : DXTreeListNode
	{
		public UINode0TreeListNode111(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode12 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode12(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode12 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode12 : DXTreeListNode
	{
		public UINode1TreeListNode12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListRowFooter UINode1TreeListRowFooter
		{
			get
			{
				if ((this.mUINode1TreeListRowFooter == null))
				{
					this.mUINode1TreeListRowFooter = new UINode1TreeListRowFooter(this);
				}
				return this.mUINode1TreeListRowFooter;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListRowFooter mUINode1TreeListRowFooter;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListRowFooter : DXTestControl
	{
		public UINode1TreeListRowFooter(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooter";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIItem200000000TreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItem200000000TreeListRowFooterCell == null))
				{
					this.mUIItem200000000TreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItem200000000TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colBudget";
					this.mUIItem200000000TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItem200000000TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
					this.mUIItem200000000TreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem200000000TreeListRowFooterCell;
			}
		}
		public DXTestControl UIItem2TreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItem2TreeListRowFooterCell == null))
				{
					this.mUIItem2TreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItem2TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colLocation";
					this.mUIItem2TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItem2TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
					this.mUIItem2TreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem2TreeListRowFooterCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIItem200000000TreeListRowFooterCell;
		private DXTestControl mUIItem2TreeListRowFooterCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode7 : DXTreeListNode
	{
		public UINode2TreeListNode7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode13 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode13(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode2TreeListRowFooter UINode2TreeListRowFooter
		{
			get
			{
				if ((this.mUINode2TreeListRowFooter == null))
				{
					this.mUINode2TreeListRowFooter = new UINode2TreeListRowFooter(this);
				}
				return this.mUINode2TreeListRowFooter;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode13 mUINode1TreeListNode;
		private UINode2TreeListRowFooter mUINode2TreeListRowFooter;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode13 : DXTreeListNode
	{
		public UINode1TreeListNode13(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListRowFooter1 UINode1TreeListRowFooter
		{
			get
			{
				if ((this.mUINode1TreeListRowFooter == null))
				{
					this.mUINode1TreeListRowFooter = new UINode1TreeListRowFooter1(this);
				}
				return this.mUINode1TreeListRowFooter;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListRowFooter1 mUINode1TreeListRowFooter;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListRowFooter1 : DXTestControl
	{
		public UINode1TreeListRowFooter1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooter";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIItem2TreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItem2TreeListRowFooterCell == null))
				{
					this.mUIItem2TreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItem2TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colLocation";
					this.mUIItem2TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItem2TreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem2TreeListRowFooterCell;
			}
		}
		public DXTestControl UIItemTreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItemTreeListRowFooterCell == null))
				{
					this.mUIItemTreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItemTreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colBudget";
					this.mUIItemTreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItemTreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItemTreeListRowFooterCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIItem2TreeListRowFooterCell;
		private DXTestControl mUIItemTreeListRowFooterCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListRowFooter : DXTestControl
	{
		public UINode2TreeListRowFooter(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooter";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIItem3TreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItem3TreeListRowFooterCell == null))
				{
					this.mUIItem3TreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItem3TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colLocation";
					this.mUIItem3TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItem3TreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem3TreeListRowFooterCell;
			}
		}
		public DXTestControl UIItemTreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItemTreeListRowFooterCell == null))
				{
					this.mUIItemTreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItemTreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colBudget";
					this.mUIItemTreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItemTreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItemTreeListRowFooterCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIItem3TreeListRowFooterCell;
		private DXTestControl mUIItemTreeListRowFooterCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode14 : DXTreeListNode
	{
		public UINode1TreeListNode14(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public UINode1TreeListRowFooter2 UINode1TreeListRowFooter
		{
			get
			{
				if ((this.mUINode1TreeListRowFooter == null))
				{
					this.mUINode1TreeListRowFooter = new UINode1TreeListRowFooter2(this);
				}
				return this.mUINode1TreeListRowFooter;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListRowFooter2 mUINode1TreeListRowFooter;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListRowFooter2 : DXTestControl
	{
		public UINode1TreeListRowFooter2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooter";
			this.WindowTitles.Add("Tutorials (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIItem2TreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItem2TreeListRowFooterCell == null))
				{
					this.mUIItem2TreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItem2TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colLocation";
					this.mUIItem2TreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItem2TreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItem2TreeListRowFooterCell;
			}
		}
		public DXTestControl UIItemTreeListRowFooterCell
		{
			get
			{
				if ((this.mUIItemTreeListRowFooterCell == null))
				{
					this.mUIItemTreeListRowFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItemTreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colBudget";
					this.mUIItemTreeListRowFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowFooterCell";
					this.mUIItemTreeListRowFooterCell.WindowTitles.Add("Tutorials (C# code)");
					#endregion
				}
				return this.mUIItemTreeListRowFooterCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIItem2TreeListRowFooterCell;
		private DXTestControl mUIItemTreeListRowFooterCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItemWindow : DXWindow
	{
		public UIItemWindow()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "New Category";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("New Category");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "tbCaption";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("New Category");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public DXButton UISimpleButtonButton
		{
			get
			{
				if ((this.mUISimpleButtonButton == null))
				{
					this.mUISimpleButtonButton = new DXButton(this);
					#region Search Criteria
					this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "btOk";
					this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUISimpleButtonButton.WindowTitles.Add("New Category");
					#endregion
				}
				return this.mUISimpleButtonButton;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		private DXButton mUISimpleButtonButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraVerticalGridFeatWindow : DXWindow
	{
		public UIXtraVerticalGridFeatWindow()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public UIPanelControl1Client UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIPanelControl1Client mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client : DXTestControl
	{
		public UIPanelControl1Client(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public UIGcContainerClient1 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient1(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient1 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient1 : DXTestControl
	{
		public UIGcContainerClient1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public UIUnboundExpressionsCustom UIUnboundExpressionsCustom
		{
			get
			{
				if ((this.mUIUnboundExpressionsCustom == null))
				{
					this.mUIUnboundExpressionsCustom = new UIUnboundExpressionsCustom(this);
				}
				return this.mUIUnboundExpressionsCustom;
			}
		}
		#endregion
		#region Fields
		private UIUnboundExpressionsCustom mUIUnboundExpressionsCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIUnboundExpressionsCustom : DXTestControl
	{
		public UIUnboundExpressionsCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "UnboundExpressions";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "UnboundExpressions";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid10 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid10(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		public UIPanelControl1Client1 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client1(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid10 mUIVGridControl1VerticalGrid;
		private UIPanelControl1Client1 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid10 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public UIRowOrderIDVerticalGridRow UIRowOrderIDVerticalGridRow
		{
			get
			{
				if ((this.mUIRowOrderIDVerticalGridRow == null))
				{
					this.mUIRowOrderIDVerticalGridRow = new UIRowOrderIDVerticalGridRow(this);
				}
				return this.mUIRowOrderIDVerticalGridRow;
			}
		}
		public UIRow7VerticalGridRow UIRow7VerticalGridRow
		{
			get
			{
				if ((this.mUIRow7VerticalGridRow == null))
				{
					this.mUIRow7VerticalGridRow = new UIRow7VerticalGridRow(this);
				}
				return this.mUIRow7VerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowQuantity[RecordIndex]1[CellIndex]0";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public DXTextEdit UITextEditEdit1
		{
			get
			{
				if ((this.mUITextEditEdit1 == null))
				{
					this.mUITextEditEdit1 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowDiscount[RecordIndex]1[CellIndex]0";
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit1.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUITextEditEdit1;
			}
		}
		public UIRowTotalVerticalGridRow UIRowTotalVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTotalVerticalGridRow == null))
				{
					this.mUIRowTotalVerticalGridRow = new UIRowTotalVerticalGridRow(this);
				}
				return this.mUIRowTotalVerticalGridRow;
			}
		}
		public UIRowTotalAmountVerticalGridRow UIRowTotalAmountVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTotalAmountVerticalGridRow == null))
				{
					this.mUIRowTotalAmountVerticalGridRow = new UIRowTotalAmountVerticalGridRow(this);
				}
				return this.mUIRowTotalAmountVerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private UIRowOrderIDVerticalGridRow mUIRowOrderIDVerticalGridRow;
		private UIRow7VerticalGridRow mUIRow7VerticalGridRow;
		private DXTextEdit mUITextEditEdit;
		private DXTextEdit mUITextEditEdit1;
		private UIRowTotalVerticalGridRow mUIRowTotalVerticalGridRow;
		private UIRowTotalAmountVerticalGridRow mUIRowTotalAmountVerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowOrderIDVerticalGridRow : DXVerticalGridRow
	{
		public UIRowOrderIDVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowOrderID";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem10248VerticalGridCell
		{
			get
			{
				if ((this.mUIItem10248VerticalGridCell == null))
				{
					this.mUIItem10248VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem10248VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowOrderID[RecordIndex]0[CellIndex]0";
					this.mUIItem10248VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem10248VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUIItem10248VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem10248VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRow7VerticalGridRow : DXVerticalGridRow
	{
		public UIRow7VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "row7";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem26VerticalGridCell
		{
			get
			{
				if ((this.mUIItem26VerticalGridCell == null))
				{
					this.mUIItem26VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem26VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "row7[RecordIndex]0[CellIndex]0";
					this.mUIItem26VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem26VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUIItem26VerticalGridCell;
			}
		}
		public DXVerticalGridCell UIItem198VerticalGridCell
		{
			get
			{
				if ((this.mUIItem198VerticalGridCell == null))
				{
					this.mUIItem198VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem198VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "row7[RecordIndex]1[CellIndex]0";
					this.mUIItem198VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem198VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUIItem198VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem26VerticalGridCell;
		private DXVerticalGridCell mUIItem198VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTotalVerticalGridRow : DXVerticalGridRow
	{
		public UIRowTotalVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTotal";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem392000VerticalGridCell
		{
			get
			{
				if ((this.mUIItem392000VerticalGridCell == null))
				{
					this.mUIItem392000VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem392000VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTotal[RecordIndex]1[CellIndex]0";
					this.mUIItem392000VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem392000VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUIItem392000VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem392000VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTotalAmountVerticalGridRow : DXVerticalGridRow
	{
		public UIRowTotalAmountVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTotalAmount";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem490000VerticalGridCell
		{
			get
			{
				if ((this.mUIItem490000VerticalGridCell == null))
				{
					this.mUIItem490000VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem490000VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTotalAmount[RecordIndex]1[CellIndex]0";
					this.mUIItem490000VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem490000VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUIItem490000VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem490000VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client1 : DXTestControl
	{
		public UIPanelControl1Client1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
			#endregion
		}
		#region Properties
		public DXButton UIAddNewRowButton
		{
			get
			{
				if ((this.mUIAddNewRowButton == null))
				{
					this.mUIAddNewRowButton = new DXButton(this);
					#region Search Criteria
					this.mUIAddNewRowButton.SearchProperties[DXTestControl.PropertyNames.Name] = "addNewRow";
					this.mUIAddNewRowButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUIAddNewRowButton.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Expressions");
					#endregion
				}
				return this.mUIAddNewRowButton;
			}
		}
		#endregion
		#region Fields
		private DXButton mUIAddNewRowButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraVerticalGridFeatWindow1 : DXWindow
	{
		public UIXtraVerticalGridFeatWindow1()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraVerticalGrid Suite by DevExpress (C# code)";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient1 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient1(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient1 mUIGcNavigationsClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient1 : DXTestControl
	{
		public UIGcNavigationsClient1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl : DXTestControl
	{
		public UIAccordionControl1AccordionControl(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIMainAccordionControlGroup UIMainAccordionControlGroup
		{
			get
			{
				if ((this.mUIMainAccordionControlGroup == null))
				{
					this.mUIMainAccordionControlGroup = new UIMainAccordionControlGroup(this);
				}
				return this.mUIMainAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIMainAccordionControlGroup mUIMainAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMainAccordionControlGroup : DXTestControl
	{
		public UIMainAccordionControlGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Main";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIUnboundExpressionsAccordionControlItem
		{
			get
			{
				if ((this.mUIUnboundExpressionsAccordionControlItem == null))
				{
					this.mUIUnboundExpressionsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIUnboundExpressionsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Unbound Expressions";
					this.mUIUnboundExpressionsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIUnboundExpressionsAccordionControlItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUIUnboundExpressionsAccordionControlItem;
			}
		}
		public DXTestControl UIFixedRowsAccordionControlItem
		{
			get
			{
				if ((this.mUIFixedRowsAccordionControlItem == null))
				{
					this.mUIFixedRowsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIFixedRowsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Fixed Rows";
					this.mUIFixedRowsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIFixedRowsAccordionControlItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUIFixedRowsAccordionControlItem;
			}
		}
		public DXTestControl UIPropertyGridAccordionControlItem
		{
			get
			{
				if ((this.mUIPropertyGridAccordionControlItem == null))
				{
					this.mUIPropertyGridAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Property Grid";
					this.mUIPropertyGridAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIPropertyGridAccordionControlItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUIPropertyGridAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIUnboundExpressionsAccordionControlItem;
		private DXTestControl mUIFixedRowsAccordionControlItem;
		private DXTestControl mUIPropertyGridAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIExpressioneditorWindow : DXWindow
	{
		public UIExpressioneditorWindow()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Expression editor";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("Expression editor");
			#endregion
		}
		#region Properties
		public DXListBox UIListOfInputTypesList
		{
			get
			{
				if ((this.mUIListOfInputTypesList == null))
				{
					this.mUIListOfInputTypesList = new DXListBox(this);
					#region Search Criteria
					this.mUIListOfInputTypesList.SearchProperties[DXTestControl.PropertyNames.Name] = "listOfInputTypes";
					this.mUIListOfInputTypesList.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControl";
					#endregion
				}
				return this.mUIListOfInputTypesList;
			}
		}
		public UIListOfInputParameterList UIListOfInputParameterList
		{
			get
			{
				if ((this.mUIListOfInputParameterList == null))
				{
					this.mUIListOfInputParameterList = new UIListOfInputParameterList(this);
				}
				return this.mUIListOfInputParameterList;
			}
		}
		public DXButton UIPlusItemButtonButton
		{
			get
			{
				if ((this.mUIPlusItemButtonButton == null))
				{
					this.mUIPlusItemButtonButton = new DXButton(this);
					#region Search Criteria
					this.mUIPlusItemButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "plusItemButton";
					this.mUIPlusItemButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutItemButton";
					this.mUIPlusItemButtonButton.WindowTitles.Add("Expression editor");
					#endregion
				}
				return this.mUIPlusItemButtonButton;
			}
		}
		public DXListBox UIListBoxControlList
		{
			get
			{
				if ((this.mUIListBoxControlList == null))
				{
					this.mUIListBoxControlList = new DXListBox(this);
					#region Search Criteria
					this.mUIListBoxControlList.SearchProperties[DXTestControl.PropertyNames.Name] = "listOfInputTypes";
					this.mUIListBoxControlList.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControl";
					this.mUIListBoxControlList.WindowTitles.Add("Expression editor");
					#endregion
				}
				return this.mUIListBoxControlList;
			}
		}
		public DXButton UILayoutItemButtonButton
		{
			get
			{
				if ((this.mUILayoutItemButtonButton == null))
				{
					this.mUILayoutItemButtonButton = new DXButton(this);
					#region Search Criteria
					this.mUILayoutItemButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "plusItemButton";
					this.mUILayoutItemButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LayoutItemButton";
					this.mUILayoutItemButtonButton.WindowTitles.Add("Expression editor");
					#endregion
				}
				return this.mUILayoutItemButtonButton;
			}
		}
		public DXButton UISimpleButtonButton
		{
			get
			{
				if ((this.mUISimpleButtonButton == null))
				{
					this.mUISimpleButtonButton = new DXButton(this);
					#region Search Criteria
					this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "buttonOK";
					this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUISimpleButtonButton.WindowTitles.Add("Expression editor");
					#endregion
				}
				return this.mUISimpleButtonButton;
			}
		}
		#endregion
		#region Fields
		private DXListBox mUIListOfInputTypesList;
		private UIListOfInputParameterList mUIListOfInputParameterList;
		private DXButton mUIPlusItemButtonButton;
		private DXListBox mUIListBoxControlList;
		private DXButton mUILayoutItemButtonButton;
		private DXButton mUISimpleButtonButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIListOfInputParameterList : DXListBox
	{
		public UIListOfInputParameterList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "listOfInputParameters";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControl";
			this.WindowTitles.Add("Expression editor");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIDiscountListItem
		{
			get
			{
				if ((this.mUIDiscountListItem == null))
				{
					this.mUIDiscountListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIDiscountListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listOfInputParametersItem[0]";
					this.mUIDiscountListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIDiscountListItem.WindowTitles.Add("Expression editor");
					#endregion
				}
				return this.mUIDiscountListItem;
			}
		}
		public DXListBoxItem UIQuantityListItem
		{
			get
			{
				if ((this.mUIQuantityListItem == null))
				{
					this.mUIQuantityListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIQuantityListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listOfInputParametersItem[3]";
					this.mUIQuantityListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIQuantityListItem.WindowTitles.Add("Expression editor");
					#endregion
				}
				return this.mUIQuantityListItem;
			}
		}
		public DXListBoxItem UIUnitPriceListItem
		{
			get
			{
				if ((this.mUIUnitPriceListItem == null))
				{
					this.mUIUnitPriceListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIUnitPriceListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listOfInputParametersItem[6]";
					this.mUIUnitPriceListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIUnitPriceListItem.WindowTitles.Add("Expression editor");
					#endregion
				}
				return this.mUIUnitPriceListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIDiscountListItem;
		private DXListBoxItem mUIQuantityListItem;
		private DXListBoxItem mUIUnitPriceListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraVerticalGridFeatWindow2 : DXWindow
	{
		public UIXtraVerticalGridFeatWindow2()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraVerticalGrid Suite by DevExpress (C# code) - Layout";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient2 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient2(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		public UIPanelControl1Client2 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client2(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient2 mUIGcNavigationsClient;
		private UIPanelControl1Client2 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient2 : DXTestControl
	{
		public UIGcNavigationsClient2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl1 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl1(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl1 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl1 : DXTestControl
	{
		public UIAccordionControl1AccordionControl1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UIMainAccordionControlGroup1 UIMainAccordionControlGroup
		{
			get
			{
				if ((this.mUIMainAccordionControlGroup == null))
				{
					this.mUIMainAccordionControlGroup = new UIMainAccordionControlGroup1(this);
				}
				return this.mUIMainAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIMainAccordionControlGroup1 mUIMainAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMainAccordionControlGroup1 : DXTestControl
	{
		public UIMainAccordionControlGroup1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Main";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXTestControl UILayoutAccordionControlItem
		{
			get
			{
				if ((this.mUILayoutAccordionControlItem == null))
				{
					this.mUILayoutAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUILayoutAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Layout";
					this.mUILayoutAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUILayoutAccordionControlItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUILayoutAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUILayoutAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client2 : DXTestControl
	{
		public UIPanelControl1Client2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UIGcContainerClient2 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient2(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient2 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient2 : DXTestControl
	{
		public UIGcContainerClient2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UILayoutCustom UILayoutCustom
		{
			get
			{
				if ((this.mUILayoutCustom == null))
				{
					this.mUILayoutCustom = new UILayoutCustom(this);
				}
				return this.mUILayoutCustom;
			}
		}
		#endregion
		#region Fields
		private UILayoutCustom mUILayoutCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILayoutCustom : DXTestControl
	{
		public UILayoutCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Layout";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "Layout";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UITcMainTabList UITcMainTabList
		{
			get
			{
				if ((this.mUITcMainTabList == null))
				{
					this.mUITcMainTabList = new UITcMainTabList(this);
				}
				return this.mUITcMainTabList;
			}
		}
		public UIPnlLeftClient UIPnlLeftClient
		{
			get
			{
				if ((this.mUIPnlLeftClient == null))
				{
					this.mUIPnlLeftClient = new UIPnlLeftClient(this);
				}
				return this.mUIPnlLeftClient;
			}
		}
		#endregion
		#region Fields
		private UITcMainTabList mUITcMainTabList;
		private UIPnlLeftClient mUIPnlLeftClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITcMainTabList : DXTestControl
	{
		public UITcMainTabList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tcMain";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXTestControl UIXtraTabControlHeaderTabPage
		{
			get
			{
				if ((this.mUIXtraTabControlHeaderTabPage == null))
				{
					this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
					#region Search Criteria
					this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tcMainPageHeader1";
					this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
					this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIXtraTabControlHeaderTabPage;
			}
		}
		public UITabPage5Client UITabPage5Client
		{
			get
			{
				if ((this.mUITabPage5Client == null))
				{
					this.mUITabPage5Client = new UITabPage5Client(this);
				}
				return this.mUITabPage5Client;
			}
		}
		public DXTestControl UIXtraTabControlHeaderTabPage1
		{
			get
			{
				if ((this.mUIXtraTabControlHeaderTabPage1 == null))
				{
					this.mUIXtraTabControlHeaderTabPage1 = new DXTestControl(this);
					#region Search Criteria
					this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.Name] = "tcMainPageHeader0";
					this.mUIXtraTabControlHeaderTabPage1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
					this.mUIXtraTabControlHeaderTabPage1.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIXtraTabControlHeaderTabPage1;
			}
		}
		public UITabPage1Client UITabPage1Client
		{
			get
			{
				if ((this.mUITabPage1Client == null))
				{
					this.mUITabPage1Client = new UITabPage1Client(this);
				}
				return this.mUITabPage1Client;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIXtraTabControlHeaderTabPage;
		private UITabPage5Client mUITabPage5Client;
		private DXTestControl mUIXtraTabControlHeaderTabPage1;
		private UITabPage1Client mUITabPage1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITabPage5Client : DXTestControl
	{
		public UITabPage5Client(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabPage5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UIVGridControl2VerticalGrid UIVGridControl2VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl2VerticalGrid == null))
				{
					this.mUIVGridControl2VerticalGrid = new UIVGridControl2VerticalGrid(this);
				}
				return this.mUIVGridControl2VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl2VerticalGrid mUIVGridControl2VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl2VerticalGrid : DXVerticalGrid
	{
		public UIVGridControl2VerticalGrid(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]multiEditorRow1[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public UIEditorRow2VerticalGridRow UIEditorRow2VerticalGridRow
		{
			get
			{
				if ((this.mUIEditorRow2VerticalGridRow == null))
				{
					this.mUIEditorRow2VerticalGridRow = new UIEditorRow2VerticalGridRow(this);
				}
				return this.mUIEditorRow2VerticalGridRow;
			}
		}
		public DXTextEdit UITextEditEdit1
		{
			get
			{
				if ((this.mUITextEditEdit1 == null))
				{
					this.mUITextEditEdit1 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]editorRow2[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit1.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUITextEditEdit1;
			}
		}
		public DXComboBox UIImageComboBoxEditComboBox
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox == null))
				{
					this.mUIImageComboBoxEditComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit[Row]editorRow5[RecordIndex]0[CellIndex]0";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox;
			}
		}
		public DXComboBox UIImageComboBoxEditComboBox1
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox1 == null))
				{
					this.mUIImageComboBoxEditComboBox1 = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox1.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit[Row]multiEditorRow2[RecordIndex]0[CellIndex]1";
					this.mUIImageComboBoxEditComboBox1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox1.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox1;
			}
		}
		public DXDateTimePicker UIDateEditDateTimeEdit
		{
			get
			{
				if ((this.mUIDateEditDateTimeEdit == null))
				{
					this.mUIDateEditDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "DateEdit[Row]editorRow8[RecordIndex]0[CellIndex]0";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					#endregion
				}
				return this.mUIDateEditDateTimeEdit;
			}
		}
		public DXTextEdit UITextEditEdit2
		{
			get
			{
				if ((this.mUITextEditEdit2 == null))
				{
					this.mUITextEditEdit2 = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit2.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]editorRow6[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit2.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUITextEditEdit2;
			}
		}
		public DXComboBox UIImageComboBoxEditComboBox2
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox2 == null))
				{
					this.mUIImageComboBoxEditComboBox2 = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox2.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit[Row]editorRow9[RecordIndex]0[CellIndex]0";
					this.mUIImageComboBoxEditComboBox2.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox2.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox2;
			}
		}
		public UIMultiEditorRow1VerticalGridRow1 UIMultiEditorRow1VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow1VerticalGridRow == null))
				{
					this.mUIMultiEditorRow1VerticalGridRow = new UIMultiEditorRow1VerticalGridRow1(this);
				}
				return this.mUIMultiEditorRow1VerticalGridRow;
			}
		}
		public UIEditorRow3VerticalGridRow UIEditorRow3VerticalGridRow
		{
			get
			{
				if ((this.mUIEditorRow3VerticalGridRow == null))
				{
					this.mUIEditorRow3VerticalGridRow = new UIEditorRow3VerticalGridRow(this);
				}
				return this.mUIEditorRow3VerticalGridRow;
			}
		}
		public UIEditorRow5VerticalGridRow UIEditorRow5VerticalGridRow
		{
			get
			{
				if ((this.mUIEditorRow5VerticalGridRow == null))
				{
					this.mUIEditorRow5VerticalGridRow = new UIEditorRow5VerticalGridRow(this);
				}
				return this.mUIEditorRow5VerticalGridRow;
			}
		}
		public UIMultiEditorRow2VerticalGridRow1 UIMultiEditorRow2VerticalGridRow
		{
			get
			{
				if ((this.mUIMultiEditorRow2VerticalGridRow == null))
				{
					this.mUIMultiEditorRow2VerticalGridRow = new UIMultiEditorRow2VerticalGridRow1(this);
				}
				return this.mUIMultiEditorRow2VerticalGridRow;
			}
		}
		public UIEditorRow8VerticalGridRow UIEditorRow8VerticalGridRow
		{
			get
			{
				if ((this.mUIEditorRow8VerticalGridRow == null))
				{
					this.mUIEditorRow8VerticalGridRow = new UIEditorRow8VerticalGridRow(this);
				}
				return this.mUIEditorRow8VerticalGridRow;
			}
		}
		public UIEditorRow6VerticalGridRow UIEditorRow6VerticalGridRow
		{
			get
			{
				if ((this.mUIEditorRow6VerticalGridRow == null))
				{
					this.mUIEditorRow6VerticalGridRow = new UIEditorRow6VerticalGridRow(this);
				}
				return this.mUIEditorRow6VerticalGridRow;
			}
		}
		public DXCheckBox UICheckEditCheckBox
		{
			get
			{
				if ((this.mUICheckEditCheckBox == null))
				{
					this.mUICheckEditCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit[Row]editorRow3[RecordIndex]0[CellIndex]0";
					this.mUICheckEditCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckEditCheckBox.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUICheckEditCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		private UIEditorRow2VerticalGridRow mUIEditorRow2VerticalGridRow;
		private DXTextEdit mUITextEditEdit1;
		private DXComboBox mUIImageComboBoxEditComboBox;
		private DXComboBox mUIImageComboBoxEditComboBox1;
		private DXDateTimePicker mUIDateEditDateTimeEdit;
		private DXTextEdit mUITextEditEdit2;
		private DXComboBox mUIImageComboBoxEditComboBox2;
		private UIMultiEditorRow1VerticalGridRow1 mUIMultiEditorRow1VerticalGridRow;
		private UIEditorRow3VerticalGridRow mUIEditorRow3VerticalGridRow;
		private UIEditorRow5VerticalGridRow mUIEditorRow5VerticalGridRow;
		private UIMultiEditorRow2VerticalGridRow1 mUIMultiEditorRow2VerticalGridRow;
		private UIEditorRow8VerticalGridRow mUIEditorRow8VerticalGridRow;
		private UIEditorRow6VerticalGridRow mUIEditorRow6VerticalGridRow;
		private DXCheckBox mUICheckEditCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIEditorRow2VerticalGridRow : DXVerticalGridRow
	{
		public UIEditorRow2VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIDoeEnterprisesDXVerticalGridCell
		{
			get
			{
				if ((this.mUIDoeEnterprisesDXVerticalGridCell == null))
				{
					this.mUIDoeEnterprisesDXVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIDoeEnterprisesDXVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow2[RecordIndex]0[CellIndex]0";
					this.mUIDoeEnterprisesDXVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIDoeEnterprisesDXVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIDoeEnterprisesDXVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIDoeEnterprisesDXVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMultiEditorRow1VerticalGridRow1 : DXVerticalGridRow
	{
		public UIMultiEditorRow1VerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIJohnTestVerticalGridCell
		{
			get
			{
				if ((this.mUIJohnTestVerticalGridCell == null))
				{
					this.mUIJohnTestVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIJohnTestVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow1[RecordIndex]0[CellIndex]0";
					this.mUIJohnTestVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIJohnTestVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIJohnTestVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIJohnTestVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIEditorRow3VerticalGridRow : DXVerticalGridRow
	{
		public UIEditorRow3VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIUncheckedVerticalGridCell
		{
			get
			{
				if ((this.mUIUncheckedVerticalGridCell == null))
				{
					this.mUIUncheckedVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIUncheckedVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow3[RecordIndex]0[CellIndex]0";
					this.mUIUncheckedVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIUncheckedVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIUncheckedVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIUncheckedVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIEditorRow5VerticalGridRow : DXVerticalGridRow
	{
		public UIEditorRow5VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIUnknownVerticalGridCell
		{
			get
			{
				if ((this.mUIUnknownVerticalGridCell == null))
				{
					this.mUIUnknownVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIUnknownVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow5[RecordIndex]0[CellIndex]0";
					this.mUIUnknownVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIUnknownVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIUnknownVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIUnknownVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMultiEditorRow2VerticalGridRow1 : DXVerticalGridRow
	{
		public UIMultiEditorRow2VerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIHighVerticalGridCell
		{
			get
			{
				if ((this.mUIHighVerticalGridCell == null))
				{
					this.mUIHighVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIHighVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "multiEditorRow2[RecordIndex]0[CellIndex]1";
					this.mUIHighVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIHighVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIHighVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIHighVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIEditorRow8VerticalGridRow : DXVerticalGridRow
	{
		public UIEditorRow8VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow8";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem12072012VerticalGridCell
		{
			get
			{
				if ((this.mUIItem12072012VerticalGridCell == null))
				{
					this.mUIItem12072012VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem12072012VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow8[RecordIndex]0[CellIndex]0";
					this.mUIItem12072012VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem12072012VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIItem12072012VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem12072012VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIEditorRow6VerticalGridRow : DXVerticalGridRow
	{
		public UIEditorRow6VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow6";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem5559561566VerticalGridCell
		{
			get
			{
				if ((this.mUIItem5559561566VerticalGridCell == null))
				{
					this.mUIItem5559561566VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem5559561566VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "editorRow6[RecordIndex]0[CellIndex]0";
					this.mUIItem5559561566VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem5559561566VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIItem5559561566VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem5559561566VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITabPage1Client : DXTestControl
	{
		public UITabPage1Client(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabPage1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid11 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid11(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid11 mUIVGridControl1VerticalGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid11 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowModel[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public DXComboBox UIImageComboBoxEditComboBox
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox == null))
				{
					this.mUIImageComboBoxEditComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit[Row]rowCategory[RecordIndex]0[CellIndex]0";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox;
			}
		}
		public DXTextEdit UISpinEditEdit
		{
			get
			{
				if ((this.mUISpinEditEdit == null))
				{
					this.mUISpinEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "SpinEdit[Row]rowCyl[RecordIndex]0[CellIndex]0";
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEditEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUISpinEditEdit;
			}
		}
		public UIRowTransmiss_Speed_CVerticalGridRow UIRowTransmiss_Speed_CVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTransmiss_Speed_CVerticalGridRow == null))
				{
					this.mUIRowTransmiss_Speed_CVerticalGridRow = new UIRowTransmiss_Speed_CVerticalGridRow(this);
				}
				return this.mUIRowTransmiss_Speed_CVerticalGridRow;
			}
		}
		public DXTextEdit UISpinEditEdit1
		{
			get
			{
				if ((this.mUISpinEditEdit1 == null))
				{
					this.mUISpinEditEdit1 = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEditEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "SpinEdit[Row]rowTransmiss_Speed_Count[RecordIndex]0[CellIndex]0";
					this.mUISpinEditEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEditEdit1.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUISpinEditEdit1;
			}
		}
		public DXPopupEdit UICalcEditPopupEdit
		{
			get
			{
				if ((this.mUICalcEditPopupEdit == null))
				{
					this.mUICalcEditPopupEdit = new DXPopupEdit(this);
					#region Search Criteria
					this.mUICalcEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "CalcEdit[Row]rowPrice[RecordIndex]0[CellIndex]0";
					this.mUICalcEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CalcEdit";
					#endregion
				}
				return this.mUICalcEditPopupEdit;
			}
		}
		public DXCheckBox UICheckCheckBox
		{
			get
			{
				if ((this.mUICheckCheckBox == null))
				{
					this.mUICheckCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheckCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "CheckEdit[Row]rowIs_In_Stock[RecordIndex]0[CellIndex]0";
					this.mUICheckCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheckCheckBox.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUICheckCheckBox;
			}
		}
		public DXRadioGroup UIRadioGroupRadioGroup
		{
			get
			{
				if ((this.mUIRadioGroupRadioGroup == null))
				{
					this.mUIRadioGroupRadioGroup = new DXRadioGroup(this);
					#region Search Criteria
					this.mUIRadioGroupRadioGroup.SearchProperties[DXTestControl.PropertyNames.Name] = "RadioGroup[Row]rowTransmiss_Automatic[RecordIndex]0[CellIndex]0";
					this.mUIRadioGroupRadioGroup.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RadioGroup";
					this.mUIRadioGroupRadioGroup.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIRadioGroupRadioGroup;
			}
		}
		public DXDateTimePicker UIDateEditDateTimeEdit
		{
			get
			{
				if ((this.mUIDateEditDateTimeEdit == null))
				{
					this.mUIDateEditDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "DateEdit[Row]rowDelivery_Date[RecordIndex]0[CellIndex]0";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					this.mUIDateEditDateTimeEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIDateEditDateTimeEdit;
			}
		}
		public UIRowCategoryVerticalGridRow UIRowCategoryVerticalGridRow
		{
			get
			{
				if ((this.mUIRowCategoryVerticalGridRow == null))
				{
					this.mUIRowCategoryVerticalGridRow = new UIRowCategoryVerticalGridRow(this);
				}
				return this.mUIRowCategoryVerticalGridRow;
			}
		}
		public UIRowCylVerticalGridRow1 UIRowCylVerticalGridRow
		{
			get
			{
				if ((this.mUIRowCylVerticalGridRow == null))
				{
					this.mUIRowCylVerticalGridRow = new UIRowCylVerticalGridRow1(this);
				}
				return this.mUIRowCylVerticalGridRow;
			}
		}
		public UIRowTransmiss_AutomatVerticalGridRow1 UIRowTransmiss_AutomatVerticalGridRow
		{
			get
			{
				if ((this.mUIRowTransmiss_AutomatVerticalGridRow == null))
				{
					this.mUIRowTransmiss_AutomatVerticalGridRow = new UIRowTransmiss_AutomatVerticalGridRow1(this);
				}
				return this.mUIRowTransmiss_AutomatVerticalGridRow;
			}
		}
		public UIRowPriceVerticalGridRow UIRowPriceVerticalGridRow
		{
			get
			{
				if ((this.mUIRowPriceVerticalGridRow == null))
				{
					this.mUIRowPriceVerticalGridRow = new UIRowPriceVerticalGridRow(this);
				}
				return this.mUIRowPriceVerticalGridRow;
			}
		}
		public UIRowDelivery_DateVerticalGridRow UIRowDelivery_DateVerticalGridRow
		{
			get
			{
				if ((this.mUIRowDelivery_DateVerticalGridRow == null))
				{
					this.mUIRowDelivery_DateVerticalGridRow = new UIRowDelivery_DateVerticalGridRow(this);
				}
				return this.mUIRowDelivery_DateVerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		private DXComboBox mUIImageComboBoxEditComboBox;
		private DXTextEdit mUISpinEditEdit;
		private UIRowTransmiss_Speed_CVerticalGridRow mUIRowTransmiss_Speed_CVerticalGridRow;
		private DXTextEdit mUISpinEditEdit1;
		private DXPopupEdit mUICalcEditPopupEdit;
		private DXCheckBox mUICheckCheckBox;
		private DXRadioGroup mUIRadioGroupRadioGroup;
		private DXDateTimePicker mUIDateEditDateTimeEdit;
		private UIRowCategoryVerticalGridRow mUIRowCategoryVerticalGridRow;
		private UIRowCylVerticalGridRow1 mUIRowCylVerticalGridRow;
		private UIRowTransmiss_AutomatVerticalGridRow1 mUIRowTransmiss_AutomatVerticalGridRow;
		private UIRowPriceVerticalGridRow mUIRowPriceVerticalGridRow;
		private UIRowDelivery_DateVerticalGridRow mUIRowDelivery_DateVerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTransmiss_Speed_CVerticalGridRow : DXVerticalGridRow
	{
		public UIRowTransmiss_Speed_CVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTransmiss_Speed_Count";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem1VerticalGridCell
		{
			get
			{
				if ((this.mUIItem1VerticalGridCell == null))
				{
					this.mUIItem1VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem1VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTransmiss_Speed_Count[RecordIndex]0[CellIndex]0";
					this.mUIItem1VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem1VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIItem1VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem1VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowCategoryVerticalGridRow : DXVerticalGridRow
	{
		public UIRowCategoryVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowCategory";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UITruckVerticalGridCell
		{
			get
			{
				if ((this.mUITruckVerticalGridCell == null))
				{
					this.mUITruckVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUITruckVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowCategory[RecordIndex]0[CellIndex]0";
					this.mUITruckVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUITruckVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUITruckVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUITruckVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowCylVerticalGridRow1 : DXVerticalGridRow
	{
		public UIRowCylVerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowCyl";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem12VerticalGridCell
		{
			get
			{
				if ((this.mUIItem12VerticalGridCell == null))
				{
					this.mUIItem12VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem12VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowCyl[RecordIndex]0[CellIndex]0";
					this.mUIItem12VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem12VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIItem12VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem12VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowTransmiss_AutomatVerticalGridRow1 : DXVerticalGridRow
	{
		public UIRowTransmiss_AutomatVerticalGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTransmiss_Automatic";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UINOVerticalGridCell
		{
			get
			{
				if ((this.mUINOVerticalGridCell == null))
				{
					this.mUINOVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUINOVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTransmiss_Automatic[RecordIndex]0[CellIndex]0";
					this.mUINOVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUINOVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUINOVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUINOVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowPriceVerticalGridRow : DXVerticalGridRow
	{
		public UIRowPriceVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPrice";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem560000VerticalGridCell
		{
			get
			{
				if ((this.mUIItem560000VerticalGridCell == null))
				{
					this.mUIItem560000VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem560000VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPrice[RecordIndex]0[CellIndex]0";
					this.mUIItem560000VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem560000VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIItem560000VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem560000VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowDelivery_DateVerticalGridRow : DXVerticalGridRow
	{
		public UIRowDelivery_DateVerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowDelivery_Date";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIItem11072002VerticalGridCell
		{
			get
			{
				if ((this.mUIItem11072002VerticalGridCell == null))
				{
					this.mUIItem11072002VerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIItem11072002VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowDelivery_Date[RecordIndex]0[CellIndex]0";
					this.mUIItem11072002VerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUIItem11072002VerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIItem11072002VerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIItem11072002VerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPnlLeftClient : DXTestControl
	{
		public UIPnlLeftClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "pnlLeft";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public UIGroupBox3Client UIGroupBox3Client
		{
			get
			{
				if ((this.mUIGroupBox3Client == null))
				{
					this.mUIGroupBox3Client = new UIGroupBox3Client(this);
				}
				return this.mUIGroupBox3Client;
			}
		}
		#endregion
		#region Fields
		private UIGroupBox3Client mUIGroupBox3Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGroupBox3Client : DXTestControl
	{
		public UIGroupBox3Client(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "groupBox3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
			#endregion
		}
		#region Properties
		public DXCheckBox UIRadioButton9CheckBox
		{
			get
			{
				if ((this.mUIRadioButton9CheckBox == null))
				{
					this.mUIRadioButton9CheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUIRadioButton9CheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "radioButton9";
					this.mUIRadioButton9CheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUIRadioButton9CheckBox.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Layout");
					#endregion
				}
				return this.mUIRadioButton9CheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUIRadioButton9CheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraVerticalGridFeatWindow3 : DXWindow
	{
		public UIXtraVerticalGridFeatWindow3()
		{
			#region Search Criteria
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.Name, "The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid", PropertyExpressionOperator.Contains));
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient3 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient3(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		public UIPanelControl1Client3 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client3(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		public UIRibbonControl1Ribbon UIRibbonControl1Ribbon
		{
			get
			{
				if ((this.mUIRibbonControl1Ribbon == null))
				{
					this.mUIRibbonControl1Ribbon = new UIRibbonControl1Ribbon(this);
				}
				return this.mUIRibbonControl1Ribbon;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient3 mUIGcNavigationsClient;
		private UIPanelControl1Client3 mUIPanelControl1Client;
		private UIRibbonControl1Ribbon mUIRibbonControl1Ribbon;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient3 : DXTestControl
	{
		public UIGcNavigationsClient3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl2 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl2(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl2 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl2 : DXTestControl
	{
		public UIAccordionControl1AccordionControl2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIMainAccordionControlGroup2 UIMainAccordionControlGroup
		{
			get
			{
				if ((this.mUIMainAccordionControlGroup == null))
				{
					this.mUIMainAccordionControlGroup = new UIMainAccordionControlGroup2(this);
				}
				return this.mUIMainAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIMainAccordionControlGroup2 mUIMainAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMainAccordionControlGroup2 : DXTestControl
	{
		public UIMainAccordionControlGroup2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Main";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXTestControl UIUnboundDataRowsAccordionControlItem
		{
			get
			{
				if ((this.mUIUnboundDataRowsAccordionControlItem == null))
				{
					this.mUIUnboundDataRowsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIUnboundDataRowsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Unbound Data Rows";
					this.mUIUnboundDataRowsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIUnboundDataRowsAccordionControlItem.WindowTitles.Add("Name=\"Name\">Property Grid");
					#endregion
				}
				return this.mUIUnboundDataRowsAccordionControlItem;
			}
		}
		public DXTestControl UIPropertyGridAccordionControlItem
		{
			get
			{
				if ((this.mUIPropertyGridAccordionControlItem == null))
				{
					this.mUIPropertyGridAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Property Grid";
					this.mUIPropertyGridAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIPropertyGridAccordionControlItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIPropertyGridAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIUnboundDataRowsAccordionControlItem;
		private DXTestControl mUIPropertyGridAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client3 : DXTestControl
	{
		public UIPanelControl1Client3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIGcContainerClient3 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient3(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient3 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient3 : DXTestControl
	{
		public UIGcContainerClient3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIPropertyGridCustom UIPropertyGridCustom
		{
			get
			{
				if ((this.mUIPropertyGridCustom == null))
				{
					this.mUIPropertyGridCustom = new UIPropertyGridCustom(this);
				}
				return this.mUIPropertyGridCustom;
			}
		}
		#endregion
		#region Fields
		private UIPropertyGridCustom mUIPropertyGridCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertyGridCustom : DXTestControl
	{
		public UIPropertyGridCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "PropertyGrid";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGrid";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UISplitContainerControSplitContainerControl UISplitContainerControSplitContainerControl
		{
			get
			{
				if ((this.mUISplitContainerControSplitContainerControl == null))
				{
					this.mUISplitContainerControSplitContainerControl = new UISplitContainerControSplitContainerControl(this);
				}
				return this.mUISplitContainerControSplitContainerControl;
			}
		}
		#endregion
		#region Fields
		private UISplitContainerControSplitContainerControl mUISplitContainerControSplitContainerControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISplitContainerControSplitContainerControl : DXSplitContainerControl
	{
		public UISplitContainerControSplitContainerControl(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "splitContainerControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitContainerControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UISplitGroupPanelClient UISplitGroupPanelClient
		{
			get
			{
				if ((this.mUISplitGroupPanelClient == null))
				{
					this.mUISplitGroupPanelClient = new UISplitGroupPanelClient(this);
				}
				return this.mUISplitGroupPanelClient;
			}
		}
		#endregion
		#region Fields
		private UISplitGroupPanelClient mUISplitGroupPanelClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISplitGroupPanelClient : DXTestControl
	{
		public UISplitGroupPanelClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "splitContainerControl1SplitGroupPanel[1]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIPropertyGridControl1PropertyGrid UIPropertyGridControl1PropertyGrid
		{
			get
			{
				if ((this.mUIPropertyGridControl1PropertyGrid == null))
				{
					this.mUIPropertyGridControl1PropertyGrid = new UIPropertyGridControl1PropertyGrid(this);
				}
				return this.mUIPropertyGridControl1PropertyGrid;
			}
		}
		public DXTestControl UIPropertyGridControl1PropertyDescriptionControl
		{
			get
			{
				if ((this.mUIPropertyGridControl1PropertyDescriptionControl == null))
				{
					this.mUIPropertyGridControl1PropertyDescriptionControl = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridControl1PropertyDescriptionControl.SearchProperties[DXTestControl.PropertyNames.Name] = "propertyGridControl1PropertyDescriptionControl";
					this.mUIPropertyGridControl1PropertyDescriptionControl.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyDescriptionControl";
					this.mUIPropertyGridControl1PropertyDescriptionControl.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIPropertyGridControl1PropertyDescriptionControl;
			}
		}
		#endregion
		#region Fields
		private UIPropertyGridControl1PropertyGrid mUIPropertyGridControl1PropertyGrid;
		private DXTestControl mUIPropertyGridControl1PropertyDescriptionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertyGridControl1PropertyGrid : DXVerticalGrid
	{
		public UIPropertyGridControl1PropertyGrid(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "propertyGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UICategoryAppearancePropertyGridRow UICategoryAppearancePropertyGridRow
		{
			get
			{
				if ((this.mUICategoryAppearancePropertyGridRow == null))
				{
					this.mUICategoryAppearancePropertyGridRow = new UICategoryAppearancePropertyGridRow(this);
				}
				return this.mUICategoryAppearancePropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryAppearancePropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryAppearancePropertyGridCategoryRow == null))
				{
					this.mUICategoryAppearancePropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryAppearancePropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryAppearance";
					this.mUICategoryAppearancePropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryAppearancePropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUICategoryAppearancePropertyGridCategoryRow;
			}
		}
		public UIRowFontPropertyGridRow UIRowFontPropertyGridRow
		{
			get
			{
				if ((this.mUIRowFontPropertyGridRow == null))
				{
					this.mUIRowFontPropertyGridRow = new UIRowFontPropertyGridRow(this);
				}
				return this.mUIRowFontPropertyGridRow;
			}
		}
		public UIRowBorderStylePropertyGridRow UIRowBorderStylePropertyGridRow
		{
			get
			{
				if ((this.mUIRowBorderStylePropertyGridRow == null))
				{
					this.mUIRowBorderStylePropertyGridRow = new UIRowBorderStylePropertyGridRow(this);
				}
				return this.mUIRowBorderStylePropertyGridRow;
			}
		}
		public DXColorEdit UIColorEditColorEdit
		{
			get
			{
				if ((this.mUIColorEditColorEdit == null))
				{
					this.mUIColorEditColorEdit = new DXColorEdit(this);
					#region Search Criteria
					this.mUIColorEditColorEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "ColorEdit[Row]rowBackColor[RecordIndex]0[CellIndex]0";
					this.mUIColorEditColorEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ColorEdit";
					this.mUIColorEditColorEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIColorEditColorEdit;
			}
		}
		public DXPopupEdit UIPGPopupContainerEditPopupEdit
		{
			get
			{
				if ((this.mUIPGPopupContainerEditPopupEdit == null))
				{
					this.mUIPGPopupContainerEditPopupEdit = new DXPopupEdit(this);
					#region Search Criteria
					this.mUIPGPopupContainerEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "PGPopupContainerEdit[Row]rowToolTip[RecordIndex]0[CellIndex]0";
					this.mUIPGPopupContainerEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PGPopupContainerEdit";
					this.mUIPGPopupContainerEditPopupEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIPGPopupContainerEditPopupEdit;
			}
		}
		public UIRowToolTipPropertyGridRow UIRowToolTipPropertyGridRow
		{
			get
			{
				if ((this.mUIRowToolTipPropertyGridRow == null))
				{
					this.mUIRowToolTipPropertyGridRow = new UIRowToolTipPropertyGridRow(this);
				}
				return this.mUIRowToolTipPropertyGridRow;
			}
		}
		public UIRowBackColorPropertyGridRow UIRowBackColorPropertyGridRow
		{
			get
			{
				if ((this.mUIRowBackColorPropertyGridRow == null))
				{
					this.mUIRowBackColorPropertyGridRow = new UIRowBackColorPropertyGridRow(this);
				}
				return this.mUIRowBackColorPropertyGridRow;
			}
		}
		public UIRowUseWaitCursorPropertyGridRow UIRowUseWaitCursorPropertyGridRow
		{
			get
			{
				if ((this.mUIRowUseWaitCursorPropertyGridRow == null))
				{
					this.mUIRowUseWaitCursorPropertyGridRow = new UIRowUseWaitCursorPropertyGridRow(this);
				}
				return this.mUIRowUseWaitCursorPropertyGridRow;
			}
		}
		#endregion
		#region Fields
		private UICategoryAppearancePropertyGridRow mUICategoryAppearancePropertyGridRow;
		private DXVerticalGridRow mUICategoryAppearancePropertyGridCategoryRow;
		private UIRowFontPropertyGridRow mUIRowFontPropertyGridRow;
		private UIRowBorderStylePropertyGridRow mUIRowBorderStylePropertyGridRow;
		private DXColorEdit mUIColorEditColorEdit;
		private DXPopupEdit mUIPGPopupContainerEditPopupEdit;
		private UIRowToolTipPropertyGridRow mUIRowToolTipPropertyGridRow;
		private UIRowBackColorPropertyGridRow mUIRowBackColorPropertyGridRow;
		private UIRowUseWaitCursorPropertyGridRow mUIRowUseWaitCursorPropertyGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryAppearancePropertyGridRow : DXVerticalGridRow
	{
		public UICategoryAppearancePropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryAppearance";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXTestControl UIPropertyGridExpandBuPropertyGridExpandButton
		{
			get
			{
				if ((this.mUIPropertyGridExpandBuPropertyGridExpandButton == null))
				{
					this.mUIPropertyGridExpandBuPropertyGridExpandButton = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryAppearance";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridExpandButton";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIPropertyGridExpandBuPropertyGridExpandButton;
			}
		}
		public DXVerticalGridHeaderCell UIAppearancePropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIAppearancePropertyGridHeaderCell == null))
				{
					this.mUIAppearancePropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIAppearancePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryAppearance[Name]Appearance";
					this.mUIAppearancePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIAppearancePropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIAppearancePropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIPropertyGridExpandBuPropertyGridExpandButton;
		private DXVerticalGridHeaderCell mUIAppearancePropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowFontPropertyGridRow : DXVerticalGridRow
	{
		public UIRowFontPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFont";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXTestControl UIPropertyGridExpandBuPropertyGridExpandButton
		{
			get
			{
				if ((this.mUIPropertyGridExpandBuPropertyGridExpandButton == null))
				{
					this.mUIPropertyGridExpandBuPropertyGridExpandButton = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFont";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridExpandButton";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIPropertyGridExpandBuPropertyGridExpandButton;
			}
		}
		public DXVerticalGridHeaderCell UIFontPropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIFontPropertyGridHeaderCell == null))
				{
					this.mUIFontPropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIFontPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFont[Name]Font";
					this.mUIFontPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIFontPropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIFontPropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIPropertyGridExpandBuPropertyGridExpandButton;
		private DXVerticalGridHeaderCell mUIFontPropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowBorderStylePropertyGridRow : DXVerticalGridRow
	{
		public UIRowBorderStylePropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBorderStyle";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIBorderStylePropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIBorderStylePropertyGridHeaderCell == null))
				{
					this.mUIBorderStylePropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIBorderStylePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBorderStyle[Name]BorderStyle";
					this.mUIBorderStylePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIBorderStylePropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIBorderStylePropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIBorderStylePropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowToolTipPropertyGridRow : DXVerticalGridRow
	{
		public UIRowToolTipPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowToolTip";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UITestPropertyGridCell
		{
			get
			{
				if ((this.mUITestPropertyGridCell == null))
				{
					this.mUITestPropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUITestPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowToolTipCell";
					this.mUITestPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUITestPropertyGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUITestPropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUITestPropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowBackColorPropertyGridRow : DXVerticalGridRow
	{
		public UIRowBackColorPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBackColor";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIWhitePropertyGridCell
		{
			get
			{
				if ((this.mUIWhitePropertyGridCell == null))
				{
					this.mUIWhitePropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIWhitePropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBackColorCell";
					this.mUIWhitePropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUIWhitePropertyGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIWhitePropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIWhitePropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowUseWaitCursorPropertyGridRow : DXVerticalGridRow
	{
		public UIRowUseWaitCursorPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowUseWaitCursor";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIUseWaitCursorPropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIUseWaitCursorPropertyGridHeaderCell == null))
				{
					this.mUIUseWaitCursorPropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIUseWaitCursorPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowUseWaitCursor[Name]UseWaitCursor";
					this.mUIUseWaitCursorPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIUseWaitCursorPropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIUseWaitCursorPropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIUseWaitCursorPropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRibbonControl1Ribbon : DXRibbon
	{
		public UIRibbonControl1Ribbon(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "ribbonControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIRpMainRibbonPage UIRpMainRibbonPage
		{
			get
			{
				if ((this.mUIRpMainRibbonPage == null))
				{
					this.mUIRpMainRibbonPage = new UIRpMainRibbonPage(this);
				}
				return this.mUIRpMainRibbonPage;
			}
		}
		#endregion
		#region Fields
		private UIRpMainRibbonPage mUIRpMainRibbonPage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRpMainRibbonPage : DXRibbonPage
	{
		public UIRpMainRibbonPage(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpMain";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPage";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UIRpgAppearanceRibbonPageGroup UIRpgAppearanceRibbonPageGroup
		{
			get
			{
				if ((this.mUIRpgAppearanceRibbonPageGroup == null))
				{
					this.mUIRpgAppearanceRibbonPageGroup = new UIRpgAppearanceRibbonPageGroup(this);
				}
				return this.mUIRpgAppearanceRibbonPageGroup;
			}
		}
		#endregion
		#region Fields
		private UIRpgAppearanceRibbonPageGroup mUIRpgAppearanceRibbonPageGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRpgAppearanceRibbonPageGroup : DXRibbonPageGroup
	{
		public UIRpgAppearanceRibbonPageGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rpgAppearance";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonPageGroup";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public UISkinsRibbonGallery UISkinsRibbonGallery
		{
			get
			{
				if ((this.mUISkinsRibbonGallery == null))
				{
					this.mUISkinsRibbonGallery = new UISkinsRibbonGallery(this);
				}
				return this.mUISkinsRibbonGallery;
			}
		}
		#endregion
		#region Fields
		private UISkinsRibbonGallery mUISkinsRibbonGallery;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISkinsRibbonGallery : DXTestControl
	{
		public UISkinsRibbonGallery(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Skins";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGallery";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
			#endregion
		}
		#region Properties
		public DXButton UIRibbonGalleryDropDowButton
		{
			get
			{
				if ((this.mUIRibbonGalleryDropDowButton == null))
				{
					this.mUIRibbonGalleryDropDowButton = new DXButton(this);
					#region Search Criteria
					this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.Name] = "RibbonGalleryDropDownButton";
					this.mUIRibbonGalleryDropDowButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RibbonGalleryDropDownButton";
					this.mUIRibbonGalleryDropDowButton.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Property Grid");
					#endregion
				}
				return this.mUIRibbonGalleryDropDowButton;
			}
		}
		#endregion
		#region Fields
		private DXButton mUIRibbonGalleryDropDowButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraVerticalGridFeatWindow4 : DXWindow
	{
		public UIXtraVerticalGridFeatWindow4()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
			#endregion
		}
		#region Properties
		public UIPanelControl1Client4 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client4(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIPanelControl1Client4 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client4 : DXTestControl
	{
		public UIPanelControl1Client4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
			#endregion
		}
		#region Properties
		public UIGcContainerClient4 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient4(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient4 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient4 : DXTestControl
	{
		public UIGcContainerClient4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
			#endregion
		}
		#region Properties
		public UIUnboundFieldCustom UIUnboundFieldCustom
		{
			get
			{
				if ((this.mUIUnboundFieldCustom == null))
				{
					this.mUIUnboundFieldCustom = new UIUnboundFieldCustom(this);
				}
				return this.mUIUnboundFieldCustom;
			}
		}
		#endregion
		#region Fields
		private UIUnboundFieldCustom mUIUnboundFieldCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIUnboundFieldCustom : DXTestControl
	{
		public UIUnboundFieldCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "UnboundField";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "UnboundField";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
			#endregion
		}
		#region Properties
		public UIVGridControl1VerticalGrid12 UIVGridControl1VerticalGrid
		{
			get
			{
				if ((this.mUIVGridControl1VerticalGrid == null))
				{
					this.mUIVGridControl1VerticalGrid = new UIVGridControl1VerticalGrid12(this);
				}
				return this.mUIVGridControl1VerticalGrid;
			}
		}
		public UIPanelControl1Client5 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client5(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIVGridControl1VerticalGrid12 mUIVGridControl1VerticalGrid;
		private UIPanelControl1Client5 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIVGridControl1VerticalGrid12 : DXVerticalGrid
	{
		public UIVGridControl1VerticalGrid12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "vGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit[Row]rowFirst_Name[RecordIndex]0[CellIndex]0";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		public UIRow13VerticalGridRow UIRow13VerticalGridRow
		{
			get
			{
				if ((this.mUIRow13VerticalGridRow == null))
				{
					this.mUIRow13VerticalGridRow = new UIRow13VerticalGridRow(this);
				}
				return this.mUIRow13VerticalGridRow;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		private UIRow13VerticalGridRow mUIRow13VerticalGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRow13VerticalGridRow : DXVerticalGridRow
	{
		public UIRow13VerticalGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "row13";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UINancyTestDavolioVerticalGridCell
		{
			get
			{
				if ((this.mUINancyTestDavolioVerticalGridCell == null))
				{
					this.mUINancyTestDavolioVerticalGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUINancyTestDavolioVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "row13[RecordIndex]0[CellIndex]0";
					this.mUINancyTestDavolioVerticalGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VerticalGridCell";
					this.mUINancyTestDavolioVerticalGridCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Unbound Data Rows");
					#endregion
				}
				return this.mUINancyTestDavolioVerticalGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUINancyTestDavolioVerticalGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client5 : DXTestControl
	{
		public UIPanelControl1Client5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			#endregion
		}
		#region Properties
		public DXComboBox UICbNameOrderComboBox
		{
			get
			{
				if ((this.mUICbNameOrderComboBox == null))
				{
					this.mUICbNameOrderComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUICbNameOrderComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbNameOrder";
					this.mUICbNameOrderComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxEdit";
					#endregion
				}
				return this.mUICbNameOrderComboBox;
			}
		}
		#endregion
		#region Fields
		private DXComboBox mUICbNameOrderComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraVerticalGridFeatWindow5 : DXWindow
	{
		public UIXtraVerticalGridFeatWindow5()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UIPanelControl1Client6 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client6(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIPanelControl1Client6 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client6 : DXTestControl
	{
		public UIPanelControl1Client6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UIGcContainerClient5 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient5(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient5 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient5 : DXTestControl
	{
		public UIGcContainerClient5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UIFixedRowsCustom UIFixedRowsCustom
		{
			get
			{
				if ((this.mUIFixedRowsCustom == null))
				{
					this.mUIFixedRowsCustom = new UIFixedRowsCustom(this);
				}
				return this.mUIFixedRowsCustom;
			}
		}
		#endregion
		#region Fields
		private UIFixedRowsCustom mUIFixedRowsCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIFixedRowsCustom : DXTestControl
	{
		public UIFixedRowsCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedRows";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedRows";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UIPropertyGridControl1PropertyGrid1 UIPropertyGridControl1PropertyGrid
		{
			get
			{
				if ((this.mUIPropertyGridControl1PropertyGrid == null))
				{
					this.mUIPropertyGridControl1PropertyGrid = new UIPropertyGridControl1PropertyGrid1(this);
				}
				return this.mUIPropertyGridControl1PropertyGrid;
			}
		}
		public UIPanelControl1Client7 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client7(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIPropertyGridControl1PropertyGrid1 mUIPropertyGridControl1PropertyGrid;
		private UIPanelControl1Client7 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertyGridControl1PropertyGrid1 : DXVerticalGrid
	{
		public UIPropertyGridControl1PropertyGrid1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "propertyGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UIRowBackColorPropertyGridRow1 UIRowBackColorPropertyGridRow
		{
			get
			{
				if ((this.mUIRowBackColorPropertyGridRow == null))
				{
					this.mUIRowBackColorPropertyGridRow = new UIRowBackColorPropertyGridRow1(this);
				}
				return this.mUIRowBackColorPropertyGridRow;
			}
		}
		public UIRowFontPropertyGridRow1 UIRowFontPropertyGridRow
		{
			get
			{
				if ((this.mUIRowFontPropertyGridRow == null))
				{
					this.mUIRowFontPropertyGridRow = new UIRowFontPropertyGridRow1(this);
				}
				return this.mUIRowFontPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryAppearancePropertyGridRow
		{
			get
			{
				if ((this.mUICategoryAppearancePropertyGridRow == null))
				{
					this.mUICategoryAppearancePropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryAppearancePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryAppearance";
					this.mUICategoryAppearancePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUICategoryAppearancePropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryAppearancePropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryAppearancePropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryAppearancePropertyGridCategoryRow == null))
				{
					this.mUICategoryAppearancePropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryAppearancePropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryAppearance";
					this.mUICategoryAppearancePropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryAppearancePropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryAppearancePropertyGridCategoryRow;
			}
		}
		public UIRowProperties_PicturPropertyGridRow UIRowProperties_PicturPropertyGridRow
		{
			get
			{
				if ((this.mUIRowProperties_PicturPropertyGridRow == null))
				{
					this.mUIRowProperties_PicturPropertyGridRow = new UIRowProperties_PicturPropertyGridRow(this);
				}
				return this.mUIRowProperties_PicturPropertyGridRow;
			}
		}
		public DXScrollBar UIVGridVertScrollBarScrollBarControl
		{
			get
			{
				if ((this.mUIVGridVertScrollBarScrollBarControl == null))
				{
					this.mUIVGridVertScrollBarScrollBarControl = new DXScrollBar(this);
					#region Search Criteria
					this.mUIVGridVertScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.Name] = "propertyGridControl1VGridVertScrollBar";
					this.mUIVGridVertScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VGridVertScrollBar";
					this.mUIVGridVertScrollBarScrollBarControl.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIVGridVertScrollBarScrollBarControl;
			}
		}
		public UIRowImagePropertyGridRow UIRowImagePropertyGridRow
		{
			get
			{
				if ((this.mUIRowImagePropertyGridRow == null))
				{
					this.mUIRowImagePropertyGridRow = new UIRowImagePropertyGridRow(this);
				}
				return this.mUIRowImagePropertyGridRow;
			}
		}
		public UICategoryBarManagerPropertyGridRow UICategoryBarManagerPropertyGridRow
		{
			get
			{
				if ((this.mUICategoryBarManagerPropertyGridRow == null))
				{
					this.mUICategoryBarManagerPropertyGridRow = new UICategoryBarManagerPropertyGridRow(this);
				}
				return this.mUICategoryBarManagerPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryBarManagerPropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryBarManagerPropertyGridCategoryRow == null))
				{
					this.mUICategoryBarManagerPropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryBarManagerPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryBarManager";
					this.mUICategoryBarManagerPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryBarManagerPropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryBarManagerPropertyGridCategoryRow;
			}
		}
		public DXVerticalGridRow UIRowMenuManagerPropertyGridRow
		{
			get
			{
				if ((this.mUIRowMenuManagerPropertyGridRow == null))
				{
					this.mUIRowMenuManagerPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowMenuManagerPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowMenuManager";
					this.mUIRowMenuManagerPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowMenuManagerPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowMenuManagerPropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowProperties_SizeMoPropertyGridRow
		{
			get
			{
				if ((this.mUIRowProperties_SizeMoPropertyGridRow == null))
				{
					this.mUIRowProperties_SizeMoPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowProperties_SizeMoPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowProperties_SizeMode";
					this.mUIRowProperties_SizeMoPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowProperties_SizeMoPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowProperties_SizeMoPropertyGridRow;
			}
		}
		public UIRowBorderStylePropertyGridRow1 UIRowBorderStylePropertyGridRow
		{
			get
			{
				if ((this.mUIRowBorderStylePropertyGridRow == null))
				{
					this.mUIRowBorderStylePropertyGridRow = new UIRowBorderStylePropertyGridRow1(this);
				}
				return this.mUIRowBorderStylePropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowCursorPropertyGridRow
		{
			get
			{
				if ((this.mUIRowCursorPropertyGridRow == null))
				{
					this.mUIRowCursorPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowCursorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowCursor";
					this.mUIRowCursorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowCursorPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowCursorPropertyGridRow;
			}
		}
		public UIRowPropertiesPropertyGridRow UIRowPropertiesPropertyGridRow
		{
			get
			{
				if ((this.mUIRowPropertiesPropertyGridRow == null))
				{
					this.mUIRowPropertiesPropertyGridRow = new UIRowPropertiesPropertyGridRow(this);
				}
				return this.mUIRowPropertiesPropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowSizePropertyGridRow
		{
			get
			{
				if ((this.mUIRowSizePropertyGridRow == null))
				{
					this.mUIRowSizePropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowSizePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowSize";
					this.mUIRowSizePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowSizePropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowSizePropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowBackgroundImagePropertyGridRow
		{
			get
			{
				if ((this.mUIRowBackgroundImagePropertyGridRow == null))
				{
					this.mUIRowBackgroundImagePropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowBackgroundImagePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBackgroundImage";
					this.mUIRowBackgroundImagePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowBackgroundImagePropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowBackgroundImagePropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowTabIndexPropertyGridRow
		{
			get
			{
				if ((this.mUIRowTabIndexPropertyGridRow == null))
				{
					this.mUIRowTabIndexPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowTabIndexPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowTabIndex";
					this.mUIRowTabIndexPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowTabIndexPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowTabIndexPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryBehaviorPropertyGridRow
		{
			get
			{
				if ((this.mUICategoryBehaviorPropertyGridRow == null))
				{
					this.mUICategoryBehaviorPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryBehaviorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryBehavior";
					this.mUICategoryBehaviorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUICategoryBehaviorPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryBehaviorPropertyGridRow;
			}
		}
		public UIPropertyGridControl1Window UIPropertyGridControl1Window
		{
			get
			{
				if ((this.mUIPropertyGridControl1Window == null))
				{
					this.mUIPropertyGridControl1Window = new UIPropertyGridControl1Window(this);
				}
				return this.mUIPropertyGridControl1Window;
			}
		}
		public DXVerticalGridRow UICategoryDataPropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryDataPropertyGridCategoryRow == null))
				{
					this.mUICategoryDataPropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryDataPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryData";
					this.mUICategoryDataPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryDataPropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryDataPropertyGridCategoryRow;
			}
		}
		public UIRowLocationPropertyGridRow UIRowLocationPropertyGridRow
		{
			get
			{
				if ((this.mUIRowLocationPropertyGridRow == null))
				{
					this.mUIRowLocationPropertyGridRow = new UIRowLocationPropertyGridRow(this);
				}
				return this.mUIRowLocationPropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowImeModePropertyGridRow
		{
			get
			{
				if ((this.mUIRowImeModePropertyGridRow == null))
				{
					this.mUIRowImeModePropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowImeModePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowImeMode";
					this.mUIRowImeModePropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowImeModePropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowImeModePropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowBackgroundImageLaPropertyGridRow
		{
			get
			{
				if ((this.mUIRowBackgroundImageLaPropertyGridRow == null))
				{
					this.mUIRowBackgroundImageLaPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowBackgroundImageLaPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBackgroundImageLayout";
					this.mUIRowBackgroundImageLaPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowBackgroundImageLaPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowBackgroundImageLaPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryBehaviorPropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryBehaviorPropertyGridCategoryRow == null))
				{
					this.mUICategoryBehaviorPropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryBehaviorPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryBehavior";
					this.mUICategoryBehaviorPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryBehaviorPropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryBehaviorPropertyGridCategoryRow;
			}
		}
		public DXVerticalGridRow UIRowRightToLeftPropertyGridRow
		{
			get
			{
				if ((this.mUIRowRightToLeftPropertyGridRow == null))
				{
					this.mUIRowRightToLeftPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowRightToLeftPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowRightToLeft";
					this.mUIRowRightToLeftPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUIRowRightToLeftPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIRowRightToLeftPropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowUseWaitCursorPropertyGridRow
		{
			get
			{
				if ((this.mUIRowUseWaitCursorPropertyGridRow == null))
				{
					this.mUIRowUseWaitCursorPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowUseWaitCursorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowUseWaitCursor";
					this.mUIRowUseWaitCursorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					#endregion
				}
				return this.mUIRowUseWaitCursorPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryDataPropertyGridRow
		{
			get
			{
				if ((this.mUICategoryDataPropertyGridRow == null))
				{
					this.mUICategoryDataPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryDataPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryData";
					this.mUICategoryDataPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUICategoryDataPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryDataPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryLayoutPropertyGridRow
		{
			get
			{
				if ((this.mUICategoryLayoutPropertyGridRow == null))
				{
					this.mUICategoryLayoutPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryLayoutPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryLayout";
					this.mUICategoryLayoutPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUICategoryLayoutPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryLayoutPropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowAnchorPropertyGridRow
		{
			get
			{
				if ((this.mUIRowAnchorPropertyGridRow == null))
				{
					this.mUIRowAnchorPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowAnchorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowAnchor";
					this.mUIRowAnchorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					#endregion
				}
				return this.mUIRowAnchorPropertyGridRow;
			}
		}
		public DXVerticalGridRow UIRowForeColorPropertyGridRow
		{
			get
			{
				if ((this.mUIRowForeColorPropertyGridRow == null))
				{
					this.mUIRowForeColorPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUIRowForeColorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "rowForeColor";
					this.mUIRowForeColorPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					#endregion
				}
				return this.mUIRowForeColorPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryLayoutPropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryLayoutPropertyGridCategoryRow == null))
				{
					this.mUICategoryLayoutPropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryLayoutPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryLayout";
					this.mUICategoryLayoutPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryLayoutPropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryLayoutPropertyGridCategoryRow;
			}
		}
		public DXVerticalGridRow UICategoryPropertiesPropertyGridRow
		{
			get
			{
				if ((this.mUICategoryPropertiesPropertyGridRow == null))
				{
					this.mUICategoryPropertiesPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryPropertiesPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryProperties";
					this.mUICategoryPropertiesPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUICategoryPropertiesPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryPropertiesPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryToolTipPropertyGridRow
		{
			get
			{
				if ((this.mUICategoryToolTipPropertyGridRow == null))
				{
					this.mUICategoryToolTipPropertyGridRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryToolTipPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryToolTip";
					this.mUICategoryToolTipPropertyGridRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
					this.mUICategoryToolTipPropertyGridRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryToolTipPropertyGridRow;
			}
		}
		public DXVerticalGridRow UICategoryPropertiesPropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryPropertiesPropertyGridCategoryRow == null))
				{
					this.mUICategoryPropertiesPropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryPropertiesPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryProperties";
					this.mUICategoryPropertiesPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryPropertiesPropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryPropertiesPropertyGridCategoryRow;
			}
		}
		public DXVerticalGridRow UICategoryToolTipPropertyGridCategoryRow
		{
			get
			{
				if ((this.mUICategoryToolTipPropertyGridCategoryRow == null))
				{
					this.mUICategoryToolTipPropertyGridCategoryRow = new DXVerticalGridRow(this);
					#region Search Criteria
					this.mUICategoryToolTipPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryToolTip";
					this.mUICategoryToolTipPropertyGridCategoryRow.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCategoryRow";
					this.mUICategoryToolTipPropertyGridCategoryRow.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICategoryToolTipPropertyGridCategoryRow;
			}
		}
		#endregion
		#region Fields
		private UIRowBackColorPropertyGridRow1 mUIRowBackColorPropertyGridRow;
		private UIRowFontPropertyGridRow1 mUIRowFontPropertyGridRow;
		private DXVerticalGridRow mUICategoryAppearancePropertyGridRow;
		private DXVerticalGridRow mUICategoryAppearancePropertyGridCategoryRow;
		private UIRowProperties_PicturPropertyGridRow mUIRowProperties_PicturPropertyGridRow;
		private DXScrollBar mUIVGridVertScrollBarScrollBarControl;
		private UIRowImagePropertyGridRow mUIRowImagePropertyGridRow;
		private UICategoryBarManagerPropertyGridRow mUICategoryBarManagerPropertyGridRow;
		private DXVerticalGridRow mUICategoryBarManagerPropertyGridCategoryRow;
		private DXVerticalGridRow mUIRowMenuManagerPropertyGridRow;
		private DXVerticalGridRow mUIRowProperties_SizeMoPropertyGridRow;
		private UIRowBorderStylePropertyGridRow1 mUIRowBorderStylePropertyGridRow;
		private DXVerticalGridRow mUIRowCursorPropertyGridRow;
		private UIRowPropertiesPropertyGridRow mUIRowPropertiesPropertyGridRow;
		private DXVerticalGridRow mUIRowSizePropertyGridRow;
		private DXVerticalGridRow mUIRowBackgroundImagePropertyGridRow;
		private DXVerticalGridRow mUIRowTabIndexPropertyGridRow;
		private DXVerticalGridRow mUICategoryBehaviorPropertyGridRow;
		private UIPropertyGridControl1Window mUIPropertyGridControl1Window;
		private DXVerticalGridRow mUICategoryDataPropertyGridCategoryRow;
		private UIRowLocationPropertyGridRow mUIRowLocationPropertyGridRow;
		private DXVerticalGridRow mUIRowImeModePropertyGridRow;
		private DXVerticalGridRow mUIRowBackgroundImageLaPropertyGridRow;
		private DXVerticalGridRow mUICategoryBehaviorPropertyGridCategoryRow;
		private DXVerticalGridRow mUIRowRightToLeftPropertyGridRow;
		private DXVerticalGridRow mUIRowUseWaitCursorPropertyGridRow;
		private DXVerticalGridRow mUICategoryDataPropertyGridRow;
		private DXVerticalGridRow mUICategoryLayoutPropertyGridRow;
		private DXVerticalGridRow mUIRowAnchorPropertyGridRow;
		private DXVerticalGridRow mUIRowForeColorPropertyGridRow;
		private DXVerticalGridRow mUICategoryLayoutPropertyGridCategoryRow;
		private DXVerticalGridRow mUICategoryPropertiesPropertyGridRow;
		private DXVerticalGridRow mUICategoryToolTipPropertyGridRow;
		private DXVerticalGridRow mUICategoryPropertiesPropertyGridCategoryRow;
		private DXVerticalGridRow mUICategoryToolTipPropertyGridCategoryRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowBackColorPropertyGridRow1 : DXVerticalGridRow
	{
		public UIRowBackColorPropertyGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBackColor";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXTestControl UIPropertyGridRowEdgePropertyGridRowEdge
		{
			get
			{
				if ((this.mUIPropertyGridRowEdgePropertyGridRowEdge == null))
				{
					this.mUIPropertyGridRowEdgePropertyGridRowEdge = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridRowEdgePropertyGridRowEdge.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBackColor";
					this.mUIPropertyGridRowEdgePropertyGridRowEdge.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRowEdge";
					this.mUIPropertyGridRowEdgePropertyGridRowEdge.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIPropertyGridRowEdgePropertyGridRowEdge;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIPropertyGridRowEdgePropertyGridRowEdge;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowFontPropertyGridRow1 : DXVerticalGridRow
	{
		public UIRowFontPropertyGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFont";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIFontPropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIFontPropertyGridHeaderCell == null))
				{
					this.mUIFontPropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIFontPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFont[Name]Font";
					this.mUIFontPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIFontPropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIFontPropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIFontPropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowProperties_PicturPropertyGridRow : DXVerticalGridRow
	{
		public UIRowProperties_PicturPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowProperties_PictureAlignment";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIPictureAlignmentPropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIPictureAlignmentPropertyGridHeaderCell == null))
				{
					this.mUIPictureAlignmentPropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIPictureAlignmentPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowProperties_PictureAlignment[Name]PictureAlignment";
					this.mUIPictureAlignmentPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIPictureAlignmentPropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIPictureAlignmentPropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIPictureAlignmentPropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowImagePropertyGridRow : DXVerticalGridRow
	{
		public UIRowImagePropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowImage";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIImagePropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIImagePropertyGridHeaderCell == null))
				{
					this.mUIImagePropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIImagePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowImage[Name]Image";
					this.mUIImagePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIImagePropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIImagePropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIImagePropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICategoryBarManagerPropertyGridRow : DXVerticalGridRow
	{
		public UICategoryBarManagerPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryBarManager";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIBarManagerPropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIBarManagerPropertyGridHeaderCell == null))
				{
					this.mUIBarManagerPropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIBarManagerPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryBarManager[Name]BarManager";
					this.mUIBarManagerPropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIBarManagerPropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIBarManagerPropertyGridHeaderCell;
			}
		}
		public DXTestControl UIPropertyGridExpandBuPropertyGridExpandButton
		{
			get
			{
				if ((this.mUIPropertyGridExpandBuPropertyGridExpandButton == null))
				{
					this.mUIPropertyGridExpandBuPropertyGridExpandButton = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryBarManager";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridExpandButton";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIPropertyGridExpandBuPropertyGridExpandButton;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIBarManagerPropertyGridHeaderCell;
		private DXTestControl mUIPropertyGridExpandBuPropertyGridExpandButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowBorderStylePropertyGridRow1 : DXVerticalGridRow
	{
		public UIRowBorderStylePropertyGridRow1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBorderStyle";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXVerticalGridHeaderCell UIBorderStylePropertyGridHeaderCell
		{
			get
			{
				if ((this.mUIBorderStylePropertyGridHeaderCell == null))
				{
					this.mUIBorderStylePropertyGridHeaderCell = new DXVerticalGridHeaderCell(this);
					#region Search Criteria
					this.mUIBorderStylePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBorderStyle[Name]BorderStyle";
					this.mUIBorderStylePropertyGridHeaderCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridHeaderCell";
					this.mUIBorderStylePropertyGridHeaderCell.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIBorderStylePropertyGridHeaderCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridHeaderCell mUIBorderStylePropertyGridHeaderCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowPropertiesPropertyGridRow : DXVerticalGridRow
	{
		public UIRowPropertiesPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowProperties";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXTestControl UIPropertyGridExpandBuPropertyGridExpandButton
		{
			get
			{
				if ((this.mUIPropertyGridExpandBuPropertyGridExpandButton == null))
				{
					this.mUIPropertyGridExpandBuPropertyGridExpandButton = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.Name] = "rowProperties";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridExpandButton";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIPropertyGridExpandBuPropertyGridExpandButton;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIPropertyGridExpandBuPropertyGridExpandButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertyGridControl1Window : DXWindow
	{
		public UIPropertyGridControl1Window(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "propertyGridControl1CustomizationForm";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CustomizationForm";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UITabControl1TabList1 UITabControl1TabList
		{
			get
			{
				if ((this.mUITabControl1TabList == null))
				{
					this.mUITabControl1TabList = new UITabControl1TabList1(this);
				}
				return this.mUITabControl1TabList;
			}
		}
		#endregion
		#region Fields
		private UITabControl1TabList1 mUITabControl1TabList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITabControl1TabList1 : DXTestControl
	{
		public UITabControl1TabList1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UITpRowsClient1 UITpRowsClient
		{
			get
			{
				if ((this.mUITpRowsClient == null))
				{
					this.mUITpRowsClient = new UITpRowsClient1(this);
				}
				return this.mUITpRowsClient;
			}
		}
		public UITpCategoriesClient1 UITpCategoriesClient
		{
			get
			{
				if ((this.mUITpCategoriesClient == null))
				{
					this.mUITpCategoriesClient = new UITpCategoriesClient1(this);
				}
				return this.mUITpCategoriesClient;
			}
		}
		public DXTestControl UIXtraTabControlHeaderTabPage
		{
			get
			{
				if ((this.mUIXtraTabControlHeaderTabPage == null))
				{
					this.mUIXtraTabControlHeaderTabPage = new DXTestControl(this);
					#region Search Criteria
					this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.Name] = "tabControl1PageHeader0";
					this.mUIXtraTabControlHeaderTabPage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabControlHeader";
					this.mUIXtraTabControlHeaderTabPage.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIXtraTabControlHeaderTabPage;
			}
		}
		#endregion
		#region Fields
		private UITpRowsClient1 mUITpRowsClient;
		private UITpCategoriesClient1 mUITpCategoriesClient;
		private DXTestControl mUIXtraTabControlHeaderTabPage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITpRowsClient1 : DXTestControl
	{
		public UITpRowsClient1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpRows";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UILbRowsList1 UILbRowsList
		{
			get
			{
				if ((this.mUILbRowsList == null))
				{
					this.mUILbRowsList = new UILbRowsList1(this);
				}
				return this.mUILbRowsList;
			}
		}
		#endregion
		#region Fields
		private UILbRowsList1 mUILbRowsList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILbRowsList1 : DXListBox
	{
		public UILbRowsList1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "lbRows";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowsListBox";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIBorderStyleListItem
		{
			get
			{
				if ((this.mUIBorderStyleListItem == null))
				{
					this.mUIBorderStyleListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIBorderStyleListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "rowBorderStyle";
					this.mUIBorderStyleListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowCustomizationListBoxItem";
					this.mUIBorderStyleListItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIBorderStyleListItem;
			}
		}
		public DXListBoxItem UIFontListItem
		{
			get
			{
				if ((this.mUIFontListItem == null))
				{
					this.mUIFontListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIFontListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "rowFont";
					this.mUIFontListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowCustomizationListBoxItem";
					this.mUIFontListItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIFontListItem;
			}
		}
		public DXScrollBar UIVScrollBarScrollBarControl
		{
			get
			{
				if ((this.mUIVScrollBarScrollBarControl == null))
				{
					this.mUIVScrollBarScrollBarControl = new DXScrollBar(this);
					#region Search Criteria
					this.mUIVScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.Name] = "lbRowsVScrollBar";
					this.mUIVScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.ClassName] = "VScrollBar";
					this.mUIVScrollBarScrollBarControl.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIVScrollBarScrollBarControl;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIBorderStyleListItem;
		private DXListBoxItem mUIFontListItem;
		private DXScrollBar mUIVScrollBarScrollBarControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITpCategoriesClient1 : DXTestControl
	{
		public UITpCategoriesClient1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "tpCategories";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "XtraTabPage";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public UILbCategoriesList1 UILbCategoriesList
		{
			get
			{
				if ((this.mUILbCategoriesList == null))
				{
					this.mUILbCategoriesList = new UILbCategoriesList1(this);
				}
				return this.mUILbCategoriesList;
			}
		}
		#endregion
		#region Fields
		private UILbCategoriesList1 mUILbCategoriesList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILbCategoriesList1 : DXListBox
	{
		public UILbCategoriesList1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "lbCategories";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "RowsListBox";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIAppearanceListItem
		{
			get
			{
				if ((this.mUIAppearanceListItem == null))
				{
					this.mUIAppearanceListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIAppearanceListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryAppearance";
					this.mUIAppearanceListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUIAppearanceListItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIAppearanceListItem;
			}
		}
		public DXListBoxItem UIDataListItem
		{
			get
			{
				if ((this.mUIDataListItem == null))
				{
					this.mUIDataListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIDataListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryData";
					this.mUIDataListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUIDataListItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIDataListItem;
			}
		}
		public DXListBoxItem UILayoutListItem
		{
			get
			{
				if ((this.mUILayoutListItem == null))
				{
					this.mUILayoutListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUILayoutListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryLayout";
					this.mUILayoutListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUILayoutListItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUILayoutListItem;
			}
		}
		public DXListBoxItem UIPropertiesListItem
		{
			get
			{
				if ((this.mUIPropertiesListItem == null))
				{
					this.mUIPropertiesListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIPropertiesListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryProperties";
					this.mUIPropertiesListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUIPropertiesListItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIPropertiesListItem;
			}
		}
		public DXListBoxItem UIToolTipListItem
		{
			get
			{
				if ((this.mUIToolTipListItem == null))
				{
					this.mUIToolTipListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIToolTipListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "categoryToolTip";
					this.mUIToolTipListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CategoryRowCustomizationListBoxItem";
					this.mUIToolTipListItem.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIToolTipListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIAppearanceListItem;
		private DXListBoxItem mUIDataListItem;
		private DXListBoxItem mUILayoutListItem;
		private DXListBoxItem mUIPropertiesListItem;
		private DXListBoxItem mUIToolTipListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowLocationPropertyGridRow : DXVerticalGridRow
	{
		public UIRowLocationPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowLocation";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXTestControl UIPropertyGridExpandBuPropertyGridExpandButton
		{
			get
			{
				if ((this.mUIPropertyGridExpandBuPropertyGridExpandButton == null))
				{
					this.mUIPropertyGridExpandBuPropertyGridExpandButton = new DXTestControl(this);
					#region Search Criteria
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.Name] = "rowLocation";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridExpandButton";
					this.mUIPropertyGridExpandBuPropertyGridExpandButton.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUIPropertyGridExpandBuPropertyGridExpandButton;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIPropertyGridExpandBuPropertyGridExpandButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client7 : DXTestControl
	{
		public UIPanelControl1Client7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
			#endregion
		}
		#region Properties
		public DXCheckBox UICheAllowFixingNestedCheckBox
		{
			get
			{
				if ((this.mUICheAllowFixingNestedCheckBox == null))
				{
					this.mUICheAllowFixingNestedCheckBox = new DXCheckBox(this);
					#region Search Criteria
					this.mUICheAllowFixingNestedCheckBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cheAllowFixingNestedRows";
					this.mUICheAllowFixingNestedCheckBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CheckEdit";
					this.mUICheAllowFixingNestedCheckBox.WindowTitles.Add("The XtraVerticalGrid Suite by DevExpress (C# code) - Fixed Rows");
					#endregion
				}
				return this.mUICheAllowFixingNestedCheckBox;
			}
		}
		#endregion
		#region Fields
		private DXCheckBox mUICheAllowFixingNestedCheckBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItemWindow1 : WinWindow
	{
		public UIItemWindow1()
		{
			#region Search Criteria
			this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
			this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
			#endregion
		}
		#region Properties
		public UIPopupMenuBarControlMenu UIPopupMenuBarControlMenu
		{
			get
			{
				if ((this.mUIPopupMenuBarControlMenu == null))
				{
					this.mUIPopupMenuBarControlMenu = new UIPopupMenuBarControlMenu(this);
				}
				return this.mUIPopupMenuBarControlMenu;
			}
		}
		public UIPopupMenuBarControlMenu1 UIPopupMenuBarControlMenu1
		{
			get
			{
				if ((this.mUIPopupMenuBarControlMenu1 == null))
				{
					this.mUIPopupMenuBarControlMenu1 = new UIPopupMenuBarControlMenu1(this);
				}
				return this.mUIPopupMenuBarControlMenu1;
			}
		}
		public UIItemWindow11 UIItemWindow11
		{
			get
			{
				if ((this.mUIItemWindow11 == null))
				{
					this.mUIItemWindow11 = new UIItemWindow11(this);
				}
				return this.mUIItemWindow11;
			}
		}
		public UIItemWindow12 UIItemWindow12
		{
			get
			{
				if ((this.mUIItemWindow12 == null))
				{
					this.mUIItemWindow12 = new UIItemWindow12(this);
				}
				return this.mUIItemWindow12;
			}
		}
		public UIItemWindow13 UIItemWindow13
		{
			get
			{
				if ((this.mUIItemWindow13 == null))
				{
					this.mUIItemWindow13 = new UIItemWindow13(this);
				}
				return this.mUIItemWindow13;
			}
		}
		public UIItemWindow14 UIItemWindow14
		{
			get
			{
				if ((this.mUIItemWindow14 == null))
				{
					this.mUIItemWindow14 = new UIItemWindow14(this);
				}
				return this.mUIItemWindow14;
			}
		}
		public UIGalleryDropDownBarCoMenu UIGalleryDropDownBarCoMenu
		{
			get
			{
				if ((this.mUIGalleryDropDownBarCoMenu == null))
				{
					this.mUIGalleryDropDownBarCoMenu = new UIGalleryDropDownBarCoMenu(this);
				}
				return this.mUIGalleryDropDownBarCoMenu;
			}
		}
		#endregion
		#region Fields
		private UIPopupMenuBarControlMenu mUIPopupMenuBarControlMenu;
		private UIPopupMenuBarControlMenu1 mUIPopupMenuBarControlMenu1;
		private UIItemWindow11 mUIItemWindow11;
		private UIItemWindow12 mUIItemWindow12;
		private UIItemWindow13 mUIItemWindow13;
		private UIItemWindow14 mUIItemWindow14;
		private UIGalleryDropDownBarCoMenu mUIGalleryDropDownBarCoMenu;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPopupMenuBarControlMenu : DXMenu
	{
		public UIPopupMenuBarControlMenu(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
			#endregion
		}
		#region Properties
		public DXMenuBaseButtonItem UIFixedTopMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIFixedTopMenuBaseButtonItem == null))
				{
					this.mUIFixedTopMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIFixedTopMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Fixed Top";
					this.mUIFixedTopMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIFixedTopMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIFixedBottomMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIFixedBottomMenuBaseButtonItem == null))
				{
					this.mUIFixedBottomMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIFixedBottomMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Fixed Bottom";
					this.mUIFixedBottomMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIFixedBottomMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UINotFixedMenuBaseButtonItem
		{
			get
			{
				if ((this.mUINotFixedMenuBaseButtonItem == null))
				{
					this.mUINotFixedMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUINotFixedMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Not Fixed";
					this.mUINotFixedMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUINotFixedMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIResetMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIResetMenuBaseButtonItem == null))
				{
					this.mUIResetMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIResetMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Reset";
					this.mUIResetMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIResetMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UISortAscendingMenuBaseButtonItem
		{
			get
			{
				if ((this.mUISortAscendingMenuBaseButtonItem == null))
				{
					this.mUISortAscendingMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUISortAscendingMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Sort Ascending";
					this.mUISortAscendingMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUISortAscendingMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UISortDescendingMenuBaseButtonItem
		{
			get
			{
				if ((this.mUISortDescendingMenuBaseButtonItem == null))
				{
					this.mUISortDescendingMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUISortDescendingMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Sort Descending";
					this.mUISortDescendingMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUISortDescendingMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIBestFitMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIBestFitMenuBaseButtonItem == null))
				{
					this.mUIBestFitMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIBestFitMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Best Fit";
					this.mUIBestFitMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIBestFitMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIBestFitallcolumnsMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIBestFitallcolumnsMenuBaseButtonItem == null))
				{
					this.mUIBestFitallcolumnsMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIBestFitallcolumnsMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Best Fit (all columns)";
					this.mUIBestFitallcolumnsMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIBestFitallcolumnsMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIMinMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIMinMenuBaseButtonItem == null))
				{
					this.mUIMinMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIMinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Min";
					this.mUIMinMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIMinMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIMaxMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIMaxMenuBaseButtonItem == null))
				{
					this.mUIMaxMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIMaxMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Max";
					this.mUIMaxMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIMaxMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UICountMenuBaseButtonItem
		{
			get
			{
				if ((this.mUICountMenuBaseButtonItem == null))
				{
					this.mUICountMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUICountMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Count";
					this.mUICountMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUICountMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UINoneMenuBaseButtonItem
		{
			get
			{
				if ((this.mUINoneMenuBaseButtonItem == null))
				{
					this.mUINoneMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUINoneMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "None";
					this.mUINoneMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUINoneMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIAllNodesMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIAllNodesMenuBaseButtonItem == null))
				{
					this.mUIAllNodesMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIAllNodesMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "All Nodes";
					this.mUIAllNodesMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIAllNodesMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIAverageMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIAverageMenuBaseButtonItem == null))
				{
					this.mUIAverageMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIAverageMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Average";
					this.mUIAverageMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIAverageMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIFixedRightMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIFixedRightMenuBaseButtonItem == null))
				{
					this.mUIFixedRightMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIFixedRightMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Fixed Right";
					this.mUIFixedRightMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIFixedRightMenuBaseButtonItem;
			}
		}
		public DXMenuBaseButtonItem UIFixedLeftMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIFixedLeftMenuBaseButtonItem == null))
				{
					this.mUIFixedLeftMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIFixedLeftMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Fixed Left";
					this.mUIFixedLeftMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIFixedLeftMenuBaseButtonItem;
			}
		}
		#endregion
		#region Fields
		private DXMenuBaseButtonItem mUIFixedTopMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIFixedBottomMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUINotFixedMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIResetMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUISortAscendingMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUISortDescendingMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIBestFitMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIBestFitallcolumnsMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIMinMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIMaxMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUICountMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUINoneMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIAllNodesMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIAverageMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIFixedRightMenuBaseButtonItem;
		private DXMenuBaseButtonItem mUIFixedLeftMenuBaseButtonItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPopupMenuBarControlMenu1 : DXMenu
	{
		public UIPopupMenuBarControlMenu1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "PopupMenuBarControl";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupMenuBarControl";
			#endregion
		}
		#region Properties
		public DXMenuBaseButtonItem UIAllNodesMenuBaseButtonItem
		{
			get
			{
				if ((this.mUIAllNodesMenuBaseButtonItem == null))
				{
					this.mUIAllNodesMenuBaseButtonItem = new DXMenuBaseButtonItem(this);
					#region Search Criteria
					this.mUIAllNodesMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.Name] = "All Nodes";
					this.mUIAllNodesMenuBaseButtonItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MenuBaseButtonItem";
					#endregion
				}
				return this.mUIAllNodesMenuBaseButtonItem;
			}
		}
		#endregion
		#region Fields
		private DXMenuBaseButtonItem mUIAllNodesMenuBaseButtonItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItemWindow11 : WinWindow
	{
		public UIItemWindow11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			#endregion
		}
		#region Properties
		public WinClient UIDesktopClient
		{
			get
			{
				if ((this.mUIDesktopClient == null))
				{
					this.mUIDesktopClient = new WinClient(this);
				}
				return this.mUIDesktopClient;
			}
		}
		#endregion
		#region Fields
		private WinClient mUIDesktopClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItemWindow12 : WinWindow
	{
		public UIItemWindow12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			#endregion
		}
		#region Properties
		public WinClient UIDesktopClient
		{
			get
			{
				if ((this.mUIDesktopClient == null))
				{
					this.mUIDesktopClient = new WinClient(this);
				}
				return this.mUIDesktopClient;
			}
		}
		#endregion
		#region Fields
		private WinClient mUIDesktopClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItemWindow13 : WinWindow
	{
		public UIItemWindow13(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			#endregion
		}
		#region Properties
		public WinClient UIDesktopClient
		{
			get
			{
				if ((this.mUIDesktopClient == null))
				{
					this.mUIDesktopClient = new WinClient(this);
				}
				return this.mUIDesktopClient;
			}
		}
		#endregion
		#region Fields
		private WinClient mUIDesktopClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItemWindow14 : WinWindow
	{
		public UIItemWindow14(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			#endregion
		}
		#region Properties
		public WinClient UIDesktopClient
		{
			get
			{
				if ((this.mUIDesktopClient == null))
				{
					this.mUIDesktopClient = new WinClient(this);
				}
				return this.mUIDesktopClient;
			}
		}
		#endregion
		#region Fields
		private WinClient mUIDesktopClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGalleryDropDownBarCoMenu : DXMenu
	{
		public UIGalleryDropDownBarCoMenu(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "GalleryDropDownBarControl";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryDropDownBarControl";
			#endregion
		}
		#region Properties
		public UIStandardSkinsGalleryItemGroup UIStandardSkinsGalleryItemGroup
		{
			get
			{
				if ((this.mUIStandardSkinsGalleryItemGroup == null))
				{
					this.mUIStandardSkinsGalleryItemGroup = new UIStandardSkinsGalleryItemGroup(this);
				}
				return this.mUIStandardSkinsGalleryItemGroup;
			}
		}
		#endregion
		#region Fields
		private UIStandardSkinsGalleryItemGroup mUIStandardSkinsGalleryItemGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIStandardSkinsGalleryItemGroup : DXTestControl
	{
		public UIStandardSkinsGalleryItemGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Standard Skins";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryItemGroup";
			#endregion
		}
		#region Properties
		public DXTestControl UIDevExpressStyleGalleryItem
		{
			get
			{
				if ((this.mUIDevExpressStyleGalleryItem == null))
				{
					this.mUIDevExpressStyleGalleryItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIDevExpressStyleGalleryItem.SearchProperties[DXTestControl.PropertyNames.Name] = "DevExpress Style";
					this.mUIDevExpressStyleGalleryItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GalleryItem";
					#endregion
				}
				return this.mUIDevExpressStyleGalleryItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIDevExpressStyleGalleryItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UICustomizationWindow : DXWindow
	{
		public UICustomizationWindow()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Customization";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("Customization");
			#endregion
		}
		#region Properties
		public UITreeListCustomizatioList UITreeListCustomizatioList
		{
			get
			{
				if ((this.mUITreeListCustomizatioList == null))
				{
					this.mUITreeListCustomizatioList = new UITreeListCustomizatioList(this);
				}
				return this.mUITreeListCustomizatioList;
			}
		}
		#endregion
		#region Fields
		private UITreeListCustomizatioList mUITreeListCustomizatioList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeListCustomizatioList : DXListBox
	{
		public UITreeListCustomizatioList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListCustomizationListBox[0]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCustomizationListBox";
			this.WindowTitles.Add("Customization");
			#endregion
		}
		#region Properties
		public DXTestControl UICategoryCustom
		{
			get
			{
				if ((this.mUICategoryCustom == null))
				{
					this.mUICategoryCustom = new DXTestControl(this);
					#region Search Criteria
					this.mUICategoryCustom.SearchProperties[DXTestControl.PropertyNames.Name] = "colCategory";
					this.mUICategoryCustom.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCustomizationListBoxItem";
					this.mUICategoryCustom.WindowTitles.Add("Customization");
					#endregion
				}
				return this.mUICategoryCustom;
			}
		}
		public DXTestControl UILengthcmCustom
		{
			get
			{
				if ((this.mUILengthcmCustom == null))
				{
					this.mUILengthcmCustom = new DXTestControl(this);
					#region Search Criteria
					this.mUILengthcmCustom.SearchProperties[DXTestControl.PropertyNames.Name] = "colLength(cm)";
					this.mUILengthcmCustom.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCustomizationListBoxItem";
					this.mUILengthcmCustom.WindowTitles.Add("Customization");
					#endregion
				}
				return this.mUILengthcmCustom;
			}
		}
		public DXTestControl UISpeciesNameCustom
		{
			get
			{
				if ((this.mUISpeciesNameCustom == null))
				{
					this.mUISpeciesNameCustom = new DXTestControl(this);
					#region Search Criteria
					this.mUISpeciesNameCustom.SearchProperties[DXTestControl.PropertyNames.Name] = "colSpeciesName";
					this.mUISpeciesNameCustom.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCustomizationListBoxItem";
					this.mUISpeciesNameCustom.WindowTitles.Add("Customization");
					#endregion
				}
				return this.mUISpeciesNameCustom;
			}
		}
		public DXTestControl UIMarkCustom
		{
			get
			{
				if ((this.mUIMarkCustom == null))
				{
					this.mUIMarkCustom = new DXTestControl(this);
					#region Search Criteria
					this.mUIMarkCustom.SearchProperties[DXTestControl.PropertyNames.Name] = "colMark";
					this.mUIMarkCustom.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCustomizationListBoxItem";
					this.mUIMarkCustom.WindowTitles.Add("Customization");
					#endregion
				}
				return this.mUIMarkCustom;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUICategoryCustom;
		private DXTestControl mUILengthcmCustom;
		private DXTestControl mUISpeciesNameCustom;
		private DXTestControl mUIMarkCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow : DXWindow
	{
		public UIXtraTreeListFeaturesWindow()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code)";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient4 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient4(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient4 mUIGcNavigationsClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient4 : DXTestControl
	{
		public UIGcNavigationsClient4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl3 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl3(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl3 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl3 : DXTestControl
	{
		public UIAccordionControl1AccordionControl3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UINewUpdatedDemosAccordionControlGroup UINewUpdatedDemosAccordionControlGroup
		{
			get
			{
				if ((this.mUINewUpdatedDemosAccordionControlGroup == null))
				{
					this.mUINewUpdatedDemosAccordionControlGroup = new UINewUpdatedDemosAccordionControlGroup(this);
				}
				return this.mUINewUpdatedDemosAccordionControlGroup;
			}
		}
		public UIDataSourcesAccordionControlGroup UIDataSourcesAccordionControlGroup
		{
			get
			{
				if ((this.mUIDataSourcesAccordionControlGroup == null))
				{
					this.mUIDataSourcesAccordionControlGroup = new UIDataSourcesAccordionControlGroup(this);
				}
				return this.mUIDataSourcesAccordionControlGroup;
			}
		}
		public UIMiscellaneousAccordionControlGroup UIMiscellaneousAccordionControlGroup
		{
			get
			{
				if ((this.mUIMiscellaneousAccordionControlGroup == null))
				{
					this.mUIMiscellaneousAccordionControlGroup = new UIMiscellaneousAccordionControlGroup(this);
				}
				return this.mUIMiscellaneousAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UINewUpdatedDemosAccordionControlGroup mUINewUpdatedDemosAccordionControlGroup;
		private UIDataSourcesAccordionControlGroup mUIDataSourcesAccordionControlGroup;
		private UIMiscellaneousAccordionControlGroup mUIMiscellaneousAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINewUpdatedDemosAccordionControlGroup : DXTestControl
	{
		public UINewUpdatedDemosAccordionControlGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "New & Updated Demos";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINodesFilteringupdateAccordionControlItem
		{
			get
			{
				if ((this.mUINodesFilteringupdateAccordionControlItem == null))
				{
					this.mUINodesFilteringupdateAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUINodesFilteringupdateAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Nodes Filtering (updated)";
					this.mUINodesFilteringupdateAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUINodesFilteringupdateAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUINodesFilteringupdateAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINodesFilteringupdateAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDataSourcesAccordionControlGroup : DXTestControl
	{
		public UIDataSourcesAccordionControlGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Data Sources";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIBusinessObjectBindinAccordionControlItem
		{
			get
			{
				if ((this.mUIBusinessObjectBindinAccordionControlItem == null))
				{
					this.mUIBusinessObjectBindinAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIBusinessObjectBindinAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Business Object Binding";
					this.mUIBusinessObjectBindinAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIBusinessObjectBindinAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUIBusinessObjectBindinAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIBusinessObjectBindinAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMiscellaneousAccordionControlGroup : DXTestControl
	{
		public UIMiscellaneousAccordionControlGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Miscellaneous";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIDragDropAccordionControlItem
		{
			get
			{
				if ((this.mUIDragDropAccordionControlItem == null))
				{
					this.mUIDragDropAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIDragDropAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Drag Drop";
					this.mUIDragDropAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIDragDropAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUIDragDropAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIDragDropAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow1 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow1()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UIPanelControl1Client8 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client8(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIPanelControl1Client8 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client8 : DXTestControl
	{
		public UIPanelControl1Client8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UIGcContainerClient6 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient6(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient6 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient6 : DXTestControl
	{
		public UIGcContainerClient6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UINodesFilteringCustom UINodesFilteringCustom
		{
			get
			{
				if ((this.mUINodesFilteringCustom == null))
				{
					this.mUINodesFilteringCustom = new UINodesFilteringCustom(this);
				}
				return this.mUINodesFilteringCustom;
			}
		}
		#endregion
		#region Fields
		private UINodesFilteringCustom mUINodesFilteringCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINodesFilteringCustom : DXTestControl
	{
		public UINodesFilteringCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "NodesFiltering";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NodesFiltering";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList12 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList12(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		public UIPanelControl1Client9 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client9(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList12 mUITreeList1TreeList;
		private UIPanelControl1Client9 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList12 : DXTreeList
	{
		public UITreeList1TreeList12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UITreeListFilterPanelCustom UITreeListFilterPanelCustom
		{
			get
			{
				if ((this.mUITreeListFilterPanelCustom == null))
				{
					this.mUITreeListFilterPanelCustom = new UITreeListFilterPanelCustom(this);
				}
				return this.mUITreeListFilterPanelCustom;
			}
		}
		public UIMruFilterComboComboBox UIMruFilterComboComboBox
		{
			get
			{
				if ((this.mUIMruFilterComboComboBox == null))
				{
					this.mUIMruFilterComboComboBox = new UIMruFilterComboComboBox(this);
				}
				return this.mUIMruFilterComboComboBox;
			}
		}
		public UITreeListSummaryFooteTreeListSummaryFooter1 UITreeListSummaryFooteTreeListSummaryFooter
		{
			get
			{
				if ((this.mUITreeListSummaryFooteTreeListSummaryFooter == null))
				{
					this.mUITreeListSummaryFooteTreeListSummaryFooter = new UITreeListSummaryFooteTreeListSummaryFooter1(this);
				}
				return this.mUITreeListSummaryFooteTreeListSummaryFooter;
			}
		}
		public DXTreeListColumnHeader UIJobTitleTreeListColumnHeader
		{
			get
			{
				if ((this.mUIJobTitleTreeListColumnHeader == null))
				{
					this.mUIJobTitleTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUIJobTitleTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIJobTitleTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUIJobTitleTreeListColumnHeader.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUIJobTitleTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UIBirthDateTreeListColumnHeader
		{
			get
			{
				if ((this.mUIBirthDateTreeListColumnHeader == null))
				{
					this.mUIBirthDateTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUIBirthDateTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn4";
					this.mUIBirthDateTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUIBirthDateTreeListColumnHeader.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUIBirthDateTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UIOriginCityTreeListColumnHeader
		{
			get
			{
				if ((this.mUIOriginCityTreeListColumnHeader == null))
				{
					this.mUIOriginCityTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUIOriginCityTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn6";
					this.mUIOriginCityTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUIOriginCityTreeListColumnHeader.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUIOriginCityTreeListColumnHeader;
			}
		}
		#endregion
		#region Fields
		private UITreeListFilterPanelCustom mUITreeListFilterPanelCustom;
		private UIMruFilterComboComboBox mUIMruFilterComboComboBox;
		private UITreeListSummaryFooteTreeListSummaryFooter1 mUITreeListSummaryFooteTreeListSummaryFooter;
		private DXTreeListColumnHeader mUIJobTitleTreeListColumnHeader;
		private DXTreeListColumnHeader mUIBirthDateTreeListColumnHeader;
		private DXTreeListColumnHeader mUIOriginCityTreeListColumnHeader;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeListFilterPanelCustom : DXTestControl
	{
		public UITreeListFilterPanelCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListFilterPanel";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListFilterPanel";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public DXTestControl UITreeListFilterPanelMTreeListElement
		{
			get
			{
				if ((this.mUITreeListFilterPanelMTreeListElement == null))
				{
					this.mUITreeListFilterPanelMTreeListElement = new DXTestControl(this);
					#region Search Criteria
					this.mUITreeListFilterPanelMTreeListElement.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListFilterPanelMRUButton";
					this.mUITreeListFilterPanelMTreeListElement.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListFilterPanelMRUButton";
					this.mUITreeListFilterPanelMTreeListElement.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUITreeListFilterPanelMTreeListElement;
			}
		}
		public DXTestControl UITreeListFilterPanelTTreeListElement
		{
			get
			{
				if ((this.mUITreeListFilterPanelTTreeListElement == null))
				{
					this.mUITreeListFilterPanelTTreeListElement = new DXTestControl(this);
					#region Search Criteria
					this.mUITreeListFilterPanelTTreeListElement.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListFilterPanelText";
					this.mUITreeListFilterPanelTTreeListElement.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListFilterPanelText";
					this.mUITreeListFilterPanelTTreeListElement.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUITreeListFilterPanelTTreeListElement;
			}
		}
		public DXTestControl UITreeListFilterPanelCTreeListElement
		{
			get
			{
				if ((this.mUITreeListFilterPanelCTreeListElement == null))
				{
					this.mUITreeListFilterPanelCTreeListElement = new DXTestControl(this);
					#region Search Criteria
					this.mUITreeListFilterPanelCTreeListElement.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListFilterPanelCustomizeButton";
					this.mUITreeListFilterPanelCTreeListElement.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListFilterPanelCustomizeButton";
					this.mUITreeListFilterPanelCTreeListElement.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUITreeListFilterPanelCTreeListElement;
			}
		}
		public DXTestControl UITreeListFilterPanelATreeListElement
		{
			get
			{
				if ((this.mUITreeListFilterPanelATreeListElement == null))
				{
					this.mUITreeListFilterPanelATreeListElement = new DXTestControl(this);
					#region Search Criteria
					this.mUITreeListFilterPanelATreeListElement.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListFilterPanelActiveButton";
					this.mUITreeListFilterPanelATreeListElement.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListFilterPanelActiveButton";
					this.mUITreeListFilterPanelATreeListElement.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUITreeListFilterPanelATreeListElement;
			}
		}
		public DXTestControl UITreeListFilterPanelCTreeListElement1
		{
			get
			{
				if ((this.mUITreeListFilterPanelCTreeListElement1 == null))
				{
					this.mUITreeListFilterPanelCTreeListElement1 = new DXTestControl(this);
					#region Search Criteria
					this.mUITreeListFilterPanelCTreeListElement1.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListFilterPanelCloseButton";
					this.mUITreeListFilterPanelCTreeListElement1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListFilterPanelCloseButton";
					this.mUITreeListFilterPanelCTreeListElement1.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUITreeListFilterPanelCTreeListElement1;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUITreeListFilterPanelMTreeListElement;
		private DXTestControl mUITreeListFilterPanelTTreeListElement;
		private DXTestControl mUITreeListFilterPanelCTreeListElement;
		private DXTestControl mUITreeListFilterPanelATreeListElement;
		private DXTestControl mUITreeListFilterPanelCTreeListElement1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMruFilterComboComboBox : DXComboBox
	{
		public UIMruFilterComboComboBox(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1MruFilterCombo[0]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "MruFilterCombo";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UIPopupListBoxFormWindow UIPopupListBoxFormWindow
		{
			get
			{
				if ((this.mUIPopupListBoxFormWindow == null))
				{
					this.mUIPopupListBoxFormWindow = new UIPopupListBoxFormWindow(this);
				}
				return this.mUIPopupListBoxFormWindow;
			}
		}
		public UIComboBoxPopupListBoxWindow UIComboBoxPopupListBoxWindow
		{
			get
			{
				if ((this.mUIComboBoxPopupListBoxWindow == null))
				{
					this.mUIComboBoxPopupListBoxWindow = new UIComboBoxPopupListBoxWindow(this);
				}
				return this.mUIComboBoxPopupListBoxWindow;
			}
		}
		#endregion
		#region Fields
		private UIPopupListBoxFormWindow mUIPopupListBoxFormWindow;
		private UIComboBoxPopupListBoxWindow mUIComboBoxPopupListBoxWindow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPopupListBoxFormWindow : DXWindow
	{
		public UIPopupListBoxFormWindow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1MruFilterCombo[0]PopupForm";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupListBoxForm";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UIPopupListBoxList UIPopupListBoxList
		{
			get
			{
				if ((this.mUIPopupListBoxList == null))
				{
					this.mUIPopupListBoxList = new UIPopupListBoxList(this);
				}
				return this.mUIPopupListBoxList;
			}
		}
		#endregion
		#region Fields
		private UIPopupListBoxList mUIPopupListBoxList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPopupListBoxList : DXListBox
	{
		public UIPopupListBoxList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1MruFilterCombo[0]PopupFormPopupListBox[0]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupListBox";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIPopupListBoxItem0ListItem
		{
			get
			{
				if ((this.mUIPopupListBoxItem0ListItem == null))
				{
					this.mUIPopupListBoxItem0ListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIPopupListBoxItem0ListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1MruFilterCombo[0]PopupFormPopupListBox[0]Item[0]";
					this.mUIPopupListBoxItem0ListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PopupListBoxItem";
					this.mUIPopupListBoxItem0ListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUIPopupListBoxItem0ListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIPopupListBoxItem0ListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIComboBoxPopupListBoxWindow : DXWindow
	{
		public UIComboBoxPopupListBoxWindow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1MruFilterCombo[0]PopupForm";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxPopupListBoxForm";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public UIComboBoxPopupListBoxList UIComboBoxPopupListBoxList
		{
			get
			{
				if ((this.mUIComboBoxPopupListBoxList == null))
				{
					this.mUIComboBoxPopupListBoxList = new UIComboBoxPopupListBoxList(this);
				}
				return this.mUIComboBoxPopupListBoxList;
			}
		}
		#endregion
		#region Fields
		private UIComboBoxPopupListBoxList mUIComboBoxPopupListBoxList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIComboBoxPopupListBoxList : DXListBox
	{
		public UIComboBoxPopupListBoxList(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1MruFilterCombo[0]PopupFormComboBoxPopupListBox[0]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxPopupListBox";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIComboBoxPopupListBoxListItem
		{
			get
			{
				if ((this.mUIComboBoxPopupListBoxListItem == null))
				{
					this.mUIComboBoxPopupListBoxListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIComboBoxPopupListBoxListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1MruFilterCombo[0]PopupFormComboBoxPopupListBox[0]Item[0]";
					this.mUIComboBoxPopupListBoxListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ComboBoxPopupListBoxItem";
					this.mUIComboBoxPopupListBoxListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUIComboBoxPopupListBoxListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIComboBoxPopupListBoxListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeListSummaryFooteTreeListSummaryFooter1 : DXTestControl
	{
		public UITreeListSummaryFooteTreeListSummaryFooter1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListSummaryFooter";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListSummaryFooter";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
			#endregion
		}
		#region Properties
		public DXTestControl UIItem19TreeListSummaryFooterCell
		{
			get
			{
				if ((this.mUIItem19TreeListSummaryFooterCell == null))
				{
					this.mUIItem19TreeListSummaryFooterCell = new DXTestControl(this);
					#region Search Criteria
					this.mUIItem19TreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIItem19TreeListSummaryFooterCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListSummaryFooterCell";
					this.mUIItem19TreeListSummaryFooterCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering (updated)");
					#endregion
				}
				return this.mUIItem19TreeListSummaryFooterCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIItem19TreeListSummaryFooterCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client9 : DXTestControl
	{
		public UIPanelControl1Client9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			#endregion
		}
		#region Properties
		public DXComboBox UICbFilterModeComboBox
		{
			get
			{
				if ((this.mUICbFilterModeComboBox == null))
				{
					this.mUICbFilterModeComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUICbFilterModeComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "cbFilterMode";
					this.mUICbFilterModeComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					#endregion
				}
				return this.mUICbFilterModeComboBox;
			}
		}
		#endregion
		#region Fields
		private DXComboBox mUICbFilterModeComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIFilterEditorWindow : DXWindow
	{
		public UIFilterEditorWindow()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Filter Editor";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("Filter Editor");
			#endregion
		}
		#region Properties
		public UIFilterControlFilterControl UIFilterControlFilterControl
		{
			get
			{
				if ((this.mUIFilterControlFilterControl == null))
				{
					this.mUIFilterControlFilterControl = new UIFilterControlFilterControl(this);
				}
				return this.mUIFilterControlFilterControl;
			}
		}
		public UIPanelControlClient UIPanelControlClient
		{
			get
			{
				if ((this.mUIPanelControlClient == null))
				{
					this.mUIPanelControlClient = new UIPanelControlClient(this);
				}
				return this.mUIPanelControlClient;
			}
		}
		#endregion
		#region Fields
		private UIFilterControlFilterControl mUIFilterControlFilterControl;
		private UIPanelControlClient mUIPanelControlClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIFilterControlFilterControl : DXFilterControl
	{
		public UIFilterControlFilterControl(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "UnknownFilterControl";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FilterControl";
			this.WindowTitles.Add("Filter Editor");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "UnknownFilterControlTextEditNode3Element2";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("Filter Editor");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControlClient : DXTestControl
	{
		public UIPanelControlClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "controlsPanel";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("Filter Editor");
			#endregion
		}
		#region Properties
		public DXButton UISimpleButtonButton
		{
			get
			{
				if ((this.mUISimpleButtonButton == null))
				{
					this.mUISimpleButtonButton = new DXButton(this);
					#region Search Criteria
					this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.Name] = "sbOK";
					this.mUISimpleButtonButton.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SimpleButton";
					this.mUISimpleButtonButton.WindowTitles.Add("Filter Editor");
					#endregion
				}
				return this.mUISimpleButtonButton;
			}
		}
		#endregion
		#region Fields
		private DXButton mUISimpleButtonButton;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow2 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow2()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient5 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient5(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		public UIPanelControl1Client10 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client10(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient5 mUIGcNavigationsClient;
		private UIPanelControl1Client10 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient5 : DXTestControl
	{
		public UIGcNavigationsClient5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl4 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl4(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl4 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl4 : DXTestControl
	{
		public UIAccordionControl1AccordionControl4(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIDataSourcesAccordionControlGroup1 UIDataSourcesAccordionControlGroup
		{
			get
			{
				if ((this.mUIDataSourcesAccordionControlGroup == null))
				{
					this.mUIDataSourcesAccordionControlGroup = new UIDataSourcesAccordionControlGroup1(this);
				}
				return this.mUIDataSourcesAccordionControlGroup;
			}
		}
		public UILayoutAccordionControlGroup UILayoutAccordionControlGroup
		{
			get
			{
				if ((this.mUILayoutAccordionControlGroup == null))
				{
					this.mUILayoutAccordionControlGroup = new UILayoutAccordionControlGroup(this);
				}
				return this.mUILayoutAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIDataSourcesAccordionControlGroup1 mUIDataSourcesAccordionControlGroup;
		private UILayoutAccordionControlGroup mUILayoutAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDataSourcesAccordionControlGroup1 : DXTestControl
	{
		public UIDataSourcesAccordionControlGroup1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Data Sources";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXTestControl UIBusinessObjectBindinAccordionControlItem
		{
			get
			{
				if ((this.mUIBusinessObjectBindinAccordionControlItem == null))
				{
					this.mUIBusinessObjectBindinAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIBusinessObjectBindinAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Business Object Binding";
					this.mUIBusinessObjectBindinAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIBusinessObjectBindinAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIBusinessObjectBindinAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIBusinessObjectBindinAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILayoutAccordionControlGroup : DXTestControl
	{
		public UILayoutAccordionControlGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Layout";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public DXTestControl UIMultiEditorsAccordionControlItem
		{
			get
			{
				if ((this.mUIMultiEditorsAccordionControlItem == null))
				{
					this.mUIMultiEditorsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIMultiEditorsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Multi Editors";
					this.mUIMultiEditorsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIMultiEditorsAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
					#endregion
				}
				return this.mUIMultiEditorsAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIMultiEditorsAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client10 : DXTestControl
	{
		public UIPanelControl1Client10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIGcContainerClient7 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient7(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient7 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient7 : DXTestControl
	{
		public UIGcContainerClient7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIBusinessObjectBindinCustom UIBusinessObjectBindinCustom
		{
			get
			{
				if ((this.mUIBusinessObjectBindinCustom == null))
				{
					this.mUIBusinessObjectBindinCustom = new UIBusinessObjectBindinCustom(this);
				}
				return this.mUIBusinessObjectBindinCustom;
			}
		}
		public UITreeListMultiEditorsCustom UITreeListMultiEditorsCustom
		{
			get
			{
				if ((this.mUITreeListMultiEditorsCustom == null))
				{
					this.mUITreeListMultiEditorsCustom = new UITreeListMultiEditorsCustom(this);
				}
				return this.mUITreeListMultiEditorsCustom;
			}
		}
		#endregion
		#region Fields
		private UIBusinessObjectBindinCustom mUIBusinessObjectBindinCustom;
		private UITreeListMultiEditorsCustom mUITreeListMultiEditorsCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIBusinessObjectBindinCustom : DXTestControl
	{
		public UIBusinessObjectBindinCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "BusinessObjectBinding";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "BusinessObjectBinding";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UISplitContainerControSplitContainerControl1 UISplitContainerControSplitContainerControl
		{
			get
			{
				if ((this.mUISplitContainerControSplitContainerControl == null))
				{
					this.mUISplitContainerControSplitContainerControl = new UISplitContainerControSplitContainerControl1(this);
				}
				return this.mUISplitContainerControSplitContainerControl;
			}
		}
		#endregion
		#region Fields
		private UISplitContainerControSplitContainerControl1 mUISplitContainerControSplitContainerControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISplitContainerControSplitContainerControl1 : DXSplitContainerControl
	{
		public UISplitContainerControSplitContainerControl1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "splitContainerControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitContainerControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UISplitGroupPanelClient1 UISplitGroupPanelClient
		{
			get
			{
				if ((this.mUISplitGroupPanelClient == null))
				{
					this.mUISplitGroupPanelClient = new UISplitGroupPanelClient1(this);
				}
				return this.mUISplitGroupPanelClient;
			}
		}
		public UISplitGroupPanelClient11 UISplitGroupPanelClient1
		{
			get
			{
				if ((this.mUISplitGroupPanelClient1 == null))
				{
					this.mUISplitGroupPanelClient1 = new UISplitGroupPanelClient11(this);
				}
				return this.mUISplitGroupPanelClient1;
			}
		}
		#endregion
		#region Fields
		private UISplitGroupPanelClient1 mUISplitGroupPanelClient;
		private UISplitGroupPanelClient11 mUISplitGroupPanelClient1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISplitGroupPanelClient1 : DXTestControl
	{
		public UISplitGroupPanelClient1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "splitContainerControl1SplitGroupPanel[0]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList13 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList13(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList13 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList13 : DXTreeList
	{
		public UITreeList1TreeList13(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode25 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode25(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode25 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode25 : DXTreeListNode
	{
		public UINode0TreeListNode25(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode112 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode112(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public UINode0TreeListNode113 UINode0TreeListNode11
		{
			get
			{
				if ((this.mUINode0TreeListNode11 == null))
				{
					this.mUINode0TreeListNode11 = new UINode0TreeListNode113(this);
				}
				return this.mUINode0TreeListNode11;
			}
		}
		public UINode0TreeListNode121 UINode0TreeListNode12
		{
			get
			{
				if ((this.mUINode0TreeListNode12 == null))
				{
					this.mUINode0TreeListNode12 = new UINode0TreeListNode121(this);
				}
				return this.mUINode0TreeListNode12;
			}
		}
		public UINode0TreeListNode131 UINode0TreeListNode13
		{
			get
			{
				if ((this.mUINode0TreeListNode13 == null))
				{
					this.mUINode0TreeListNode13 = new UINode0TreeListNode131(this);
				}
				return this.mUINode0TreeListNode13;
			}
		}
		public UINode0TreeListNode141 UINode0TreeListNode14
		{
			get
			{
				if ((this.mUINode0TreeListNode14 == null))
				{
					this.mUINode0TreeListNode14 = new UINode0TreeListNode141(this);
				}
				return this.mUINode0TreeListNode14;
			}
		}
		public UINode0TreeListNode151 UINode0TreeListNode15
		{
			get
			{
				if ((this.mUINode0TreeListNode15 == null))
				{
					this.mUINode0TreeListNode15 = new UINode0TreeListNode151(this);
				}
				return this.mUINode0TreeListNode15;
			}
		}
		public UINode0TreeListNode161 UINode0TreeListNode16
		{
			get
			{
				if ((this.mUINode0TreeListNode16 == null))
				{
					this.mUINode0TreeListNode16 = new UINode0TreeListNode161(this);
				}
				return this.mUINode0TreeListNode16;
			}
		}
		public UINode0TreeListNode171 UINode0TreeListNode17
		{
			get
			{
				if ((this.mUINode0TreeListNode17 == null))
				{
					this.mUINode0TreeListNode17 = new UINode0TreeListNode171(this);
				}
				return this.mUINode0TreeListNode17;
			}
		}
		public UINode0TreeListNode181 UINode0TreeListNode18
		{
			get
			{
				if ((this.mUINode0TreeListNode18 == null))
				{
					this.mUINode0TreeListNode18 = new UINode0TreeListNode181(this);
				}
				return this.mUINode0TreeListNode18;
			}
		}
		public UINode0TreeListNode191 UINode0TreeListNode19
		{
			get
			{
				if ((this.mUINode0TreeListNode19 == null))
				{
					this.mUINode0TreeListNode19 = new UINode0TreeListNode191(this);
				}
				return this.mUINode0TreeListNode19;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode112 mUINode0TreeListNode1;
		private UINode0TreeListNode113 mUINode0TreeListNode11;
		private UINode0TreeListNode121 mUINode0TreeListNode12;
		private UINode0TreeListNode131 mUINode0TreeListNode13;
		private UINode0TreeListNode141 mUINode0TreeListNode14;
		private UINode0TreeListNode151 mUINode0TreeListNode15;
		private UINode0TreeListNode161 mUINode0TreeListNode16;
		private UINode0TreeListNode171 mUINode0TreeListNode17;
		private UINode0TreeListNode181 mUINode0TreeListNode18;
		private UINode0TreeListNode191 mUINode0TreeListNode19;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode112 : DXTreeListNode
	{
		public UINode0TreeListNode112(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode2TreeListNode8 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode8(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode2TreeListNode8 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode8 : DXTreeListNode
	{
		public UINode2TreeListNode8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIThistaskistestTreeListCell UIThistaskistestTreeListCell
		{
			get
			{
				if ((this.mUIThistaskistestTreeListCell == null))
				{
					this.mUIThistaskistestTreeListCell = new UIThistaskistestTreeListCell(this);
				}
				return this.mUIThistaskistestTreeListCell;
			}
		}
		public UIItem05062012TreeListCell UIItem05062012TreeListCell
		{
			get
			{
				if ((this.mUIItem05062012TreeListCell == null))
				{
					this.mUIItem05062012TreeListCell = new UIItem05062012TreeListCell(this);
				}
				return this.mUIItem05062012TreeListCell;
			}
		}
		public UIItem15062020TreeListCell UIItem15062020TreeListCell
		{
			get
			{
				if ((this.mUIItem15062020TreeListCell == null))
				{
					this.mUIItem15062020TreeListCell = new UIItem15062020TreeListCell(this);
				}
				return this.mUIItem15062020TreeListCell;
			}
		}
		public UIHighTreeListCell UIHighTreeListCell
		{
			get
			{
				if ((this.mUIHighTreeListCell == null))
				{
					this.mUIHighTreeListCell = new UIHighTreeListCell(this);
				}
				return this.mUIHighTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIThistaskistestTreeListCell mUIThistaskistestTreeListCell;
		private UIItem05062012TreeListCell mUIItem05062012TreeListCell;
		private UIItem15062020TreeListCell mUIItem15062020TreeListCell;
		private UIHighTreeListCell mUIHighTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIThistaskistestTreeListCell : DXTreeListCell
	{
		public UIThistaskistestTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "10";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "11";
					this.mUITextEditEdit.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem05062012TreeListCell : DXTreeListCell
	{
		public UIItem05062012TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "10";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXDateTimePicker UIDateEditDateTimeEdit
		{
			get
			{
				if ((this.mUIDateEditDateTimeEdit == null))
				{
					this.mUIDateEditDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "DateEdit";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "11";
					this.mUIDateEditDateTimeEdit.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIDateEditDateTimeEdit;
			}
		}
		#endregion
		#region Fields
		private DXDateTimePicker mUIDateEditDateTimeEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem15062020TreeListCell : DXTreeListCell
	{
		public UIItem15062020TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn4";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "10";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXDateTimePicker UIDateEditDateTimeEdit
		{
			get
			{
				if ((this.mUIDateEditDateTimeEdit == null))
				{
					this.mUIDateEditDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "DateEdit";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					this.mUIDateEditDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "11";
					this.mUIDateEditDateTimeEdit.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIDateEditDateTimeEdit;
			}
		}
		#endregion
		#region Fields
		private DXDateTimePicker mUIDateEditDateTimeEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIHighTreeListCell : DXTreeListCell
	{
		public UIHighTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "10";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXComboBox UIImageComboBoxEditComboBox
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox == null))
				{
					this.mUIImageComboBoxEditComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "11";
					this.mUIImageComboBoxEditComboBox.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox;
			}
		}
		#endregion
		#region Fields
		private DXComboBox mUIImageComboBoxEditComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode113 : DXTreeListNode
	{
		public UINode0TreeListNode113(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode26 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode26(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode26 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode26 : DXTreeListNode
	{
		public UINode0TreeListNode26(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIMarkettestTreeListCell
		{
			get
			{
				if ((this.mUIMarkettestTreeListCell == null))
				{
					this.mUIMarkettestTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIMarkettestTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIMarkettestTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIMarkettestTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIMarkettestTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIMarkettestTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode121 : DXTreeListNode
	{
		public UINode0TreeListNode121(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode27 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode27(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode27 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode27 : DXTreeListNode
	{
		public UINode0TreeListNode27(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIMarkettestTreeListCell UIMarkettestTreeListCell
		{
			get
			{
				if ((this.mUIMarkettestTreeListCell == null))
				{
					this.mUIMarkettestTreeListCell = new UIMarkettestTreeListCell(this);
				}
				return this.mUIMarkettestTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIMarkettestTreeListCell mUIMarkettestTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMarkettestTreeListCell : DXTreeListCell
	{
		public UIMarkettestTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXTextEdit UINode000ColumntreeLisEdit
		{
			get
			{
				if ((this.mUINode000ColumntreeLisEdit == null))
				{
					this.mUINode000ColumntreeLisEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUINode000ColumntreeLisEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]0-0-0[Column]treeListColumn1";
					this.mUINode000ColumntreeLisEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUINode000ColumntreeLisEdit.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUINode000ColumntreeLisEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUINode000ColumntreeLisEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode131 : DXTreeListNode
	{
		public UINode0TreeListNode131(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode28 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode28(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode28 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode28 : DXTreeListNode
	{
		public UINode0TreeListNode28(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIItem5122011TreeListCell
		{
			get
			{
				if ((this.mUIItem5122011TreeListCell == null))
				{
					this.mUIItem5122011TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItem5122011TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
					this.mUIItem5122011TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItem5122011TreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIItem5122011TreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIItem5122011TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode141 : DXTreeListNode
	{
		public UINode0TreeListNode141(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode29 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode29(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode29 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode29 : DXTreeListNode
	{
		public UINode0TreeListNode29(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIItem5122011TreeListCell UIItem5122011TreeListCell
		{
			get
			{
				if ((this.mUIItem5122011TreeListCell == null))
				{
					this.mUIItem5122011TreeListCell = new UIItem5122011TreeListCell(this);
				}
				return this.mUIItem5122011TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem5122011TreeListCell mUIItem5122011TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem5122011TreeListCell : DXTreeListCell
	{
		public UIItem5122011TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXDateTimePicker UINode000ColumntreeLisDateTimeEdit
		{
			get
			{
				if ((this.mUINode000ColumntreeLisDateTimeEdit == null))
				{
					this.mUINode000ColumntreeLisDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUINode000ColumntreeLisDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]0-0-0[Column]treeListColumn3";
					this.mUINode000ColumntreeLisDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					#endregion
				}
				return this.mUINode000ColumntreeLisDateTimeEdit;
			}
		}
		#endregion
		#region Fields
		private DXDateTimePicker mUINode000ColumntreeLisDateTimeEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode151 : DXTreeListNode
	{
		public UINode0TreeListNode151(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode30 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode30(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode30 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode30 : DXTreeListNode
	{
		public UINode0TreeListNode30(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIItem9222011TreeListCell
		{
			get
			{
				if ((this.mUIItem9222011TreeListCell == null))
				{
					this.mUIItem9222011TreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItem9222011TreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn4";
					this.mUIItem9222011TreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItem9222011TreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIItem9222011TreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIItem9222011TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode161 : DXTreeListNode
	{
		public UINode0TreeListNode161(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode31 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode31(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode31 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode31 : DXTreeListNode
	{
		public UINode0TreeListNode31(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIItem9222011TreeListCell UIItem9222011TreeListCell
		{
			get
			{
				if ((this.mUIItem9222011TreeListCell == null))
				{
					this.mUIItem9222011TreeListCell = new UIItem9222011TreeListCell(this);
				}
				return this.mUIItem9222011TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem9222011TreeListCell mUIItem9222011TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem9222011TreeListCell : DXTreeListCell
	{
		public UIItem9222011TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn4";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXDateTimePicker UINode000ColumntreeLisDateTimeEdit
		{
			get
			{
				if ((this.mUINode000ColumntreeLisDateTimeEdit == null))
				{
					this.mUINode000ColumntreeLisDateTimeEdit = new DXDateTimePicker(this);
					#region Search Criteria
					this.mUINode000ColumntreeLisDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]0-0-0[Column]treeListColumn4";
					this.mUINode000ColumntreeLisDateTimeEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "DateEdit";
					#endregion
				}
				return this.mUINode000ColumntreeLisDateTimeEdit;
			}
		}
		#endregion
		#region Fields
		private DXDateTimePicker mUINode000ColumntreeLisDateTimeEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode171 : DXTreeListNode
	{
		public UINode0TreeListNode171(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode32 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode32(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode32 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode32 : DXTreeListNode
	{
		public UINode0TreeListNode32(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIHighTreeListCell
		{
			get
			{
				if ((this.mUIHighTreeListCell == null))
				{
					this.mUIHighTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIHighTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
					this.mUIHighTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIHighTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIHighTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIHighTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode181 : DXTreeListNode
	{
		public UINode0TreeListNode181(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode33 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode33(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode33 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode33 : DXTreeListNode
	{
		public UINode0TreeListNode33(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIHighTreeListCell1 UIHighTreeListCell
		{
			get
			{
				if ((this.mUIHighTreeListCell == null))
				{
					this.mUIHighTreeListCell = new UIHighTreeListCell1(this);
				}
				return this.mUIHighTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIHighTreeListCell1 mUIHighTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIHighTreeListCell1 : DXTreeListCell
	{
		public UIHighTreeListCell1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXComboBox UINode000ColumntreeLisComboBox
		{
			get
			{
				if ((this.mUINode000ColumntreeLisComboBox == null))
				{
					this.mUINode000ColumntreeLisComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUINode000ColumntreeLisComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]0-0-0[Column]treeListColumn5";
					this.mUINode000ColumntreeLisComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUINode000ColumntreeLisComboBox.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUINode000ColumntreeLisComboBox;
			}
		}
		#endregion
		#region Fields
		private DXComboBox mUINode000ColumntreeLisComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode191 : DXTreeListNode
	{
		public UINode0TreeListNode191(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode34 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode34(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode34 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode34 : DXTreeListNode
	{
		public UINode0TreeListNode34(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIHighTreeListCell2 UIHighTreeListCell
		{
			get
			{
				if ((this.mUIHighTreeListCell == null))
				{
					this.mUIHighTreeListCell = new UIHighTreeListCell2(this);
				}
				return this.mUIHighTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIHighTreeListCell2 mUIHighTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIHighTreeListCell2 : DXTreeListCell
	{
		public UIHighTreeListCell2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn5";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXComboBox UINode000ColumntreeLisComboBox
		{
			get
			{
				if ((this.mUINode000ColumntreeLisComboBox == null))
				{
					this.mUINode000ColumntreeLisComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUINode000ColumntreeLisComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]0-0-0[Column]treeListColumn5";
					this.mUINode000ColumntreeLisComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUINode000ColumntreeLisComboBox.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUINode000ColumntreeLisComboBox;
			}
		}
		#endregion
		#region Fields
		private DXComboBox mUINode000ColumntreeLisComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UISplitGroupPanelClient11 : DXTestControl
	{
		public UISplitGroupPanelClient11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "splitContainerControl1SplitGroupPanel[1]";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SplitGroupPanel";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIPropertyGridControl1PropertyGrid2 UIPropertyGridControl1PropertyGrid
		{
			get
			{
				if ((this.mUIPropertyGridControl1PropertyGrid == null))
				{
					this.mUIPropertyGridControl1PropertyGrid = new UIPropertyGridControl1PropertyGrid2(this);
				}
				return this.mUIPropertyGridControl1PropertyGrid;
			}
		}
		#endregion
		#region Fields
		private UIPropertyGridControl1PropertyGrid2 mUIPropertyGridControl1PropertyGrid;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertyGridControl1PropertyGrid2 : DXVerticalGrid
	{
		public UIPropertyGridControl1PropertyGrid2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "propertyGridControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public UIRowDescriptionPropertyGridRow UIRowDescriptionPropertyGridRow
		{
			get
			{
				if ((this.mUIRowDescriptionPropertyGridRow == null))
				{
					this.mUIRowDescriptionPropertyGridRow = new UIRowDescriptionPropertyGridRow(this);
				}
				return this.mUIRowDescriptionPropertyGridRow;
			}
		}
		public UIRowEndDatePropertyGridRow UIRowEndDatePropertyGridRow
		{
			get
			{
				if ((this.mUIRowEndDatePropertyGridRow == null))
				{
					this.mUIRowEndDatePropertyGridRow = new UIRowEndDatePropertyGridRow(this);
				}
				return this.mUIRowEndDatePropertyGridRow;
			}
		}
		public UIRowIsTaskPropertyGridRow UIRowIsTaskPropertyGridRow
		{
			get
			{
				if ((this.mUIRowIsTaskPropertyGridRow == null))
				{
					this.mUIRowIsTaskPropertyGridRow = new UIRowIsTaskPropertyGridRow(this);
				}
				return this.mUIRowIsTaskPropertyGridRow;
			}
		}
		public UIRowPriorityPropertyGridRow UIRowPriorityPropertyGridRow
		{
			get
			{
				if ((this.mUIRowPriorityPropertyGridRow == null))
				{
					this.mUIRowPriorityPropertyGridRow = new UIRowPriorityPropertyGridRow(this);
				}
				return this.mUIRowPriorityPropertyGridRow;
			}
		}
		public UIRowStartDatePropertyGridRow UIRowStartDatePropertyGridRow
		{
			get
			{
				if ((this.mUIRowStartDatePropertyGridRow == null))
				{
					this.mUIRowStartDatePropertyGridRow = new UIRowStartDatePropertyGridRow(this);
				}
				return this.mUIRowStartDatePropertyGridRow;
			}
		}
		public UIRowNamePropertyGridRow UIRowNamePropertyGridRow
		{
			get
			{
				if ((this.mUIRowNamePropertyGridRow == null))
				{
					this.mUIRowNamePropertyGridRow = new UIRowNamePropertyGridRow(this);
				}
				return this.mUIRowNamePropertyGridRow;
			}
		}
		#endregion
		#region Fields
		private UIRowDescriptionPropertyGridRow mUIRowDescriptionPropertyGridRow;
		private UIRowEndDatePropertyGridRow mUIRowEndDatePropertyGridRow;
		private UIRowIsTaskPropertyGridRow mUIRowIsTaskPropertyGridRow;
		private UIRowPriorityPropertyGridRow mUIRowPriorityPropertyGridRow;
		private UIRowStartDatePropertyGridRow mUIRowStartDatePropertyGridRow;
		private UIRowNamePropertyGridRow mUIRowNamePropertyGridRow;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowDescriptionPropertyGridRow : DXVerticalGridRow
	{
		public UIRowDescriptionPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowDescription";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIRowrowDescriptionThiPropertyGridCell
		{
			get
			{
				if ((this.mUIRowrowDescriptionThiPropertyGridCell == null))
				{
					this.mUIRowrowDescriptionThiPropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIRowrowDescriptionThiPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowDescriptionCell";
					this.mUIRowrowDescriptionThiPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUIRowrowDescriptionThiPropertyGridCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIRowrowDescriptionThiPropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIRowrowDescriptionThiPropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowEndDatePropertyGridRow : DXVerticalGridRow
	{
		public UIRowEndDatePropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowEndDate";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIRowrowEndDate1506202PropertyGridCell
		{
			get
			{
				if ((this.mUIRowrowEndDate1506202PropertyGridCell == null))
				{
					this.mUIRowrowEndDate1506202PropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIRowrowEndDate1506202PropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowEndDateCell";
					this.mUIRowrowEndDate1506202PropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUIRowrowEndDate1506202PropertyGridCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIRowrowEndDate1506202PropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIRowrowEndDate1506202PropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowIsTaskPropertyGridRow : DXVerticalGridRow
	{
		public UIRowIsTaskPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowIsTask";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIRowrowIsTaskCheckedPropertyGridCell
		{
			get
			{
				if ((this.mUIRowrowIsTaskCheckedPropertyGridCell == null))
				{
					this.mUIRowrowIsTaskCheckedPropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIRowrowIsTaskCheckedPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowIsTaskCell";
					this.mUIRowrowIsTaskCheckedPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUIRowrowIsTaskCheckedPropertyGridCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIRowrowIsTaskCheckedPropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIRowrowIsTaskCheckedPropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowPriorityPropertyGridRow : DXVerticalGridRow
	{
		public UIRowPriorityPropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPriority";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIRowrowPriorityHighPropertyGridCell
		{
			get
			{
				if ((this.mUIRowrowPriorityHighPropertyGridCell == null))
				{
					this.mUIRowrowPriorityHighPropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIRowrowPriorityHighPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowPriorityCell";
					this.mUIRowrowPriorityHighPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUIRowrowPriorityHighPropertyGridCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIRowrowPriorityHighPropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIRowrowPriorityHighPropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowStartDatePropertyGridRow : DXVerticalGridRow
	{
		public UIRowStartDatePropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowStartDate";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIRowrowStartDate05062PropertyGridCell
		{
			get
			{
				if ((this.mUIRowrowStartDate05062PropertyGridCell == null))
				{
					this.mUIRowrowStartDate05062PropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIRowrowStartDate05062PropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowStartDateCell";
					this.mUIRowrowStartDate05062PropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUIRowrowStartDate05062PropertyGridCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIRowrowStartDate05062PropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIRowrowStartDate05062PropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIRowNamePropertyGridRow : DXVerticalGridRow
	{
		public UIRowNamePropertyGridRow(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "rowName";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridRow";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
			#endregion
		}
		#region Properties
		public DXVerticalGridCell UIRowrowNameMarkettestPropertyGridCell
		{
			get
			{
				if ((this.mUIRowrowNameMarkettestPropertyGridCell == null))
				{
					this.mUIRowrowNameMarkettestPropertyGridCell = new DXVerticalGridCell(this);
					#region Search Criteria
					this.mUIRowrowNameMarkettestPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.Name] = "rowNameCell";
					this.mUIRowrowNameMarkettestPropertyGridCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PropertyGridCell";
					this.mUIRowrowNameMarkettestPropertyGridCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Business Object Binding");
					#endregion
				}
				return this.mUIRowrowNameMarkettestPropertyGridCell;
			}
		}
		#endregion
		#region Fields
		private DXVerticalGridCell mUIRowrowNameMarkettestPropertyGridCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeListMultiEditorsCustom : DXTestControl
	{
		public UITreeListMultiEditorsCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListMultiEditors";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListMultiEditors";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList14 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList14(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList14 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList14 : DXTreeList
	{
		public UITreeList1TreeList14(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode35 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode35(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode1TreeListNode16 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode16(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode2TreeListNode10 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode10(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		public UINode4TreeListNode1 UINode4TreeListNode
		{
			get
			{
				if ((this.mUINode4TreeListNode == null))
				{
					this.mUINode4TreeListNode = new UINode4TreeListNode1(this);
				}
				return this.mUINode4TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode35 mUINode0TreeListNode;
		private UINode1TreeListNode16 mUINode1TreeListNode;
		private UINode2TreeListNode10 mUINode2TreeListNode;
		private UINode4TreeListNode1 mUINode4TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode35 : DXTreeListNode
	{
		public UINode0TreeListNode35(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode15 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode15(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode2TreeListNode9 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode9(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		public DXTreeListCell UIProductNameTreeListCell
		{
			get
			{
				if ((this.mUIProductNameTreeListCell == null))
				{
					this.mUIProductNameTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIProductNameTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIProductNameTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIProductNameTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
					#endregion
				}
				return this.mUIProductNameTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode15 mUINode1TreeListNode;
		private UINode2TreeListNode9 mUINode2TreeListNode;
		private DXTreeListCell mUIProductNameTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode15 : DXTreeListNode
	{
		public UINode1TreeListNode15(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIItem1800TreeListCell UIItem1800TreeListCell
		{
			get
			{
				if ((this.mUIItem1800TreeListCell == null))
				{
					this.mUIItem1800TreeListCell = new UIItem1800TreeListCell(this);
				}
				return this.mUIItem1800TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem1800TreeListCell mUIItem1800TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem1800TreeListCell : DXTreeListCell
	{
		public UIItem1800TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public DXPopupEdit UICalcEditPopupEdit
		{
			get
			{
				if ((this.mUICalcEditPopupEdit == null))
				{
					this.mUICalcEditPopupEdit = new DXPopupEdit(this);
					#region Search Criteria
					this.mUICalcEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "CalcEdit";
					this.mUICalcEditPopupEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CalcEdit";
					#endregion
				}
				return this.mUICalcEditPopupEdit;
			}
		}
		public DXPopupEdit UICalcEditPopupEdit1
		{
			get
			{
				if ((this.mUICalcEditPopupEdit1 == null))
				{
					this.mUICalcEditPopupEdit1 = new DXPopupEdit(this);
					#region Search Criteria
					this.mUICalcEditPopupEdit1.SearchProperties[DXTestControl.PropertyNames.Name] = "CalcEdit";
					this.mUICalcEditPopupEdit1.SearchProperties[DXTestControl.PropertyNames.ClassName] = "CalcEdit";
					#endregion
				}
				return this.mUICalcEditPopupEdit1;
			}
		}
		#endregion
		#region Fields
		private DXPopupEdit mUICalcEditPopupEdit;
		private DXPopupEdit mUICalcEditPopupEdit1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode9 : DXTreeListNode
	{
		public UINode2TreeListNode9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIItem50TreeListCell UIItem50TreeListCell
		{
			get
			{
				if ((this.mUIItem50TreeListCell == null))
				{
					this.mUIItem50TreeListCell = new UIItem50TreeListCell(this);
				}
				return this.mUIItem50TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem50TreeListCell mUIItem50TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem50TreeListCell : DXTreeListCell
	{
		public UIItem50TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public DXTextEdit UISpinEditEdit
		{
			get
			{
				if ((this.mUISpinEditEdit == null))
				{
					this.mUISpinEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "SpinEdit";
					this.mUISpinEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "SpinEdit";
					this.mUISpinEditEdit.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
					#endregion
				}
				return this.mUISpinEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUISpinEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode16 : DXTreeListNode
	{
		public UINode1TreeListNode16(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIConfectionsTreeListCell UIConfectionsTreeListCell
		{
			get
			{
				if ((this.mUIConfectionsTreeListCell == null))
				{
					this.mUIConfectionsTreeListCell = new UIConfectionsTreeListCell(this);
				}
				return this.mUIConfectionsTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIConfectionsTreeListCell mUIConfectionsTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIConfectionsTreeListCell : DXTreeListCell
	{
		public UIConfectionsTreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public DXComboBox UIImageComboBoxEditComboBox
		{
			get
			{
				if ((this.mUIImageComboBoxEditComboBox == null))
				{
					this.mUIImageComboBoxEditComboBox = new DXComboBox(this);
					#region Search Criteria
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.Name] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageComboBoxEdit";
					this.mUIImageComboBoxEditComboBox.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
					#endregion
				}
				return this.mUIImageComboBoxEditComboBox;
			}
		}
		#endregion
		#region Fields
		private DXComboBox mUIImageComboBoxEditComboBox;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode10 : DXTreeListNode
	{
		public UINode2TreeListNode10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode17 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode17(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode17 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode17 : DXTreeListNode
	{
		public UINode1TreeListNode17(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIItem1005512345TreeListCell UIItem1005512345TreeListCell
		{
			get
			{
				if ((this.mUIItem1005512345TreeListCell == null))
				{
					this.mUIItem1005512345TreeListCell = new UIItem1005512345TreeListCell(this);
				}
				return this.mUIItem1005512345TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem1005512345TreeListCell mUIItem1005512345TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem1005512345TreeListCell : DXTreeListCell
	{
		public UIItem1005512345TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public DXTextEdit UITextEditEdit
		{
			get
			{
				if ((this.mUITextEditEdit == null))
				{
					this.mUITextEditEdit = new DXTextEdit(this);
					#region Search Criteria
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.Name] = "TextEdit";
					this.mUITextEditEdit.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TextEdit";
					this.mUITextEditEdit.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
					#endregion
				}
				return this.mUITextEditEdit;
			}
		}
		#endregion
		#region Fields
		private DXTextEdit mUITextEditEdit;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode4TreeListNode1 : DXTreeListNode
	{
		public UINode4TreeListNode1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node4";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public UIItem58TreeListCell UIItem58TreeListCell
		{
			get
			{
				if ((this.mUIItem58TreeListCell == null))
				{
					this.mUIItem58TreeListCell = new UIItem58TreeListCell(this);
				}
				return this.mUIItem58TreeListCell;
			}
		}
		#endregion
		#region Fields
		private UIItem58TreeListCell mUIItem58TreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIItem58TreeListCell : DXTreeListCell
	{
		public UIItem58TreeListCell(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
			#endregion
		}
		#region Properties
		public DXTestControl UIProgressBarControlProgressBar
		{
			get
			{
				if ((this.mUIProgressBarControlProgressBar == null))
				{
					this.mUIProgressBarControlProgressBar = new DXTestControl(this);
					#region Search Criteria
					this.mUIProgressBarControlProgressBar.SearchProperties[DXTestControl.PropertyNames.Name] = "ProgressBarControl";
					this.mUIProgressBarControlProgressBar.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ProgressBarControl";
					this.mUIProgressBarControlProgressBar.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
					#endregion
				}
				return this.mUIProgressBarControlProgressBar;
			}
		}
		public DXTestControl UINode4ColumntreeListCProgressBar
		{
			get
			{
				if ((this.mUINode4ColumntreeListCProgressBar == null))
				{
					this.mUINode4ColumntreeListCProgressBar = new DXTestControl(this);
					#region Search Criteria
					this.mUINode4ColumntreeListCProgressBar.SearchProperties[DXTestControl.PropertyNames.Name] = "[Node]4[Column]treeListColumn2";
					this.mUINode4ColumntreeListCProgressBar.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ProgressBarControl";
					this.mUINode4ColumntreeListCProgressBar.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Multi Editors");
					#endregion
				}
				return this.mUINode4ColumntreeListCProgressBar;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIProgressBarControlProgressBar;
		private DXTestControl mUINode4ColumntreeListCProgressBar;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow3 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow3()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public UIPanelControl1Client11 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client11(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		public UIGcNavigationsClient6 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient6(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		#endregion
		#region Fields
		private UIPanelControl1Client11 mUIPanelControl1Client;
		private UIGcNavigationsClient6 mUIGcNavigationsClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client11 : DXTestControl
	{
		public UIPanelControl1Client11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public UIGcContainerClient8 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient8(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient8 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient8 : DXTestControl
	{
		public UIGcContainerClient8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public UIFixedColumnsCustom UIFixedColumnsCustom
		{
			get
			{
				if ((this.mUIFixedColumnsCustom == null))
				{
					this.mUIFixedColumnsCustom = new UIFixedColumnsCustom(this);
				}
				return this.mUIFixedColumnsCustom;
			}
		}
		#endregion
		#region Fields
		private UIFixedColumnsCustom mUIFixedColumnsCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIFixedColumnsCustom : DXTestControl
	{
		public UIFixedColumnsCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "FixedColumns";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "FixedColumns";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList15 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList15(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList15 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList15 : DXTreeList
	{
		public UITreeList1TreeList15(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public DXScrollBar UIHTLScrollBarScrollBarControl
		{
			get
			{
				if ((this.mUIHTLScrollBarScrollBarControl == null))
				{
					this.mUIHTLScrollBarScrollBarControl = new DXScrollBar(this);
					#region Search Criteria
					this.mUIHTLScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1HTLScrollBar";
					this.mUIHTLScrollBarScrollBarControl.SearchProperties[DXTestControl.PropertyNames.ClassName] = "HTLScrollBar";
					this.mUIHTLScrollBarScrollBarControl.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
					#endregion
				}
				return this.mUIHTLScrollBarScrollBarControl;
			}
		}
		public DXTreeListColumnHeader UICommonNameTreeListColumnHeader
		{
			get
			{
				if ((this.mUICommonNameTreeListColumnHeader == null))
				{
					this.mUICommonNameTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUICommonNameTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUICommonNameTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUICommonNameTreeListColumnHeader.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
					#endregion
				}
				return this.mUICommonNameTreeListColumnHeader;
			}
		}
		public DXTreeListColumnHeader UICategoryTreeListColumnHeader
		{
			get
			{
				if ((this.mUICategoryTreeListColumnHeader == null))
				{
					this.mUICategoryTreeListColumnHeader = new DXTreeListColumnHeader(this);
					#region Search Criteria
					this.mUICategoryTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn3";
					this.mUICategoryTreeListColumnHeader.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListColumnHeader";
					this.mUICategoryTreeListColumnHeader.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
					#endregion
				}
				return this.mUICategoryTreeListColumnHeader;
			}
		}
		#endregion
		#region Fields
		private DXScrollBar mUIHTLScrollBarScrollBarControl;
		private DXTreeListColumnHeader mUICommonNameTreeListColumnHeader;
		private DXTreeListColumnHeader mUICategoryTreeListColumnHeader;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient6 : DXTestControl
	{
		public UIGcNavigationsClient6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl5 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl5(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl5 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl5 : DXTestControl
	{
		public UIAccordionControl1AccordionControl5(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public UILayoutAccordionControlGroup1 UILayoutAccordionControlGroup
		{
			get
			{
				if ((this.mUILayoutAccordionControlGroup == null))
				{
					this.mUILayoutAccordionControlGroup = new UILayoutAccordionControlGroup1(this);
				}
				return this.mUILayoutAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UILayoutAccordionControlGroup1 mUILayoutAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILayoutAccordionControlGroup1 : DXTestControl
	{
		public UILayoutAccordionControlGroup1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Layout";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
			#endregion
		}
		#region Properties
		public DXTestControl UIFixedColumnsAccordionControlItem
		{
			get
			{
				if ((this.mUIFixedColumnsAccordionControlItem == null))
				{
					this.mUIFixedColumnsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIFixedColumnsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Fixed Columns";
					this.mUIFixedColumnsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIFixedColumnsAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Fixed Columns");
					#endregion
				}
				return this.mUIFixedColumnsAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIFixedColumnsAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow4 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow4()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code) - Drag Drop";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient7 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient7(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		public UIPanelControl1Client12 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client12(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient7 mUIGcNavigationsClient;
		private UIPanelControl1Client12 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient7 : DXTestControl
	{
		public UIGcNavigationsClient7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl6 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl6(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl6 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl6 : DXTestControl
	{
		public UIAccordionControl1AccordionControl6(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UIMiscellaneousAccordionControlGroup1 UIMiscellaneousAccordionControlGroup
		{
			get
			{
				if ((this.mUIMiscellaneousAccordionControlGroup == null))
				{
					this.mUIMiscellaneousAccordionControlGroup = new UIMiscellaneousAccordionControlGroup1(this);
				}
				return this.mUIMiscellaneousAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIMiscellaneousAccordionControlGroup1 mUIMiscellaneousAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMiscellaneousAccordionControlGroup1 : DXTestControl
	{
		public UIMiscellaneousAccordionControlGroup1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Miscellaneous";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTestControl UIDragDropAccordionControlItem
		{
			get
			{
				if ((this.mUIDragDropAccordionControlItem == null))
				{
					this.mUIDragDropAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIDragDropAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Drag Drop";
					this.mUIDragDropAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIDragDropAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIDragDropAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIDragDropAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client12 : DXTestControl
	{
		public UIPanelControl1Client12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UIGcContainerClient9 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient9(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient9 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient9 : DXTestControl
	{
		public UIGcContainerClient9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UITreeListDragDropCustom UITreeListDragDropCustom
		{
			get
			{
				if ((this.mUITreeListDragDropCustom == null))
				{
					this.mUITreeListDragDropCustom = new UITreeListDragDropCustom(this);
				}
				return this.mUITreeListDragDropCustom;
			}
		}
		#endregion
		#region Fields
		private UITreeListDragDropCustom mUITreeListDragDropCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeListDragDropCustom : DXTestControl
	{
		public UITreeListDragDropCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "TreeListDragDrop";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListDragDrop";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UIPanel1Client UIPanel1Client
		{
			get
			{
				if ((this.mUIPanel1Client == null))
				{
					this.mUIPanel1Client = new UIPanel1Client(this);
				}
				return this.mUIPanel1Client;
			}
		}
		public UITreeList1TreeList16 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList16(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		#endregion
		#region Fields
		private UIPanel1Client mUIPanel1Client;
		private UITreeList1TreeList16 mUITreeList1TreeList;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanel1Client : DXTestControl
	{
		public UIPanel1Client(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panel1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UIPanelControl1Client13 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client13(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		public DXTestControl UILabel1Label
		{
			get
			{
				if ((this.mUILabel1Label == null))
				{
					this.mUILabel1Label = new DXTestControl(this);
					#region Search Criteria
					this.mUILabel1Label.SearchProperties[DXTestControl.PropertyNames.Name] = "label1";
					this.mUILabel1Label.SearchProperties[DXTestControl.PropertyNames.ClassName] = "LabelControl";
					this.mUILabel1Label.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUILabel1Label;
			}
		}
		#endregion
		#region Fields
		private UIPanelControl1Client13 mUIPanelControl1Client;
		private DXTestControl mUILabel1Label;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client13 : DXTestControl
	{
		public UIPanelControl1Client13(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UIImageListBoxControl1List UIImageListBoxControl1List
		{
			get
			{
				if ((this.mUIImageListBoxControl1List == null))
				{
					this.mUIImageListBoxControl1List = new UIImageListBoxControl1List(this);
				}
				return this.mUIImageListBoxControl1List;
			}
		}
		#endregion
		#region Fields
		private UIImageListBoxControl1List mUIImageListBoxControl1List;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIImageListBoxControl1List : DXListBox
	{
		public UIImageListBoxControl1List(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "imageListBoxControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageListBoxControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXListBoxItem UIDeliverableListItem
		{
			get
			{
				if ((this.mUIDeliverableListItem == null))
				{
					this.mUIDeliverableListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIDeliverableListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "imageListBoxControl1Item[1]";
					this.mUIDeliverableListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageListBoxControlItem";
					this.mUIDeliverableListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIDeliverableListItem;
			}
		}
		public DXListBoxItem UITaskListItem
		{
			get
			{
				if ((this.mUITaskListItem == null))
				{
					this.mUITaskListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUITaskListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "imageListBoxControl1Item[2]";
					this.mUITaskListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageListBoxControlItem";
					this.mUITaskListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUITaskListItem;
			}
		}
		public DXListBoxItem UIProjectListItem
		{
			get
			{
				if ((this.mUIProjectListItem == null))
				{
					this.mUIProjectListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIProjectListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "imageListBoxControl1Item[0]";
					this.mUIProjectListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ImageListBoxControlItem";
					this.mUIProjectListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIProjectListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUIDeliverableListItem;
		private DXListBoxItem mUITaskListItem;
		private DXListBoxItem mUIProjectListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList16 : DXTreeList
	{
		public UITreeList1TreeList16(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode36 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode36(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode1TreeListNode19 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode19(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode2TreeListNode13 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode13(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode36 mUINode0TreeListNode;
		private UINode1TreeListNode19 mUINode1TreeListNode;
		private UINode2TreeListNode13 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode36 : DXTreeListNode
	{
		public UINode0TreeListNode36(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode114 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode114(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public UINode0TreeListNode116 UINode0TreeListNode11
		{
			get
			{
				if ((this.mUINode0TreeListNode11 == null))
				{
					this.mUINode0TreeListNode11 = new UINode0TreeListNode116(this);
				}
				return this.mUINode0TreeListNode11;
			}
		}
		public UINode1TreeListNode18 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode18(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode114 mUINode0TreeListNode1;
		private UINode0TreeListNode116 mUINode0TreeListNode11;
		private UINode1TreeListNode18 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode114 : DXTreeListNode
	{
		public UINode0TreeListNode114(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode37 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode37(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode2TreeListNode11 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode11(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode37 mUINode0TreeListNode;
		private UINode2TreeListNode11 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode37 : DXTreeListNode
	{
		public UINode0TreeListNode37(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIThistaskismineATreeListCell
		{
			get
			{
				if ((this.mUIThistaskismineATreeListCell == null))
				{
					this.mUIThistaskismineATreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIThistaskismineATreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIThistaskismineATreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIThistaskismineATreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIThistaskismineATreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIThistaskismineATreeListCell;
			}
		}
		public UINode0TreeListNode115 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode115(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIThistaskismineATreeListCell;
		private UINode0TreeListNode115 mUINode0TreeListNode1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode115 : DXTreeListNode
	{
		public UINode0TreeListNode115(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIDeliverableTreeListCell
		{
			get
			{
				if ((this.mUIDeliverableTreeListCell == null))
				{
					this.mUIDeliverableTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIDeliverableTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIDeliverableTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIDeliverableTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
					this.mUIDeliverableTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIDeliverableTreeListCell;
			}
		}
		public DXTestControl UINode0TreeListNodeStateImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeStateImage == null))
				{
					this.mUINode0TreeListNodeStateImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeStateImage";
					this.mUINode0TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
					this.mUINode0TreeListNodeStateImage.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode0TreeListNodeStateImage;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIDeliverableTreeListCell;
		private DXTestControl mUINode0TreeListNodeStateImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode11 : DXTreeListNode
	{
		public UINode2TreeListNode11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIDeliverableTreeListCell
		{
			get
			{
				if ((this.mUIDeliverableTreeListCell == null))
				{
					this.mUIDeliverableTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIDeliverableTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIDeliverableTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIDeliverableTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIDeliverableTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIDeliverableTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIDeliverableTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode116 : DXTreeListNode
	{
		public UINode0TreeListNode116(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode38 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode38(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public DXTreeListCell UIPlanningTreeListCell
		{
			get
			{
				if ((this.mUIPlanningTreeListCell == null))
				{
					this.mUIPlanningTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIPlanningTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIPlanningTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIPlanningTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIPlanningTreeListCell;
			}
		}
		public UINode3TreeListNode UINode3TreeListNode
		{
			get
			{
				if ((this.mUINode3TreeListNode == null))
				{
					this.mUINode3TreeListNode = new UINode3TreeListNode(this);
				}
				return this.mUINode3TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode38 mUINode0TreeListNode;
		private DXTreeListCell mUIPlanningTreeListCell;
		private UINode3TreeListNode mUINode3TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode38 : DXTreeListNode
	{
		public UINode0TreeListNode38(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIMarketresearchTreeListCell
		{
			get
			{
				if ((this.mUIMarketresearchTreeListCell == null))
				{
					this.mUIMarketresearchTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIMarketresearchTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIMarketresearchTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIMarketresearchTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIMarketresearchTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIMarketresearchTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode3TreeListNode : DXTreeListNode
	{
		public UINode3TreeListNode(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UITaskTreeListCell
		{
			get
			{
				if ((this.mUITaskTreeListCell == null))
				{
					this.mUITaskTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUITaskTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUITaskTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUITaskTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUITaskTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUITaskTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode18 : DXTreeListNode
	{
		public UINode1TreeListNode18(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode39 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode39(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode39 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode39 : DXTreeListNode
	{
		public UINode0TreeListNode39(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIDesignofawebpagesTreeListCell
		{
			get
			{
				if ((this.mUIDesignofawebpagesTreeListCell == null))
				{
					this.mUIDesignofawebpagesTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIDesignofawebpagesTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIDesignofawebpagesTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIDesignofawebpagesTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIDesignofawebpagesTreeListCell;
			}
		}
		public UINode0TreeListNode117 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode117(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIDesignofawebpagesTreeListCell;
		private UINode0TreeListNode117 mUINode0TreeListNode1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode117 : DXTreeListNode
	{
		public UINode0TreeListNode117(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIMarketresearchTreeListCell
		{
			get
			{
				if ((this.mUIMarketresearchTreeListCell == null))
				{
					this.mUIMarketresearchTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIMarketresearchTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIMarketresearchTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIMarketresearchTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIMarketresearchTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIMarketresearchTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode19 : DXTreeListNode
	{
		public UINode1TreeListNode19(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTestControl UINode1TreeListNodeStateImage
		{
			get
			{
				if ((this.mUINode1TreeListNodeStateImage == null))
				{
					this.mUINode1TreeListNodeStateImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode1TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeStateImage";
					this.mUINode1TreeListNodeStateImage.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode1TreeListNodeStateImage;
			}
		}
		public UINode2TreeListNode12 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode12(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		public UINode3TreeListNode1 UINode3TreeListNode
		{
			get
			{
				if ((this.mUINode3TreeListNode == null))
				{
					this.mUINode3TreeListNode = new UINode3TreeListNode1(this);
				}
				return this.mUINode3TreeListNode;
			}
		}
		public UINode1TreeListNode110 UINode1TreeListNode1
		{
			get
			{
				if ((this.mUINode1TreeListNode1 == null))
				{
					this.mUINode1TreeListNode1 = new UINode1TreeListNode110(this);
				}
				return this.mUINode1TreeListNode1;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode1TreeListNodeStateImage;
		private UINode2TreeListNode12 mUINode2TreeListNode;
		private UINode3TreeListNode1 mUINode3TreeListNode;
		private UINode1TreeListNode110 mUINode1TreeListNode1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode12 : DXTreeListNode
	{
		public UINode2TreeListNode12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UITaskTreeListCell
		{
			get
			{
				if ((this.mUITaskTreeListCell == null))
				{
					this.mUITaskTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUITaskTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUITaskTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUITaskTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUITaskTreeListCell;
			}
		}
		public DXTestControl UINode2TreeListNodeStateImage
		{
			get
			{
				if ((this.mUINode2TreeListNodeStateImage == null))
				{
					this.mUINode2TreeListNodeStateImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode2TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
					this.mUINode2TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeStateImage";
					this.mUINode2TreeListNodeStateImage.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode2TreeListNodeStateImage;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUITaskTreeListCell;
		private DXTestControl mUINode2TreeListNodeStateImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode3TreeListNode1 : DXTreeListNode
	{
		public UINode3TreeListNode1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIItemTreeListCell
		{
			get
			{
				if ((this.mUIItemTreeListCell == null))
				{
					this.mUIItemTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIItemTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIItemTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIItemTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIItemTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIItemTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode110 : DXTreeListNode
	{
		public UINode1TreeListNode110(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIThistaskisnotmineBTreeListCell
		{
			get
			{
				if ((this.mUIThistaskisnotmineBTreeListCell == null))
				{
					this.mUIThistaskisnotmineBTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIThistaskisnotmineBTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIThistaskisnotmineBTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIThistaskisnotmineBTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUIThistaskisnotmineBTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIThistaskisnotmineBTreeListCell;
			}
		}
		public DXTestControl UINode1TreeListNodeStateImage
		{
			get
			{
				if ((this.mUINode1TreeListNodeStateImage == null))
				{
					this.mUINode1TreeListNodeStateImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode1TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeStateImage";
					this.mUINode1TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUINode1TreeListNodeStateImage.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode1TreeListNodeStateImage;
			}
		}
		public UINode0TreeListNode40 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode40(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIThistaskisnotmineBTreeListCell;
		private DXTestControl mUINode1TreeListNodeStateImage;
		private UINode0TreeListNode40 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode40 : DXTreeListNode
	{
		public UINode0TreeListNode40(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIThistaskisnotmineCTreeListCell
		{
			get
			{
				if ((this.mUIThistaskisnotmineCTreeListCell == null))
				{
					this.mUIThistaskisnotmineCTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIThistaskisnotmineCTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIThistaskisnotmineCTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIThistaskisnotmineCTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
					this.mUIThistaskisnotmineCTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIThistaskisnotmineCTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIThistaskisnotmineCTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode13 : DXTreeListNode
	{
		public UINode2TreeListNode13(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode41 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode41(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode41 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode41 : DXTreeListNode
	{
		public UINode0TreeListNode41(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public UINode2TreeListNode14 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode14(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		public UINode1TreeListNode20 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode20(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		public UINode3TreeListNode2 UINode3TreeListNode
		{
			get
			{
				if ((this.mUINode3TreeListNode == null))
				{
					this.mUINode3TreeListNode = new UINode3TreeListNode2(this);
				}
				return this.mUINode3TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode2TreeListNode14 mUINode2TreeListNode;
		private UINode1TreeListNode20 mUINode1TreeListNode;
		private UINode3TreeListNode2 mUINode3TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode14 : DXTreeListNode
	{
		public UINode2TreeListNode14(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTestControl UINode2TreeListNodeStateImage
		{
			get
			{
				if ((this.mUINode2TreeListNodeStateImage == null))
				{
					this.mUINode2TreeListNodeStateImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode2TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
					this.mUINode2TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeStateImage";
					this.mUINode2TreeListNodeStateImage.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode2TreeListNodeStateImage;
			}
		}
		public UINode0TreeListNode42 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode42(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public DXTreeListCell UIThistaskisnotmineCTreeListCell
		{
			get
			{
				if ((this.mUIThistaskisnotmineCTreeListCell == null))
				{
					this.mUIThistaskisnotmineCTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIThistaskisnotmineCTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIThistaskisnotmineCTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIThistaskisnotmineCTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIThistaskisnotmineCTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode2TreeListNodeStateImage;
		private UINode0TreeListNode42 mUINode0TreeListNode;
		private DXTreeListCell mUIThistaskisnotmineCTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode42 : DXTreeListNode
	{
		public UINode0TreeListNode42(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIProjectTreeListCell
		{
			get
			{
				if ((this.mUIProjectTreeListCell == null))
				{
					this.mUIProjectTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIProjectTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIProjectTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIProjectTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIProjectTreeListCell;
			}
		}
		public DXTestControl UINode0TreeListNodeStateImage
		{
			get
			{
				if ((this.mUINode0TreeListNodeStateImage == null))
				{
					this.mUINode0TreeListNodeStateImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeStateImage";
					this.mUINode0TreeListNodeStateImage.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode0TreeListNodeStateImage;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIProjectTreeListCell;
		private DXTestControl mUINode0TreeListNodeStateImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode20 : DXTreeListNode
	{
		public UINode1TreeListNode20(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIThistaskisnotmineCTreeListCell
		{
			get
			{
				if ((this.mUIThistaskisnotmineCTreeListCell == null))
				{
					this.mUIThistaskisnotmineCTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIThistaskisnotmineCTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIThistaskisnotmineCTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIThistaskisnotmineCTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIThistaskisnotmineCTreeListCell;
			}
		}
		public UINode0TreeListNode43 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode43(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public DXTestControl UINode1TreeListNodeStateImage
		{
			get
			{
				if ((this.mUINode1TreeListNodeStateImage == null))
				{
					this.mUINode1TreeListNodeStateImage = new DXTestControl(this);
					#region Search Criteria
					this.mUINode1TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
					this.mUINode1TreeListNodeStateImage.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNodeStateImage";
					this.mUINode1TreeListNodeStateImage.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode1TreeListNodeStateImage;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIThistaskisnotmineCTreeListCell;
		private UINode0TreeListNode43 mUINode0TreeListNode;
		private DXTestControl mUINode1TreeListNodeStateImage;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode43 : DXTreeListNode
	{
		public UINode0TreeListNode43(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTestControl UINode0TreeListRowIndicator
		{
			get
			{
				if ((this.mUINode0TreeListRowIndicator == null))
				{
					this.mUINode0TreeListRowIndicator = new DXTestControl(this);
					#region Search Criteria
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
					this.mUINode0TreeListRowIndicator.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListRowIndicator";
					this.mUINode0TreeListRowIndicator.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUINode0TreeListRowIndicator;
			}
		}
		public DXTreeListCell UITaskTreeListCell
		{
			get
			{
				if ((this.mUITaskTreeListCell == null))
				{
					this.mUITaskTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUITaskTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUITaskTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUITaskTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUITaskTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINode0TreeListRowIndicator;
		private DXTreeListCell mUITaskTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode3TreeListNode2 : DXTreeListNode
	{
		public UINode3TreeListNode2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIThistaskisnotmineBTreeListCell
		{
			get
			{
				if ((this.mUIThistaskisnotmineBTreeListCell == null))
				{
					this.mUIThistaskisnotmineBTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIThistaskisnotmineBTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "treeListColumn1";
					this.mUIThistaskisnotmineBTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIThistaskisnotmineBTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Drag Drop");
					#endregion
				}
				return this.mUIThistaskisnotmineBTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIThistaskisnotmineBTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow5 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow5()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient8 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient8(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		public UIPanelControl1Client14 UIPanelControl1Client
		{
			get
			{
				if ((this.mUIPanelControl1Client == null))
				{
					this.mUIPanelControl1Client = new UIPanelControl1Client14(this);
				}
				return this.mUIPanelControl1Client;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient8 mUIGcNavigationsClient;
		private UIPanelControl1Client14 mUIPanelControl1Client;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient8 : DXTestControl
	{
		public UIGcNavigationsClient8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl7 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl7(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl7 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl7 : DXTestControl
	{
		public UIAccordionControl1AccordionControl7(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UIMiscellaneousAccordionControlGroup2 UIMiscellaneousAccordionControlGroup
		{
			get
			{
				if ((this.mUIMiscellaneousAccordionControlGroup == null))
				{
					this.mUIMiscellaneousAccordionControlGroup = new UIMiscellaneousAccordionControlGroup2(this);
				}
				return this.mUIMiscellaneousAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIMiscellaneousAccordionControlGroup2 mUIMiscellaneousAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIMiscellaneousAccordionControlGroup2 : DXTestControl
	{
		public UIMiscellaneousAccordionControlGroup2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Miscellaneous";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public DXTestControl UINodesVisibilityAccordionControlItem
		{
			get
			{
				if ((this.mUINodesVisibilityAccordionControlItem == null))
				{
					this.mUINodesVisibilityAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUINodesVisibilityAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Nodes Visibility";
					this.mUINodesVisibilityAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUINodesVisibilityAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUINodesVisibilityAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINodesVisibilityAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPanelControl1Client14 : DXTestControl
	{
		public UIPanelControl1Client14(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "panelControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "PanelControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UIGcContainerClient10 UIGcContainerClient
		{
			get
			{
				if ((this.mUIGcContainerClient == null))
				{
					this.mUIGcContainerClient = new UIGcContainerClient10(this);
				}
				return this.mUIGcContainerClient;
			}
		}
		#endregion
		#region Fields
		private UIGcContainerClient10 mUIGcContainerClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcContainerClient10 : DXTestControl
	{
		public UIGcContainerClient10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcContainer";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UINodesVisibilityCustom UINodesVisibilityCustom
		{
			get
			{
				if ((this.mUINodesVisibilityCustom == null))
				{
					this.mUINodesVisibilityCustom = new UINodesVisibilityCustom(this);
				}
				return this.mUINodesVisibilityCustom;
			}
		}
		#endregion
		#region Fields
		private UINodesVisibilityCustom mUINodesVisibilityCustom;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINodesVisibilityCustom : DXTestControl
	{
		public UINodesVisibilityCustom(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "NodesVisibility";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "NodesVisibility";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UITreeList1TreeList17 UITreeList1TreeList
		{
			get
			{
				if ((this.mUITreeList1TreeList == null))
				{
					this.mUITreeList1TreeList = new UITreeList1TreeList17(this);
				}
				return this.mUITreeList1TreeList;
			}
		}
		public UIListBoxControl1List UIListBoxControl1List
		{
			get
			{
				if ((this.mUIListBoxControl1List == null))
				{
					this.mUIListBoxControl1List = new UIListBoxControl1List(this);
				}
				return this.mUIListBoxControl1List;
			}
		}
		#endregion
		#region Fields
		private UITreeList1TreeList17 mUITreeList1TreeList;
		private UIListBoxControl1List mUIListBoxControl1List;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UITreeList1TreeList17 : DXTreeList
	{
		public UITreeList1TreeList17(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "treeList1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeList";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode44 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode44(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode44 mUINode0TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode44 : DXTreeListNode
	{
		public UINode0TreeListNode44(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode118 UINode0TreeListNode1
		{
			get
			{
				if ((this.mUINode0TreeListNode1 == null))
				{
					this.mUINode0TreeListNode1 = new UINode0TreeListNode118(this);
				}
				return this.mUINode0TreeListNode1;
			}
		}
		public UINode2TreeListNode16 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode16(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode118 mUINode0TreeListNode1;
		private UINode2TreeListNode16 mUINode2TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode118 : DXTreeListNode
	{
		public UINode0TreeListNode118(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "6";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UINode2TreeListNode15 UINode2TreeListNode
		{
			get
			{
				if ((this.mUINode2TreeListNode == null))
				{
					this.mUINode2TreeListNode = new UINode2TreeListNode15(this);
				}
				return this.mUINode2TreeListNode;
			}
		}
		public DXTreeListCell UISalesandMarketingTreeListCell
		{
			get
			{
				if ((this.mUISalesandMarketingTreeListCell == null))
				{
					this.mUISalesandMarketingTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUISalesandMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUISalesandMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUISalesandMarketingTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
					this.mUISalesandMarketingTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUISalesandMarketingTreeListCell;
			}
		}
		#endregion
		#region Fields
		private UINode2TreeListNode15 mUINode2TreeListNode;
		private DXTreeListCell mUISalesandMarketingTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode15 : DXTreeListNode
	{
		public UINode2TreeListNode15(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "7";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UINode1TreeListNode21 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode21(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode1TreeListNode21 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode21 : DXTreeListNode
	{
		public UINode1TreeListNode21(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "8";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIFieldOfficeJapanTreeListCell
		{
			get
			{
				if ((this.mUIFieldOfficeJapanTreeListCell == null))
				{
					this.mUIFieldOfficeJapanTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIFieldOfficeJapanTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIFieldOfficeJapanTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIFieldOfficeJapanTreeListCell.SearchProperties[DXTestControl.PropertyNames.ParentCount] = "9";
					this.mUIFieldOfficeJapanTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUIFieldOfficeJapanTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIFieldOfficeJapanTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode2TreeListNode16 : DXTreeListNode
	{
		public UINode2TreeListNode16(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node2";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UINode0TreeListNode45 UINode0TreeListNode
		{
			get
			{
				if ((this.mUINode0TreeListNode == null))
				{
					this.mUINode0TreeListNode = new UINode0TreeListNode45(this);
				}
				return this.mUINode0TreeListNode;
			}
		}
		public UINode1TreeListNode22 UINode1TreeListNode
		{
			get
			{
				if ((this.mUINode1TreeListNode == null))
				{
					this.mUINode1TreeListNode = new UINode1TreeListNode22(this);
				}
				return this.mUINode1TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode0TreeListNode45 mUINode0TreeListNode;
		private UINode1TreeListNode22 mUINode1TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode0TreeListNode45 : DXTreeListNode
	{
		public UINode0TreeListNode45(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node0";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public DXTreeListCell UIConsumerElectronicsDTreeListCell
		{
			get
			{
				if ((this.mUIConsumerElectronicsDTreeListCell == null))
				{
					this.mUIConsumerElectronicsDTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUIConsumerElectronicsDTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUIConsumerElectronicsDTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUIConsumerElectronicsDTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUIConsumerElectronicsDTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUIConsumerElectronicsDTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode1TreeListNode22 : DXTreeListNode
	{
		public UINode1TreeListNode22(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public UINode3TreeListNode3 UINode3TreeListNode
		{
			get
			{
				if ((this.mUINode3TreeListNode == null))
				{
					this.mUINode3TreeListNode = new UINode3TreeListNode3(this);
				}
				return this.mUINode3TreeListNode;
			}
		}
		#endregion
		#region Fields
		private UINode3TreeListNode3 mUINode3TreeListNode;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UINode3TreeListNode3 : DXTreeListNode
	{
		public UINode3TreeListNode3(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Node3";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListNode";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public DXTreeListCell UICustomerServicesTreeListCell
		{
			get
			{
				if ((this.mUICustomerServicesTreeListCell == null))
				{
					this.mUICustomerServicesTreeListCell = new DXTreeListCell(this);
					#region Search Criteria
					this.mUICustomerServicesTreeListCell.SearchProperties[DXTestControl.PropertyNames.Name] = "colDepartment";
					this.mUICustomerServicesTreeListCell.SearchProperties[DXTestControl.PropertyNames.ClassName] = "TreeListCell";
					this.mUICustomerServicesTreeListCell.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUICustomerServicesTreeListCell;
			}
		}
		#endregion
		#region Fields
		private DXTreeListCell mUICustomerServicesTreeListCell;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIListBoxControl1List : DXListBox
	{
		public UIListBoxControl1List(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "listBoxControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
			#endregion
		}
		#region Properties
		public DXListBoxItem UICustomerServicesListItem
		{
			get
			{
				if ((this.mUICustomerServicesListItem == null))
				{
					this.mUICustomerServicesListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUICustomerServicesListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBoxControl1Item[0]";
					this.mUICustomerServicesListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUICustomerServicesListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUICustomerServicesListItem;
			}
		}
		public DXListBoxItem UIFieldOfficeJapanListItem
		{
			get
			{
				if ((this.mUIFieldOfficeJapanListItem == null))
				{
					this.mUIFieldOfficeJapanListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIFieldOfficeJapanListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBoxControl1Item[1]";
					this.mUIFieldOfficeJapanListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIFieldOfficeJapanListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUIFieldOfficeJapanListItem;
			}
		}
		public DXListBoxItem UIConsumerElectronicsDListItem
		{
			get
			{
				if ((this.mUIConsumerElectronicsDListItem == null))
				{
					this.mUIConsumerElectronicsDListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUIConsumerElectronicsDListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBoxControl1Item[2]";
					this.mUIConsumerElectronicsDListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUIConsumerElectronicsDListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUIConsumerElectronicsDListItem;
			}
		}
		public DXListBoxItem UISalesandMarketingListItem
		{
			get
			{
				if ((this.mUISalesandMarketingListItem == null))
				{
					this.mUISalesandMarketingListItem = new DXListBoxItem(this);
					#region Search Criteria
					this.mUISalesandMarketingListItem.SearchProperties[DXTestControl.PropertyNames.Name] = "listBoxControl1Item[3]";
					this.mUISalesandMarketingListItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "ListBoxControlItem";
					this.mUISalesandMarketingListItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Visibility");
					#endregion
				}
				return this.mUISalesandMarketingListItem;
			}
		}
		#endregion
		#region Fields
		private DXListBoxItem mUICustomerServicesListItem;
		private DXListBoxItem mUIFieldOfficeJapanListItem;
		private DXListBoxItem mUIConsumerElectronicsDListItem;
		private DXListBoxItem mUISalesandMarketingListItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDevExpressWinFunctioWindow : WinWindow
	{
		public UIDevExpressWinFunctioWindow()
		{
			#region Search Criteria
			this.SearchProperties[WinWindow.PropertyNames.Name] = "DevExpress.Win.FunctionalTests - Microsoft Visual Studio (Administrator)";
			this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("DevExpress.Win.FunctionalTests - Microsoft Visual Studio (Administrator)");
			#endregion
		}
		#region Properties
		public UIPropertiesPane UIPropertiesPane
		{
			get
			{
				if ((this.mUIPropertiesPane == null))
				{
					this.mUIPropertiesPane = new UIPropertiesPane(this);
				}
				return this.mUIPropertiesPane;
			}
		}
		#endregion
		#region Fields
		private UIPropertiesPane mUIPropertiesPane;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertiesPane : WpfPane
	{
		public UIPropertiesPane(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ViewPresenter";
			this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ST:0:0:{eefa5220-e298-11d0-8f78-00a0c9110057}";
			this.WindowTitles.Add("DevExpress.Win.FunctionalTests - Microsoft Visual Studio (Administrator)");
			#endregion
		}
		#region Properties
		public UIPropertiesPane1 UIPropertiesPane1
		{
			get
			{
				if ((this.mUIPropertiesPane1 == null))
				{
					this.mUIPropertiesPane1 = new UIPropertiesPane1(this);
				}
				return this.mUIPropertiesPane1;
			}
		}
		#endregion
		#region Fields
		private UIPropertiesPane1 mUIPropertiesPane1;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertiesPane1 : WpfPane
	{
		public UIPropertiesPane1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.GenericPane";
			this.SearchProperties[WpfPane.PropertyNames.Name] = "Properties";
			this.WindowTitles.Add("DevExpress.Win.FunctionalTests - Microsoft Visual Studio (Administrator)");
			#endregion
		}
		#region Properties
		public UIPropertyGridClient UIPropertyGridClient
		{
			get
			{
				if ((this.mUIPropertyGridClient == null))
				{
					this.mUIPropertyGridClient = new UIPropertyGridClient(this);
				}
				return this.mUIPropertyGridClient;
			}
		}
		#endregion
		#region Fields
		private UIPropertyGridClient mUIPropertyGridClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIPropertyGridClient : WinClient
	{
		public UIPropertyGridClient(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[WinControl.PropertyNames.Name] = "PropertyGrid";
			this.WindowTitles.Add("DevExpress.Win.FunctionalTests - Microsoft Visual Studio (Administrator)");
			#endregion
		}
		#region Properties
		public WinToolBar UIToolBarToolBar
		{
			get
			{
				if ((this.mUIToolBarToolBar == null))
				{
					this.mUIToolBarToolBar = new WinToolBar(this);
					#region Search Criteria
					this.mUIToolBarToolBar.SearchProperties[WinToolBar.PropertyNames.Name] = "ToolBar";
					this.mUIToolBarToolBar.WindowTitles.Add("DevExpress.Win.FunctionalTests - Microsoft Visual Studio (Administrator)");
					#endregion
				}
				return this.mUIToolBarToolBar;
			}
		}
		#endregion
		#region Fields
		private WinToolBar mUIToolBarToolBar;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow6 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow6()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code)";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient9 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient9(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient9 mUIGcNavigationsClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient9 : DXTestControl
	{
		public UIGcNavigationsClient9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl8 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl8(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl8 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl8 : DXTestControl
	{
		public UIAccordionControl1AccordionControl8(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UILayoutAccordionControlGroup2 UILayoutAccordionControlGroup
		{
			get
			{
				if ((this.mUILayoutAccordionControlGroup == null))
				{
					this.mUILayoutAccordionControlGroup = new UILayoutAccordionControlGroup2(this);
				}
				return this.mUILayoutAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UILayoutAccordionControlGroup2 mUILayoutAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UILayoutAccordionControlGroup2 : DXTestControl
	{
		public UILayoutAccordionControlGroup2(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Layout";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIFixedColumnsAccordionControlItem
		{
			get
			{
				if ((this.mUIFixedColumnsAccordionControlItem == null))
				{
					this.mUIFixedColumnsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIFixedColumnsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Fixed Columns";
					this.mUIFixedColumnsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIFixedColumnsAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUIFixedColumnsAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIFixedColumnsAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow7 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow7()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code)";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient10 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient10(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient10 mUIGcNavigationsClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient10 : DXTestControl
	{
		public UIGcNavigationsClient10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl9 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl9(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl9 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl9 : DXTestControl
	{
		public UIAccordionControl1AccordionControl9(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIDataFilteringAccordionControlGroup UIDataFilteringAccordionControlGroup
		{
			get
			{
				if ((this.mUIDataFilteringAccordionControlGroup == null))
				{
					this.mUIDataFilteringAccordionControlGroup = new UIDataFilteringAccordionControlGroup(this);
				}
				return this.mUIDataFilteringAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIDataFilteringAccordionControlGroup mUIDataFilteringAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDataFilteringAccordionControlGroup : DXTestControl
	{
		public UIDataFilteringAccordionControlGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Data Filtering";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UINodesFilteringAccordionControlItem
		{
			get
			{
				if ((this.mUINodesFilteringAccordionControlItem == null))
				{
					this.mUINodesFilteringAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUINodesFilteringAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Nodes Filtering";
					this.mUINodesFilteringAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUINodesFilteringAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUINodesFilteringAccordionControlItem;
			}
		}
		public DXTestControl UINodesVisibilityAccordionControlItem
		{
			get
			{
				if ((this.mUINodesVisibilityAccordionControlItem == null))
				{
					this.mUINodesVisibilityAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUINodesVisibilityAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Nodes Visibility";
					this.mUINodesVisibilityAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUINodesVisibilityAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUINodesVisibilityAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUINodesFilteringAccordionControlItem;
		private DXTestControl mUINodesVisibilityAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow8 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow8()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient11 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient11(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient11 mUIGcNavigationsClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient11 : DXTestControl
	{
		public UIGcNavigationsClient11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl10 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl10(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl10 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl10 : DXTestControl
	{
		public UIAccordionControl1AccordionControl10(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering");
			#endregion
		}
		#region Properties
		public UIDataEditingAccordionControlGroup UIDataEditingAccordionControlGroup
		{
			get
			{
				if ((this.mUIDataEditingAccordionControlGroup == null))
				{
					this.mUIDataEditingAccordionControlGroup = new UIDataEditingAccordionControlGroup(this);
				}
				return this.mUIDataEditingAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIDataEditingAccordionControlGroup mUIDataEditingAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDataEditingAccordionControlGroup : DXTestControl
	{
		public UIDataEditingAccordionControlGroup(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Data Editing";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering");
			#endregion
		}
		#region Properties
		public DXTestControl UIMultiEditorsAccordionControlItem
		{
			get
			{
				if ((this.mUIMultiEditorsAccordionControlItem == null))
				{
					this.mUIMultiEditorsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIMultiEditorsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Multi Editors";
					this.mUIMultiEditorsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIMultiEditorsAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code) - Nodes Filtering");
					#endregion
				}
				return this.mUIMultiEditorsAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIMultiEditorsAccordionControlItem;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIXtraTreeListFeaturesWindow9 : DXWindow
	{
		public UIXtraTreeListFeaturesWindow9()
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "The XtraTreeList Suite by DevExpress (C# code)";
			this.SearchProperties.Add(new PropertyExpression(DXTestControl.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIGcNavigationsClient12 UIGcNavigationsClient
		{
			get
			{
				if ((this.mUIGcNavigationsClient == null))
				{
					this.mUIGcNavigationsClient = new UIGcNavigationsClient12(this);
				}
				return this.mUIGcNavigationsClient;
			}
		}
		#endregion
		#region Fields
		private UIGcNavigationsClient12 mUIGcNavigationsClient;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIGcNavigationsClient12 : DXTestControl
	{
		public UIGcNavigationsClient12(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "gcNavigations";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "GroupControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIAccordionControl1AccordionControl11 UIAccordionControl1AccordionControl
		{
			get
			{
				if ((this.mUIAccordionControl1AccordionControl == null))
				{
					this.mUIAccordionControl1AccordionControl = new UIAccordionControl1AccordionControl11(this);
				}
				return this.mUIAccordionControl1AccordionControl;
			}
		}
		#endregion
		#region Fields
		private UIAccordionControl1AccordionControl11 mUIAccordionControl1AccordionControl;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIAccordionControl1AccordionControl11 : DXTestControl
	{
		public UIAccordionControl1AccordionControl11(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "accordionControl1";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControl";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public UIDataEditingAccordionControlGroup1 UIDataEditingAccordionControlGroup
		{
			get
			{
				if ((this.mUIDataEditingAccordionControlGroup == null))
				{
					this.mUIDataEditingAccordionControlGroup = new UIDataEditingAccordionControlGroup1(this);
				}
				return this.mUIDataEditingAccordionControlGroup;
			}
		}
		#endregion
		#region Fields
		private UIDataEditingAccordionControlGroup1 mUIDataEditingAccordionControlGroup;
		#endregion
	}
	[GeneratedCode("Coded UITest Builder", "10.0.40219.1")]
	public class UIDataEditingAccordionControlGroup1 : DXTestControl
	{
		public UIDataEditingAccordionControlGroup1(UITestControl searchLimitContainer) : 
				base(searchLimitContainer)
		{
			#region Search Criteria
			this.SearchProperties[DXTestControl.PropertyNames.Name] = "Data Editing";
			this.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlGroup";
			this.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
			#endregion
		}
		#region Properties
		public DXTestControl UIMultiEditorsAccordionControlItem
		{
			get
			{
				if ((this.mUIMultiEditorsAccordionControlItem == null))
				{
					this.mUIMultiEditorsAccordionControlItem = new DXTestControl(this);
					#region Search Criteria
					this.mUIMultiEditorsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.Name] = "Multi Editors";
					this.mUIMultiEditorsAccordionControlItem.SearchProperties[DXTestControl.PropertyNames.ClassName] = "AccordionControlItem";
					this.mUIMultiEditorsAccordionControlItem.WindowTitles.Add("The XtraTreeList Suite by DevExpress (C# code)");
					#endregion
				}
				return this.mUIMultiEditorsAccordionControlItem;
			}
		}
		#endregion
		#region Fields
		private DXTestControl mUIMultiEditorsAccordionControlItem;
		#endregion
	}
}
