<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes"
                    xmlns:dx="clr-namespace:DevExpress.Xpf.Core"
                    xmlns:dxb="clr-namespace:DevExpress.Xpf.Bars"
                    xmlns:dxcn="clr-namespace:DevExpress.Xpf.Core.Native"
                    xmlns:dxmvvm="clr-namespace:DevExpress.Mvvm.UI">

    <ResourceDictionary.MergedDictionaries>
        <dxt:ResourceDictionaryEx Source="{dx:DXTabControlResource Themes/Generic.xaml}" />
        <dxt:ResourceDictionaryEx Source="{dx:DXTabControlResource Themes/Generic.Window.xaml}" />
    </ResourceDictionary.MergedDictionaries>

    <!--Tab Button Background Templates-->
    <SolidColorBrush x:Key="Button.Normal.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="Button.Hover.BorderBrush" Color="#FF5379AE"/>
    <LinearGradientBrush x:Key="Button.Hover.Background" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFCDE1FA" Offset="0" />
        <GradientStop Color="#FFA6C8EF" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Button.Pressed.BorderBrush" Color="#FF3E6296"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FF5576A6"/>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonNormalBackground}">
        <Border Background="{StaticResource Button.Normal.Background}"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonHoverBackground}">
        <Border Background="{StaticResource Button.Hover.BorderBrush}" CornerRadius="2">
            <Border CornerRadius="1" Margin="1" Background="{StaticResource Button.Hover.Background}"/>
        </Border>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=ButtonPressedBackground}">
        <Border Background="{StaticResource Button.Pressed.BorderBrush}" CornerRadius="2">
            <Border CornerRadius="1" Margin="1" Background="{StaticResource Button.Pressed.Background}" />
        </Border>
    </DataTemplate>

    <!--Tab Button Styles-->
    <SolidColorBrush x:Key="Button.Normal.Foreground" Color="#FF2D4F85"/>
    <SolidColorBrush x:Key="Button.Hover.Foreground" Color="#FF52698F"/>
    <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="#FF4B5D7C"/>
    <Style x:Key="ButtonStyle" BasedOn="{StaticResource ButtonDefaultStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="Foreground" Value="{StaticResource Button.Normal.Foreground}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Button.Hover.Foreground}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{StaticResource Button.Pressed.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HeaderPanelButtonStyle" BasedOn="{StaticResource ButtonStyle}" TargetType="{x:Type ButtonBase}">
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="2,0,2,0"/>
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </Style>
    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource ButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="14" />
        <Setter Property="Height" Value="14" />
        <Setter Property="Margin" Value="7,0,-3,0"/>
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=CloseButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
        <Setter Property="dxcn:TabOrientablePanel.ChildMargin" Value="3,0,3,0"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MainNewButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PrevButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=NextButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type RepeatButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
    </Style>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=MenuButtonStyle}" BasedOn="{StaticResource HeaderPanelButtonStyle}" TargetType="{x:Type ToggleButton}">
        <Setter Property="Content" Value="{dxcn:GlyphControlViewInfo Size=-1}"/>
    </Style>

    <!--TabControl and TabItem Background Templates-->
    <SolidColorBrush x:Key="TabControl.BorderBrush" Color="#FF5A80BD"/>
    <LinearGradientBrush x:Key="TabControl.Background" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FFC7DDF7" Offset="0" />
        <GradientStop Color="#FFB3CEF4" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TabItem.Normal.Background" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FFC5DBF4" Offset="0" />
        <GradientStop Color="#FFB2CAEB" Offset="1" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="TabItem.Selected.Background" StartPoint="0.5,0" EndPoint="0.5,1">
        <GradientStop Color="#FFE2EEFD" Offset="0" />
        <GradientStop Color="#FFC8DEF7" Offset="1" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.Focused.Background" Color="Transparent"/>
    <LinearGradientBrush x:Key="TabItem.Focused.BorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#323A69BC" Offset="0"/>
        <GradientStop Color="#7F3A69BC" Offset="1"/>
    </LinearGradientBrush>
    <DataTemplate x:Key="{dxt:DXTabControlThemeKey ResourceKey=Background}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBackground="{StaticResource TabControl.BorderBrush}" BorderCornerRadius="3" BorderPadding="1" BorderMode="BorderBackground">
            <dxcn:TabBorder BorderBackground="{StaticResource TabControl.Background}" BorderCornerRadius="2"/>
        </dxcn:TabBorder>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=NormalBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderBackground="{StaticResource TabItem.Normal.Background}"
                        BorderThickness="1,1,1,0" BorderCornerRadius="2,2,0,0" BorderMargin="0,0,1,0" HoldBorderThickness="1" HoldBorderCornerRadius="2" HoldBorderMargin="0,0,1,1"
                        BorderMode="BorderBrush" BackgroundMode="BorderBackground"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=HoverBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderBackground="{StaticResource TabItem.Normal.Background}"
                        BorderThickness="1,1,1,0" BorderCornerRadius="2,2,0,0" BorderMargin="0,0,1,0" HoldBorderThickness="1" HoldBorderCornerRadius="2" HoldBorderMargin="0,0,1,1"
                        BorderMode="BorderBrush" BackgroundMode="BorderBackground">
            <dxcn:TabBorder BorderBackground="White" BorderCornerRadius="1,1,0,0" HoldBorderCornerRadius="1">
                <dxcn:TabBorder.BorderOpacityMask>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                        <GradientStop Color="Transparent" Offset="1"/>
                        <GradientStop Color="Black" Offset="0"/>
                    </LinearGradientBrush>
                </dxcn:TabBorder.BorderOpacityMask>
            </dxcn:TabBorder>
        </dxcn:TabBorder>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=SelectedBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabControl.BorderBrush}" BorderBackground="{StaticResource TabItem.Selected.Background}"
                        BorderThickness="1,1,1,0" BorderCornerRadius="2,2,0,0" BorderMargin="0,-2,1,-1" HoldBorderThickness="1" HoldBorderCornerRadius="2" HoldBorderMargin="0,0,1,1"
                        BorderMode="BorderBrush" BackgroundMode="None"/>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabItemThemeKey ResourceKey=FocusedBackground}">
        <dxcn:TabBorder ViewInfo="{Binding}" BorderBrush="{StaticResource TabItem.Focused.BorderBrush}" BorderBackground="{StaticResource TabItem.Focused.Background}" Opacity="0.5"
                        BorderThickness="2,2,2,0" BorderCornerRadius="2,2,0,0" BorderMargin="1,-1,2,0" HoldBorderThickness="2" HoldBorderCornerRadius="2" HoldBorderMargin="0,0,1,1" 
                        BorderMode="None" BackgroundMode="BorderBrush"/>
    </DataTemplate>

    <!--TabControl and TabItem Styles-->
    <SolidColorBrush x:Key="TabControl.Foreground" Color="Black"/>
    <Style x:Key="{dxt:DXTabControlThemeKey ResourceKey=PanelContainerStyle}" BasedOn="{StaticResource PanelContainerDefaultStyle}" TargetType="{x:Type dxcn:TabPanelContainer}"/>
    <Style TargetType="{x:Type dx:DXTabControl}" BasedOn="{StaticResource TabControlDefaultStyle}">
        <Setter Property="Padding" Value="12"/>
        <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}"/>
    </Style>
    <Style TargetType="{x:Type dx:DXTabItem}" BasedOn="{StaticResource TabItemDefaultStyle}">
        <Setter Property="Padding" Value="9,3,9,3"/>
        <Setter Property="Foreground" Value="{StaticResource TabControl.Foreground}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ViewInfo.IsHeaderOrientationDifferent, RelativeSource={RelativeSource Self}}" Value="True">
                <Setter Property="Padding" Value="8,4,8,4"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{dxt:DXTabItemThemeKey ResourceKey=SeparatorStyle}" TargetType="{x:Type ContentPresenter}" >
        <Setter Property="Visibility" Value="Collapsed"/>
    </Style>

    <!--TabbedWindow-->
    <LinearGradientBrush x:Key="Window.Header.Active.Background" EndPoint="0.5,0.5" StartPoint="0.5,0">
        <GradientStop Color="#FF88AAD7" Offset="0" />
        <GradientStop Color="#FF6489BC" Offset="1" />
        <GradientStop Color="#FF678BBF" Offset="0.5" />
        <GradientStop Color="#FF587DB3" Offset="0.5" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="Window.Header.InActive.Background" EndPoint="0.5,0.5" StartPoint="0.5,0">
        <GradientStop Color="#FFB1C4DD" Offset="1" />
        <GradientStop Color="#FFC3D4EA" Offset="0" />
        <GradientStop Color="#FFB3C5DF" Offset="0.5" />
        <GradientStop Color="#FFABBED9" Offset="0.5" />
    </LinearGradientBrush>
    <SolidColorBrush x:Key="Window.Border.Active.BorderBrush" Color="#FF062B63"/>
    <SolidColorBrush x:Key="Window.Border.Active.Background" Color="#FF6489BC"/>
    <SolidColorBrush x:Key="Window.Border.InActive.BorderBrush" Color="#FF8295B1"/>
    <SolidColorBrush x:Key="Window.Border.InActive.Background" Color="#FFB1C4DD"/>
    
    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=HeaderTemplate}">
        <Border x:Name="border" Background="{StaticResource Window.Header.Active.Background}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter TargetName="border" Property="Background" Value="{StaticResource Window.Header.InActive.Background}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=BorderTemplate}">
        <Border x:Name="border" BorderThickness="1" BorderBrush="{StaticResource Window.Border.Active.BorderBrush}" Background="{StaticResource Window.Border.Active.Background}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource Window.Border.InActive.BorderBrush}"/>
                <Setter TargetName="border" Property="Background" Value="{StaticResource Window.Border.InActive.Background}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MainContainerStyle}" TargetType="Panel">
        <Setter Property="Margin" Value="1"/>
    </Style>
   
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CaptionPresenterStyle}" TargetType="ContentPresenter"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ContentBorderStyle}" TargetType="Border">
        <Setter Property="Margin" Value="5,0,5,5"/>
    </Style>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=ButtonContainerStyle}" TargetType="ItemsControl" BasedOn="{StaticResource DefaultButtonContainerStyle}">
        <Setter Property="Margin" Value="2"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=(dx:FloatingContainer.IsActive)}" Value="False">
                <Setter Property="Opacity" Value="0.5"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MinimizeButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonDefaultStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=RestoreButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonDefaultStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=MaximizeButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonDefaultStyle}"/>
    <Style x:Key="{dxt:DXTabbedWindowThemeKey ResourceKey=CloseButtonStyle}" TargetType="{x:Type Button}" BasedOn="{StaticResource WindowButtonDefaultStyle}"/>
</ResourceDictionary>
