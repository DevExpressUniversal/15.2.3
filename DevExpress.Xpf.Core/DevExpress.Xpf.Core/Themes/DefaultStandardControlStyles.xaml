      <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="clr-namespace:DevExpress.Xpf.Utils.Themes"
	xmlns:dx="clr-namespace:DevExpress.Xpf.Core"
    xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
	xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes"
    xmlns:dxeh="clr-namespace:DevExpress.Xpf.Editors.Helpers">
	<SolidColorBrush x:Key="BaseBrush#FFFFFFFF" Color="#FFFFFFFF" />
	<SolidColorBrush x:Key="BaseBrushBlack" Color="Black" />
	<SolidColorBrush x:Key="BaseBrush#FF4A71AD" Color="#FF4A71AD" />
	<SolidColorBrush x:Key="BaseBrush#00FFFFFF" Color="#00FFFFFF" />
	<SolidColorBrush x:Key="BaseBrush#FF000000" Color="#FF000000" />
	<SolidColorBrush x:Key="BaseBrushTransparent" Color="Transparent" />
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=ScrollViewer, ThemeName=DeepBlue}" TargetType="{x:Type ScrollViewer}">
        <!--BEGIN WPF-->
        <Setter Property="dx:ScrollBarExtensions.AllowMouseScrolling" Value="True"/>
        <Setter Property="dx:ScrollBarExtensions.ScrollBehavior" Value="{dx:ScrollViewerScrollBehavior}"/>
        <Setter Property="dx:ScrollViewerTouchBehavior.IsEnabled" Value="True"/>
        <!--END WPF-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid x:Name="Grid" Background="{TemplateBinding Background}" Margin="{TemplateBinding Margin}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<!--<Border x:Name="Corner" CornerRadius="0,0,5,0" Grid.Row="1" Grid.Column="1" Style="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollBarCornerStyle}}"/>-->
                        <ContentPresenter ContentTemplate="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollBarCornerStyle}}" Grid.Column="1" Grid.Row="1">
                            <!--BEGIN WPF-->
                            <ContentPresenter.Visibility>
                                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <dx:EnumToObjectConverter DefaultValue="Visible">
                                            <dx:EnumToObjectConverter.Values>
                                                <dx:EnumObjectProvider x:Key="TouchOverlap" Value="Collapsed"/>
                                            </dx:EnumToObjectConverter.Values>
                                        </dx:EnumToObjectConverter>
                                    </Binding.Converter>
                                </Binding>
                            </ContentPresenter.Visibility>
                            <!--END WPF-->
                        </ContentPresenter>
                        <ScrollContentPresenter Margin="{TemplateBinding Padding}"
							x:Name="PART_ScrollContentPresenter"
							Grid.Column="0"
							Grid.Row="0"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							CanHorizontallyScroll="False"
							CanVerticallyScroll="False" >
                            <!--BEGIN WPF-->
                            <Grid.RowSpan>
                                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <dx:EnumToObjectConverter DefaultValue="1">
                                            <dx:EnumToObjectConverter.Values>
                                                <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2"/>
                                            </dx:EnumToObjectConverter.Values>
                                        </dx:EnumToObjectConverter>
                                    </Binding.Converter>
                                </Binding>
                            </Grid.RowSpan>
                            <Grid.ColumnSpan>
                                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource TemplatedParent}">
                                    <Binding.Converter>
                                        <dx:EnumToObjectConverter DefaultValue="1">
                                            <dx:EnumToObjectConverter.Values>
                                                <dx:EnumObjectProvider x:Key="TouchOverlap" Value="2"/>
                                            </dx:EnumToObjectConverter.Values>
                                        </dx:EnumToObjectConverter>
                                    </Binding.Converter>
                                </Binding>
                            </Grid.ColumnSpan>
                            <!--END WPF-->
                        </ScrollContentPresenter>
                        <ScrollBar Cursor="Arrow"
							x:Name="PART_VerticalScrollBar"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Grid.Column="1"
							Grid.Row="0"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Maximum="{TemplateBinding ScrollableHeight}"
							Minimum="0"
							Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
							AutomationProperties.AutomationId="VerticalScrollBar" >
                            <!--BEGIN WPF-->
                            <Grid.RowSpan>
                                <MultiBinding>
                                    <MultiBinding.Bindings>
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding.Bindings>
                                    <MultiBinding.Converter>
                                        <dx:VerticalScrollBarRowSpanConverter/>
                                    </MultiBinding.Converter>
                                </MultiBinding>
                            </Grid.RowSpan>
                            <!--END WPF-->
                        </ScrollBar>
                        <ScrollBar Cursor="Arrow"
							x:Name="PART_HorizontalScrollBar"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Grid.Column="0"
							Grid.Row="1"
							Orientation="Horizontal"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Maximum="{TemplateBinding ScrollableWidth}"
							Minimum="0"
							Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
							AutomationProperties.AutomationId="HorizontalScrollBar" >
                            <!--BEGIN WPF-->
                            <Grid.ColumnSpan>
                                <MultiBinding>
                                    <MultiBinding.Bindings>
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="(dx:ScrollBarExtensions.ScrollViewerOrientation)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding.Bindings>
                                    <MultiBinding.Converter>
                                        <dx:HorizontalScrollBarRowSpanConverter/>
                                    </MultiBinding.Converter>
                                </MultiBinding>
                            </Grid.ColumnSpan>
                            <!--END WPF-->                            
                        </ScrollBar>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--scrollbar-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=ScrollBar, ThemeName=DeepBlue}" TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource {x:Type ScrollBar}}">
        <!--BEGIN WPF-->

        <Setter Property="dx:ScrollBarExtensions.ListeningScrollBarThumbDragDelta" Value="True"/>
        <Setter Property="dx:ScrollBarExtensions.ScrollViewerMouseMoved" Value="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerMouseMoved), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="dx:ScrollBarExtensions.ScrollViewerSizeChanged" Value="{Binding Path=(dx:ScrollBarExtensions.ScrollViewerSizeChanged), RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="dx:ScrollBarExtensions.IsTouchScrollBarMode">
            <Setter.Value>
                <Binding Path="(dx:ScrollBarExtensions.ScrollBarMode)" RelativeSource="{RelativeSource Self}">
                    <Binding.Converter>
                        <dx:EnumToObjectConverter DefaultValue="True">
                            <dx:EnumToObjectConverter.Values>
                                <dx:EnumObjectProvider x:Key="Standard" Value="False"/>
                            </dx:EnumToObjectConverter.Values>
                        </dx:EnumToObjectConverter>
                    </Binding.Converter>
                </Binding>
            </Setter.Value>
        </Setter>
        <!--END WPF-->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Width" Value="13" />
                    <Setter Property="MinWidth" Value="13" />
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="MinHeight" Value="0" />
                    <Setter Property="Template" Value="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollBarVertTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Vertical"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Width" Value="16" />
                    <Setter Property="MinWidth" Value="16" />
                    <Setter Property="Height" Value="Auto" />
                    <Setter Property="MinHeight" Value="0" />
                    <Setter Property="HorizontalAlignment" Value="Right"/>
                    
                    <Setter Property="Template" Value="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollBarVertTouchTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="False"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Height" Value="13" />
                    <Setter Property="MinHeight" Value="13" />
                    <Setter Property="Width" Value="Auto" />
                    <Setter Property="MinWidth" Value="0" />
                    <Setter Property="Template" Value="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollBarHorzTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Orientation" Value="Horizontal"/>
                    <Condition Property="dx:ScrollBarExtensions.IsTouchScrollBarMode" Value="True"/>
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                    <Setter Property="Height" Value="16" />
                    <Setter Property="MinHeight" Value="16" />
                    <Setter Property="Width" Value="Auto" />
                    <Setter Property="MinWidth" Value="0" />
                    <Setter Property="Template" Value="{DynamicResource {dxt:ScrollBarThemeKey ResourceKey=ScrollBarHorzTouchTemplate}}"/>
                </MultiTrigger.Setters>
            </MultiTrigger>
		</Style.Triggers>
	</Style>
	<!--slider-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=Slider, ThemeName=DeepBlue}" TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}">
		<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false" />
		<Setter Property="Background" Value="{DynamicResource BaseBrushTransparent}" />
		<Setter Property="Foreground" Value="{DynamicResource BaseBrush#FF4A71AD}" />
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="Template" Value="{DynamicResource {dxt:SliderThemeKey ResourceKey=SliderTemplateVert}}">
				</Setter>
			</Trigger>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="Template" Value="{DynamicResource {dxt:SliderThemeKey ResourceKey=SliderTemplate}}">
				</Setter>
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Opacity" Value="0.35" />
			</Trigger>
		</Style.Triggers>
	</Style>
	<!--groupBox-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=GroupBox, ThemeName=DeepBlue}" TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=GroupBoxBorderBrush}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template" Value="{DynamicResource {dxt:GroupBoxThemeKey ResourceKey=ControlTemplate}}" />
        <Setter Property="Padding" Value="12,6,12,12"/>
    </Style>
    <!--label-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=Label, ThemeName=DeepBlue}" TargetType="{x:Type Label}" BasedOn="{StaticResource {x:Type Label}}">
		<Setter Property="Margin" Value="0" />
		<Setter Property="Padding" Value="0" />
		<Setter Property="Foreground" Value="{StaticResource BaseBrush#FF000000}" />
        <Setter Property="Background" Value="{StaticResource BaseBrush#00FFFFFF}" />
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Template" Value="{DynamicResource {dxt:LabelThemeKey ResourceKey=ControlTemplate}}">
		</Setter>
	</Style>
	<!--listBox-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=ListBox, ThemeName=DeepBlue}" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
		<Setter Property="Padding" Value="1" />
		<Setter Property="Template" Value="{DynamicResource {dxt:ListBoxThemeKey ResourceKey=ControlTemplate}}" />
	</Style>
    <!--DXListBox-->
    <Style TargetType="{x:Type dx:DXListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
    </Style>
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=dx:DXListBox, ThemeName=DeepBlue}" TargetType="{x:Type dx:DXListBox}" BasedOn="{StaticResource {dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=ListBox, ThemeName=DeepBlue}}">
	</Style>
	<!--listBoxItem-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=ListBoxItem, ThemeName=DeepBlue}" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
		<Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
		<Setter Property="Padding" Value="3,2,3,2" />
		<Setter Property="Template" Value="{DynamicResource {dxt:ListBoxThemeKey ResourceKey=ItemContainerTemplate}}" />
	</Style>
	<!--radioButton-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=RadioButton, ThemeName=DeepBlue}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="Background" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=CheckRadioFillNormal}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {dxt:BrushesThemeKey ResourceKey=CheckRadioStrokeNormal}}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template" Value="{DynamicResource {dxt:RadioButtonThemeKey ResourceKey=ControlTemplate}}">
		</Setter>
        <Setter Property="dxeh:ControlHelper.ShowFocusedState" Value="{Binding Path=IsFocused, RelativeSource={RelativeSource Self}}"/>
	</Style>
	<!--separator-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=Separator, ThemeName=DeepBlue}" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
		<Setter Property="Template" Value="{DynamicResource {dxt:SeparatorThemeKey ResourceKey=ControlTemplate}}">
		</Setter>
	</Style>
	<!--tabControl-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=TabControl, ThemeName=DeepBlue}" TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding" Value="4,4,4,4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
		<Setter Property="BorderBrush" Value="{DynamicResource TabControlNormalBorderBrush}" />
		<Setter Property="Background" Value="{DynamicResource TabControlPaneTopNormalBackground}" />
		<Setter Property="Template" Value="{DynamicResource {dxt:TabControlThemeKey ResourceKey=ControlTemplate}}">
		</Setter>
	</Style>
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=TabItem, ThemeName=DeepBlue}" TargetType="{x:Type TabItem}" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource {dxt:TabControlThemeKey ResourceKey=TabItemFocusVisual}}" />
        <Setter Property="Padding" Value="6,1,6,1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {dxt:TabControlThemeKey ResourceKey=TabControlNormalBorderBrush}}" />
        <Setter Property="Foreground" Value="{DynamicResource BaseBrushBlack}" />
        <Setter Property="Background" Value="{DynamicResource {dxt:TabControlThemeKey ResourceKey=TabItemNormalBackground}}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource {dxt:TabControlThemeKey ResourceKey=TabItemControlTemplate}}">
        </Setter>
    </Style>
    <!--tooTip-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=ToolTip, ThemeName=DeepBlue}" TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
		<Setter Property="Template" Value="{DynamicResource {dxt:ToolTipThemeKey ResourceKey=ControlTemplate}}">
		</Setter>
	</Style>
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=dx:RadioButtonList, ThemeName=DeepBlue}" TargetType="{x:Type dx:RadioButtonList}" BasedOn="{StaticResource {x:Type ListBox}}">
		<Setter Property="Padding" Value="1" />
		<Setter Property="Margin" Value="0" />
		<Setter Property="Template" Value="{DynamicResource {dxt:ListBoxThemeKey ResourceKey=ControlTemplate}}" />
		<Setter Property="ItemContainerStyle" Value="{DynamicResource {dxt:RadioButtonListThemeKey ResourceKey=ItemContainerStyle}}" />
	</Style>	
</ResourceDictionary>