<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	                xmlns:dx="clr-namespace:DevExpress.Xpf.Core"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:dxtEx="clr-namespace:DevExpress.Xpf.Utils.Themes"
                    xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes"
                    xmlns:dxcn="clr-namespace:DevExpress.Xpf.Core.Native">
    
    <ResourceDictionary.MergedDictionaries>
        <dxtEx:ResourceDictionaryEx Source="{dx:UtilsResource Themes/DeepBlue/StandardControlStyles/Brushes.xaml}" />
    </ResourceDictionary.MergedDictionaries>
    <SolidColorBrush x:Key="BaseBrushBlack" Color="Black" />

    <Visibility x:Key="Visible">Visible</Visibility>
    <Visibility x:Key="Collapsed">Collapsed</Visibility>
    <!--BEGIN WPF-->
    <dxcn:RenderTemplate x:Key="{dxt:ButtonThemeKey ResourceKey=RenderTemplate}">
        <dxcn:RenderPanel LayoutProvider="{x:Static dxcn:LayoutProvider.GridInstance}">
            <dxcn:RenderBorder Name="Focused" Margin="-2" Background="#594882d8" CornerRadius="5" Visibility="Collapsed"/>
            <dxcn:RenderBorder Background="{StaticResource {dxt:BrushesThemeKey ResourceKey=EditorButtonBorderGradient}}" CornerRadius="4"/>
            <dxcn:RenderBorder Name="NormalGradient" Background="{StaticResource {dxt:BrushesThemeKey IsVisibleInBlend=True, ResourceKey=ButtonNormalGradient}}" CornerRadius="3" Margin="1"/>
            <dxcn:RenderBorder Name="NormalGlare" Background="{StaticResource {dxt:BrushesThemeKey IsVisibleInBlend=True, ResourceKey=ButtonNormalGlare}}" Margin="1,1,1,2" CornerRadius="3,3,5,5" Dock="Top"/>
            <dxcn:RenderBorder Name="MouseOver" CornerRadius="3" Visibility="Collapsed" Margin="1">
                <dxcn:RenderBorder.Background>
                    <RadialGradientBrush GradientOrigin="0.5,0.672">
                        <RadialGradientBrush.RelativeTransform>
                            <TransformGroup>
                                <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.991" ScaleY="2.285" />
                                <SkewTransform AngleX="0" AngleY="0" CenterX="0.5" CenterY="0.5" />
                                <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5" />
                                <TranslateTransform X="0.001" Y="0.439" />
                            </TransformGroup>
                        </RadialGradientBrush.RelativeTransform>
                        <GradientStop Color="#FFD0E5FF" Offset="0" />
                        <GradientStop Color="#00FFFFFF" Offset="1" />
                        <GradientStop Color="#DADCECFF" Offset="0.35" />
                    </RadialGradientBrush>
                </dxcn:RenderBorder.Background>
            </dxcn:RenderBorder>
            <dxcn:RenderPanel Name="RenderPanel">
                <dxcn:RenderPanel Margin="1" LayoutProvider="{dxcn:DockPanelLayoutProvider LastChildFill=True}">
                    <dxcn:RenderImage Name="Image" Dock="Left" Stretch="None" VerticalAlignment="Center"/>
                    <dxcn:RenderBorder Name="Border"/>
                    <dxcn:RenderContentPresenter Name="ContentPresenter" Dock="Right"/>
                </dxcn:RenderPanel>
            </dxcn:RenderPanel>
        </dxcn:RenderPanel>
        <dxcn:RenderTemplate.Triggers>
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.GlyphProperty}" TargetName="Image" TargetProperty="Source"/>
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.GlyphToContentOffsetProperty}" TargetName="Border" TargetProperty="Width"/>
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.ContentProperty}" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.ContentTemplateProperty}" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.ContentTemplateSelectorProperty}" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.VerticalContentAlignmentProperty}" TargetProperty="VerticalAlignment" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.HorizontalContentAlignmentProperty}" TargetProperty="HorizontalAlignment" TargetName="ContentPresenter" />
            <dxcn:RenderBinding ValueSource="TemplatedParent" DependencyProperty="{x:Static ContentControl.PaddingProperty}" TargetProperty="Margin" TargetName="RenderPanel" />
            <dxcn:MultiRenderTrigger>
                <dxcn:MultiRenderTrigger.Conditions>
                    <dxcn:RenderConditionGroup Operator="Or">
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.GlyphProperty}" Value="{x:Null}"/>
                        <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static dx:SimpleButton.ContentProperty}" Value="{x:Null}"/> 
                    </dxcn:RenderConditionGroup>
                </dxcn:MultiRenderTrigger.Conditions>
                <dxcn:RenderSetter Property="Visibility" TargetName="Border" Value="Collapsed"/>
            </dxcn:MultiRenderTrigger>
            <dxcn:RenderTrigger ValueSource="TemplatedParent" DependencyProperty="{x:Static FrameworkElement.IsFocusedProperty}" Value="True">
                <dxcn:RenderSetter Property="Visibility" TargetName="Focused" Value="{StaticResource Visible}"/>
            </dxcn:RenderTrigger>
            <dxcn:RenderTrigger ValueSource="TemplatedParent" DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="True">
                <dxcn:RenderSetter Property="Background" TargetName="NormalGradient" Value="{StaticResource {dxt:BrushesThemeKey ResourceKey=EditorButtonPressedGradient}}"/>
                <dxcn:RenderSetter Property="Background" TargetName="NormalGlare" Value="{StaticResource {dxt:BrushesThemeKey ResourceKey=EditorButtonPressedGlare}}"/>
            </dxcn:RenderTrigger>
            <dxcn:MultiRenderTrigger>
                <dxcn:MultiRenderTrigger.Conditions>
                    <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static FrameworkElement.IsMouseOverProperty}" Value="True"/>
                    <dxcn:RenderCondition ValueSource="TemplatedParent" DependencyProperty="{x:Static ButtonBase.IsPressedProperty}" Value="False"/>
                </dxcn:MultiRenderTrigger.Conditions>
                <dxcn:RenderSetter Property="Visibility" TargetName="MouseOver" Value="{StaticResource Visible}"/>
            </dxcn:MultiRenderTrigger>
            <dxcn:RenderTrigger ValueSource="TemplatedParent" DependencyProperty="{x:Static Button.IsDefaultedProperty}" Value="True">
                <dxcn:RenderSetter Property="Visibility" TargetName="Focused" Value="{StaticResource Visible}"/>
            </dxcn:RenderTrigger>
            <dxcn:RenderTrigger ValueSource="TemplatedParent" DependencyProperty="{x:Static ToggleButton.IsCheckedProperty}" Value="True">
                <dxcn:RenderSetter Property="Background" TargetName="NormalGradient" Value="{StaticResource {dxt:BrushesThemeKey ResourceKey=EditorButtonPressedGradient}}"/>
                <dxcn:RenderSetter Property="Background" TargetName="NormalGlare" Value="{StaticResource {dxt:BrushesThemeKey ResourceKey=EditorButtonPressedGlare}}"/>
            </dxcn:RenderTrigger>
        </dxcn:RenderTemplate.Triggers>
    </dxcn:RenderTemplate>
    <ControlTemplate TargetType="{x:Type ButtonBase}" x:Key="{dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}">
        <dxcn:Chrome x:Name="Chrome" RenderTemplate="{StaticResource ResourceKey={dxt:ButtonThemeKey ResourceKey=RenderTemplate}}"/>
        <ControlTemplate.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFCEE3FD" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Foreground" Value="#FFCEE3FD" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Chrome" Property="Opacity" Value="0.35" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--END WPF-->
    <!--ONLY SL
    <ControlTemplate TargetType="ButtonBase" x:Key="ButtonThemeKey_ButtonControlTemplate">
        <ControlTemplate.Resources>
            <Storyboard x:Key="Timeline1">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="hot" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="1" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
            <Storyboard x:Key="Timeline2">
                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="hot" Storyboard.TargetProperty="(UIElement.Opacity)">
                    <SplineDoubleKeyFrame KeyTime="00:00:00.5000000" Value="0" />
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid x:Name="button" UseLayoutRounding="True">
            <Border x:Name="focus" Margin="-2" Opacity="0" Background="#FF4882d8" CornerRadius="5" />
            <Border Margin="0,0,0,0" Width="Auto" Height="Auto" Background="{StaticResource BrushesThemeKey_EditorButtonBorderGradient}" CornerRadius="4,4,4,4" Padding="1,1,1,1">
                <Grid Width="Auto" Height="Auto">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="0.5*" />
                        <RowDefinition Height="0.5*" />
                    </Grid.RowDefinitions>
                    <Border x:Name="border" Grid.RowSpan="2" Background="{StaticResource BrushesThemeKey_ButtonNormalGradient}" CornerRadius="3,3,3,3" />
                    <Border Margin="0,0,0,1" x:Name="border1" Grid.RowSpan="1" Background="{StaticResource BrushesThemeKey_ButtonNormalGlare}" CornerRadius="3,3,5,5" />
                    <Border Margin="0,0,0,0" x:Name="hot" Opacity="0" Grid.RowSpan="2" CornerRadius="3,3,3,3">
                        <Border.Background>
                            <RadialGradientBrush GradientOrigin="0.5,0.672">
                                <RadialGradientBrush.RelativeTransform>
                                    <TransformGroup>
                                        <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="0.991" ScaleY="2.285" />
                                        <SkewTransform AngleX="0" AngleY="0" CenterX="0.5" CenterY="0.5" />
                                        <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5" />
                                        <TranslateTransform X="0.001" Y="0.439" />
                                    </TransformGroup>
                                </RadialGradientBrush.RelativeTransform>
                                <GradientStop Color="#FFD0E5FF" Offset="0" />
                                <GradientStop Color="#00FFFFFF" Offset="1" />
                                <GradientStop Color="#DADCECFF" Offset="0.35" />
                            </RadialGradientBrush>
                        </Border.Background>
                    </Border>
                    <Border Grid.RowSpan="2" Padding="1">
                        <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                    </Border>
                </Grid>
            </Border>
        </Grid>
    </ControlTemplate>
    ONLY SL-->
    <!--button-->
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=Button, ThemeName=DeepBlue}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Padding" Value="10,1,10,1"/>
        <Setter Property="Foreground" Value="{StaticResource BaseBrushBlack}"/>
        <Setter Property="Template" Value="{StaticResource {dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=ToggleButton, ThemeName=DeepBlue}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Padding" Value="10,1,10,1"/>
        <Setter Property="Foreground" Value="{StaticResource BaseBrushBlack}"/>
        <Setter Property="Template" Value="{StaticResource {dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>
    <Style x:Key="{dxt:DefaultStyleThemeKey TypeInTargetAssembly=dx:ResourceFinder, Type=RepeatButton, ThemeName=DeepBlue}" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}">
        <Setter Property="Padding" Value="10,1,10,1"/>
        <Setter Property="Foreground" Value="{StaticResource BaseBrushBlack}"/>
        <Setter Property="Template" Value="{StaticResource {dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>
    <Style TargetType="{x:Type dx:SimpleButton}">
        <Setter Property="Padding" Value="10,1,10,1"/>
        <Setter Property="Template" Value="{StaticResource {dxt:ButtonThemeKey ResourceKey=ButtonControlTemplate}}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="GlyphToContentOffset" Value="10"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

</ResourceDictionary>