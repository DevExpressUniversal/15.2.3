<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="clr-namespace:DevExpress.Xpf.Utils.Themes"
    xmlns:dx="clr-namespace:DevExpress.Xpf.Core"
    xmlns:dxe="clr-namespace:DevExpress.Xpf.Editors"
    xmlns:dxei="clr-namespace:DevExpress.Xpf.Editors.Internal"
    xmlns:dxet="clr-namespace:DevExpress.Xpf.Editors.Themes"
    xmlns:dxep="clr-namespace:DevExpress.Xpf.Editors.Popups"
    xmlns:dxt="clr-namespace:DevExpress.Xpf.Utils.Themes"
    xmlns:dxepc="clr-namespace:DevExpress.Xpf.Editors.Popups.Calendar">

    <ResourceDictionary.MergedDictionaries>
        <dxtEx:ResourceDictionaryEx Source="{dx:EditorsResource Themes/DeepBlue/Brushes.xaml}" />
        <dxtEx:ResourceDictionaryEx Source="{dx:EditorsResource Themes/Generic/PopupListBox.xaml}" />
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="{dxet:EditorListBoxThemeKey ResourceKey=ItemTemplate}" TargetType="{x:Type dxe:ListBoxEditItem}">
        <Grid>
            <Grid.Resources>
                <dx:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
            </Grid.Resources>

            <Grid x:Name="highlightContainer">
                <Border x:Name="highlight" Width="Auto" Height="Auto" CornerRadius="2,2,2,2" Padding="1,1,1,0" Background="{DynamicResource {dxt:BrushesThemeKey IsVisibleInBlend=True, ResourceKey=SelectedItem}}" Visibility="{Binding Owner.AllowItemHighlighting, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" Opacity="0" />
            </Grid>
            <Border x:Name="border" Width="Auto" Height="Auto" CornerRadius="2,2,2,2" Padding="1,1,1,0" Background="Transparent" />

            <Rectangle x:Name="FocusVisual" StrokeThickness="1" Stroke="#FF000000" StrokeDashArray="1 2" SnapsToDevicePixels="True" Opacity="0" />

            <Border x:Name="Hovered" CornerRadius="2" Visibility="{Binding Owner.AllowItemHighlighting, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}" Opacity="0">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                        <GradientStop Color="#FF6488BC" Offset="0" />
                        <GradientStop Color="#FF759BD2" Offset="1" />
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <Border x:Name="Inactive" CornerRadius="2" Opacity="0">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                        <GradientStop Color="#FF6488BC" Offset="0" />
                        <GradientStop Color="#FF759BD2" Offset="1" />
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <Border x:Name="Selected" CornerRadius="2" Opacity="0">
                <Border.Background>
                    <LinearGradientBrush EndPoint="0.5,0" StartPoint="0.5,1">
                        <GradientStop Color="#FF4B6FA5" Offset="0" />
                        <GradientStop Color="#FF5E81B4" Offset="1" />
                    </LinearGradientBrush>
                </Border.Background>
            </Border>
            <DockPanel
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                LastChildFill="True">
                <dxei:ImagePresenter
                    Padding="{StaticResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemImagePadding}}"
                    DockPanel.Dock="Left"/>
                <dx:ContentContainer
                    x:Name="content"
                    Margin="{StaticResource {dxet:ComboBoxEditThemeKey ResourceKey=SelectedItemContentPadding}}">
                    <ContentPresenter
                        x:Name="contentPresenter"
                        Width="Auto"
                        Height="Auto"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                </dx:ContentContainer>                
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Opacity" TargetName="border" Value="0" />
                <Setter Property="Opacity" TargetName="highlight" Value="0" />
                <Setter Property="Opacity" TargetName="Hovered" Value="1" />
                <Setter Property="Opacity" TargetName="Selected" Value="0" />
                <Setter Property="Opacity" TargetName="FocusVisual" Value="0" />                
                <Setter TargetName="content" Property="ForegroundSolidColor1" Value="#FFFFFFFF" />
            </MultiDataTrigger>            
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=(dxe:BaseEdit.OwnerEdit).AllowItemHighlighting, RelativeSource={RelativeSource Self}}" Value="False"/>
                    <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                    <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="content" Property="ForegroundSolidColor1" Value="#FFFFFFFF" />
            </MultiDataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" TargetName="border" Value="0" />
                <Setter Property="Opacity" TargetName="highlight" Value="0" />
                <Setter Property="Opacity" TargetName="Hovered" Value="1" />
                <Setter Property="Opacity" TargetName="Selected" Value="0" />
                <Setter Property="Opacity" TargetName="FocusVisual" Value="0" />
            </Trigger>
            <Trigger Property="Selector.IsSelected" Value="True">
                <Setter Property="Opacity" TargetName="border" Value="0" />
                <Setter Property="Opacity" TargetName="highlight" Value="0" />
                <Setter Property="Opacity" TargetName="Inactive" Value="1" />
                <Setter Property="Opacity" TargetName="Selected" Value="0" />
                <Setter Property="Opacity" TargetName="FocusVisual" Value="0" />
                <Setter Property="Foreground" Value="#FFFFFFFF" />
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Opacity" TargetName="border" Value="0" />
                <Setter Property="Opacity" TargetName="highlight" Value="0" />
                <Setter Property="Opacity" TargetName="Hovered" Value="0" />
                <Setter Property="Opacity" TargetName="Selected" Value="0" />
                <Setter Property="Opacity" TargetName="FocusVisual" Value="1" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocused" Value="True"/>
                    <Condition Property="Selector.IsSelected" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Opacity" TargetName="border" Value="0" />
                <Setter Property="Opacity" TargetName="highlight" Value="0" />
                <Setter Property="Opacity" TargetName="Hovered" Value="0" />
                <Setter Property="Opacity" TargetName="Selected" Value="1" />
                <Setter Property="Opacity" TargetName="FocusVisual" Value="0" />
                <Setter Property="Foreground" Value="#FFFFFFFF" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>
