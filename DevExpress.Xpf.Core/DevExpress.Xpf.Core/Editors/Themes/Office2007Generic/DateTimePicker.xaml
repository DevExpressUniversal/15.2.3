<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:dxtEx="clr-namespace:DevExpress.Xpf.Utils.Themes"
                    xmlns:dx="clr-namespace:DevExpress.Xpf.Core"
                    xmlns:dxe="clr-namespace:DevExpress.Xpf.Editors"
                    xmlns:dxet="clr-namespace:DevExpress.Xpf.Editors.Themes">
    <ResourceDictionary.MergedDictionaries>
        <dxtEx:ResourceDictionaryEx Source="{dx:EditorsResource Themes/Generic/DateTimePicker.xaml}" />
    </ResourceDictionary.MergedDictionaries>
    <SolidColorBrush x:Key="ActiveBackgroundColor" Color="#FFE2EAFD" />
    <SolidColorBrush x:Key="ActiveBackgroundBorderColor" Color="#FFBCC9E7" />
    <SolidColorBrush x:Key="BackgroundColor" Color="#FFEFF0F2" />
    <SolidColorBrush x:Key="BackgroundBorderColor" Color="#FFD9D9D9" />
    <SolidColorBrush x:Key="ActiveForegroundColor" Color="#FF000000" />
    <SolidColorBrush x:Key="CaptionForegroundColor" Color="#4C000000" />
    <SolidColorBrush x:Key="ItemsControlBackground" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ItemsControlBorderBrush" Color="#00FFFFFF"/>
    <Color x:Key="ExpandedForegroundColor">#FF000000</Color>
    <Color x:Key="ForegroundColor">#4C000000</Color>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=YearItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=MonthItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Value, StringFormat='{}{0:MM}'}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=DayItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=Hour24ItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=Hour12ItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=MinuteItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=SecondItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=MillisecondItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=AmPmItemTemplate}">
        <Grid>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBlock 
                    FontSize="18"
                    Text="{Binding Path=Text}" />
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=NoneItemTemplate}">
    </DataTemplate>
    <ControlTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=ItemTemplate}" TargetType="{x:Type dxe:DateTimePickerItem}">
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="true" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="expandedStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="itemBackground" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{StaticResource ExpandedForegroundColor}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="expandedStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="true" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="hiddenStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.2" Storyboard.TargetName="itemBackground" Storyboard.TargetProperty="Opacity" To="0" />
                            <ColorAnimation Duration="0:0:0.2" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{StaticResource ForegroundColor}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="hiddenStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="true" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="false" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="instantlyExpandedStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="itemBackground" Storyboard.TargetProperty="Opacity" To="1" />
                            <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{StaticResource ExpandedForegroundColor}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="instantlyExpandedStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsExpanded, RelativeSource={RelativeSource Self}}" Value="false" />
                    <Condition Binding="{Binding Path=UseTransitions, RelativeSource={RelativeSource Self}}" Value="false" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard x:Name="instantlyHiddenStateStoryboard">
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.0" Storyboard.TargetName="itemBackground"  Storyboard.TargetProperty="Opacity" To="0" />
                            <ColorAnimation Duration="0:0:0.0" Storyboard.TargetName="foregroundColor" Storyboard.TargetProperty="Color" To="{StaticResource ForegroundColor}"/>
                        </Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <RemoveStoryboard BeginStoryboardName="instantlyHiddenStateStoryboard" />
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
        <Grid Background="Transparent" Opacity="{Binding Path=IsFake, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}">
            <Grid x:Name="itemBackground" Opacity="0">
                <Border x:Name="background" Opacity="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}" Background="{StaticResource BackgroundColor}" Margin="{TemplateBinding Padding}" />
                <Border x:Name="activeBackground" Opacity="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToDoubleConverter}}" Background="{StaticResource ActiveBackgroundColor}" Margin="{TemplateBinding Padding}" />
                <Border x:Name="selectedBorder" Opacity="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}" BorderThickness="1" BorderBrush="{StaticResource BackgroundBorderColor}" Margin="{TemplateBinding Padding}" />
                <Border x:Name="activeSelectedBorder" Opacity="{Binding Path=IsActive, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BoolToDoubleConverter}}" BorderThickness="1" BorderBrush="{StaticResource ActiveBackgroundBorderColor}" Margin="{TemplateBinding Padding}" />
            </Grid>
            <ContentPresenter x:Name="content" Margin="{TemplateBinding Padding}">
                <TextBlock.Foreground>
                    <SolidColorBrush x:Name="foregroundColor" Color="{StaticResource ForegroundColor}" />
                </TextBlock.Foreground>
            </ContentPresenter>
        </Grid>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=Template}">
        <ItemsControl x:Name="ItemsControl" HorizontalAlignment="Center" Background="{StaticResource ItemsControlBackground}" BorderBrush="{StaticResource ItemsControlBorderBrush}" VirtualizingStackPanel.VirtualizationMode="Recycling" 
                      dx:FocusHelper2.Focusable="False" ItemTemplate="{DynamicResource {dxet:DateTimePickerThemeKey ResourceKey=DateTimePickerItemTemplate}}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel Orientation="Horizontal" VirtualizingStackPanel.VirtualizationMode="Recycling" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
        </ItemsControl>
    </ControlTemplate>
    <ControlTemplate x:Key="{dxet:DateTimePickerThemeKey ResourceKey=SelectorTemplate}" TargetType="{x:Type dxe:DateTimePickerSelector}">
        <Grid>
            <Grid Width="Auto" Height="Auto" VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="SelectedItemContainer"
                            Opacity="{Binding Path=IsAnimated, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}">
                <dxe:DateTimePickerItem Content="{Binding Path=SelectedItem, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{StaticResource ActiveForegroundColor}"
                                                    ContentTemplate="{Binding Path=SelectedItemTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                                    IsExpanded="True" IsActive="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" x:Name="SelectedItemContainerData" />
            </Grid>
            <Grid VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="pickerSelectorContainer">
                <dxe:DXScrollViewer VerticalScrollBarVisibility="Hidden" CanContentScroll="True"
                                    VerticalSnapPointsAlignment="Near"
                                    PanningMode="None"
                                    IsDeferredScrollingEnabled="True"
                                    dx:FocusHelper2.Focusable="False" IsManipulationEnabled="False">
                    <dxe:DateTimePickerPanel x:Name="pickerPanel" />
                </dxe:DXScrollViewer>
                <Grid VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="selectedItemCaption" 
                      Opacity="{Binding Path=IsAnimated, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InvertedBoolToDoubleConverter}}">
                    <TextBlock Margin="0,35,0,0" Text="{Binding Path=SelectedItem, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource DateTimePickerDataCaptionConverter}}" 
                               Foreground="{StaticResource CaptionForegroundColor}" IsHitTestVisible="False" />
                </Grid>
            </Grid>
        </Grid>
    </ControlTemplate>
</ResourceDictionary>