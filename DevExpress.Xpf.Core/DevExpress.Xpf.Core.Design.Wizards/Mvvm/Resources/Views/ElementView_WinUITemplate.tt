<#@ template language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="DevExpress.Design.Mvvm" #>
<#@ import namespace="DevExpress.Xpf.Core.Design.Wizards.Mvvm.EntityFramework" #>
<#@ import namespace="DevExpress.Xpf.Core.Design.Wizards.Mvvm" #>
<#@ import namespace="DevExpress.Xpf.Core.Design.Wizards.Mvvm.ViewModelData" #>
<#@ import namespace="DevExpress.Xpf.Core.Native" #>
<#@ import namespace="DevExpress.Mvvm.UI.Native.ViewGenerator" #>
<#@ import namespace="DevExpress.Mvvm.Native" #>
<#@ import namespace="DevExpress.Xpf.Internal.EntityFrameworkWrappers" #>
<#
	T4TemplateInfo templateInfo = this.GetTemplateInfo();
	EntityViewModelData viewModelData = templateInfo.Properties["IViewModelInfo"] as EntityViewModelData;
    string viewName = templateInfo.Properties["ViewName"].ToString();    
    string localNamespace = templateInfo.Properties["Namespace"].ToString();
	string viewFullName = localNamespace +"." + viewName;
	var editorInfos = (PropertyEditorGroupInfo)templateInfo.Properties["EditorInfos"];
	var allInfos = editorInfos.Groups.Flatten(g => g.Groups).Concat(new[] { editorInfos }).SelectMany(g => g.Items);
	bool hasHiddenEditors = allInfos.Any(i => i.Property.Attributes.Hidden());
    XamlNamespaces xamlNamespaces = templateInfo.Properties["XamlNamespaces"] as XamlNamespaces;
	string viewModelPrefix = templateInfo.Properties["viewModelPrefix"].ToString();
	var context = (TemplateGenerationContext)templateInfo.Properties["TemplateGenerationContext"];
	string defaultNamespace = (string)templateInfo.Properties["DefaultNamespacePrefix"];
#>
<UserControl x:Class="<#=viewFullName#>"
	<#PasteXamlNamespaces(xamlNamespaces);#>
	xmlns:view="clr-namespace:<#=defaultNamespace#><#=localNamespace#>"
    mc:Ignorable="<#=xamlNamespaces.GetPrefix(XamlNamespaces.xmlns_blend)#>"
    d:DesignHeight="400" d:DesignWidth="600"
	<#if(viewModelData.UseProxyFactory) {		
#> DataContext="{dxmvvm:ViewModelSource <#=viewModelPrefix#>:<#=viewModelData.Name#>}"
<#}#> 
>
<#if(!viewModelData.UseProxyFactory) {
#>        <UserControl.DataContext>
        <<#=viewModelPrefix#>:<#=viewModelData.Name#>/>
    </UserControl.DataContext>
<#}#>
<#if(viewModelData.SupportServices) {		
#>	<dxmvvm:Interaction.Behaviors>
		<dxwui:WinUIMessageBoxService/>
		<dxmvvm:EventToCommand Event="Loaded" Command="{Binding OnLoadedCommand}" />
    </dxmvvm:Interaction.Behaviors>
<#}#>  
    <DockPanel>
		<dxwui:AppBar DockPanel.Dock="Bottom" HideMode="AlwaysVisible">
<#foreach(CommandInfo command in viewModelData.NonLayoutCommands) {
	if(command.Caption != "Close") {#>
			<dxwui:AppBarButton Label="<#=command.Caption#>" Command="{Binding <#=command.CommandPropertyName#>}"<#if(command.HasParameter()){#> CommandParameter="{Binding <#=command.ParameterPropertyName#>}"<#}#><#if(command.HasGlyphs()){#> Glyph="<#=command.LargeGlyph#>" IsEllipseEnabled="False" AllowGlyphTheming="True" GlyphStretch="None"<#}#> HorizontalAlignment="Center" />
<#	}
}
#>
        </dxwui:AppBar>
		<dxlc:DataLayoutControl AutoGenerateItems="False" CurrentItem="{Binding <#=viewModelData.EntityPropertyName#>}" Orientation="Vertical" Padding="67,0,43,0" Margin="0,0,0,16">
			<dxmvvm:Interaction.Behaviors>
				<dxmvvm:EventToCommand Event="{x:Static Binding.SourceUpdatedEvent}" Command="{Binding UpdateCommand}" />
			</dxmvvm:Interaction.Behaviors>
<#
			var elementView = new ElementViewTemplate();
			elementView.PushIndent("            ");
			elementView.WriteEditors(editorInfos, viewModelData.EntityPropertyName, viewModelData.EntityTypeName, context, true);
			Write(elementView.GeneratedText);
#>
<#AddLookUpTables(context, viewModelData, templateInfo);#>
<#if(hasHiddenEditors) {#>
            <dxlc:LayoutControl.AvailableItems>
<#
				elementView = new ElementViewTemplate();
				elementView.PushIndent("                ");
				elementView.WriteEditors(editorInfos, viewModelData.EntityPropertyName, viewModelData.EntityTypeName, context, false);
				Write(elementView.GeneratedText);
#>
            </dxlc:LayoutControl.AvailableItems>
<#}#>
		</dxlc:DataLayoutControl>
    </DockPanel>
</UserControl>
<#+
void AddLookUpTables(TemplateGenerationContext context, EntityViewModelData viewModelData, T4TemplateInfo templateInfo) {
	var m2ms = new List<Tuple<ManyToManyInfo, NavigationPropertyRuntimeWrapper>>();
	if (context.MetadataWorkspace != null) { // not viewmodel -> view
		var entityTypeWrapper = TemplatesCodeGen.FindEntityType(context.MetadataWorkspace, viewModelData.EntityTypeName);
		foreach(var navigation in entityTypeWrapper.NavigationProperties) {
			var manyToMany = TemplatesCodeGen.FindManyToManyAssociation(context.MetadataWorkspace, entityTypeWrapper.Name, navigation.ToEndMember.GetEntityType().Name);
			if (manyToMany != null) {
				m2ms.Add(Tuple.Create(manyToMany, navigation));
			}
		}
	}
	if (!viewModelData.LookUpTables.Any() && !m2ms.Any())
		return;
#>
    <dxlc:LayoutGroup x:Name="Tabs" View="Tabs" MinHeight="250">
<#+
	foreach(var t in m2ms) {
		var navigation = t.Item2;
		var m2m = t.Item1;
#>
	<dxb:BarManager MDIMergeStyle="Never" dxlc:LayoutControl.TabHeader="<#=m2m.OtherEntity.Name#>" dxb:BarNameScope.IsScopeOwner="True" DataContext="{Binding <#=navigation.Name#>DetailEntities}">
        <dxmvvm:Interaction.Behaviors>
            <dx:DialogService DialogWindowStartupLocation="CenterOwner">
                <dx:DialogService.DialogStyle>
                    <Style TargetType="Window">
                        <Setter Property="Width" Value="600" />
                        <Setter Property="Height" Value="400" />
                        <Setter Property="ResizeMode" Value="NoResize" />
                        <Setter Property="ShowInTaskbar" Value="False" />
                        <Setter Property="WindowStyle" Value="ToolWindow" />
                    </Style>
                </dx:DialogService.DialogStyle>
                <dx:DialogService.ViewTemplate>
                    <DataTemplate>
                        <dxg:GridControl ItemsSource="{Binding AvailableEntities}" SelectedItems="{Binding SelectedEntities}" SelectionMode="Row" ShowBorder="False" AutoGenerateColumns="RemoveOld" EnableSmartColumnsGeneration="True">
                            <dxg:GridControl.TotalSummary>
                                <dxg:GridSummaryItem SummaryType="Count" Alignment="Right" />
                            </dxg:GridControl.TotalSummary>
                            <dxg:GridControl.View>
                                <dxg:TableView AllowEditing="False" ShowFixedTotalSummary="True" AllowPerPixelScrolling="True" ShowGroupPanel="False" AutoWidth="True" />
                            </dxg:GridControl.View>
                        </dxg:GridControl>
                    </DataTemplate>
                </dx:DialogService.ViewTemplate>
            </dx:DialogService>
        </dxmvvm:Interaction.Behaviors>
        <dxb:BarManager.Bars>
            <dxb:Bar>
				<dxb:BarButtonItem IsVisible="{Binding IsCreateDetailButtonVisible}" ToolTip="Create Detail Entity" Glyph="{dx:DXImage Image=New_16x16.png}" Command="{Binding CreateDetailEntityCommand}" />
                <dxb:BarButtonItem ToolTip="Edit Detail Entity" Glyph="{dx:DXImage Image=Edit_16x16.png}" Command="{Binding EditDetailEntityCommand}" />
                <dxb:BarButtonItem ToolTip="Add Associations" Glyph="{dx:DXImage Image=Add_16x16.png}" Command="{Binding AddDetailEntitiesCommand}" />
                <dxb:BarButtonItem ToolTip="Remove Associations" Glyph="{dx:DXImage Image=Remove_16x16.png}" Command="{Binding RemoveDetailEntitiesCommand}" />
            </dxb:Bar>
        </dxb:BarManager.Bars>
        <dxg:GridControl ItemsSource="{Binding DetailEntities}" SelectedItems="{Binding SelectedEntities}" ShowBorder="False" SelectionMode="Row" AutoGenerateColumns="RemoveOld" EnableSmartColumnsGeneration="True">
            <dxg:GridControl.TotalSummary>
                <dxg:GridSummaryItem SummaryType="Count" Alignment="Right" />
            </dxg:GridControl.TotalSummary>
            <dxg:GridControl.View>
                <dxg:TableView AllowEditing="False" ShowFixedTotalSummary="True" AllowPerPixelScrolling="True" ShowGroupPanel="False" AutoWidth="True">
                </dxg:TableView>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </dxb:BarManager>
<#+
	}
	foreach(LookUpCollectionViewModelData item in viewModelData.LookUpTables) {
		if (TemplatesCodeGen.IsAlreadyHandled(item, m2ms.Select(t => t.Item2)))
			continue;
        AddLookUpTable(viewModelData, item, templateInfo);
    }
#>
	</dxlc:LayoutGroup>
<#+
}
void AddLookUpTable(EntityViewModelData parentViewModelData, LookUpCollectionViewModelData viewModelData, T4TemplateInfo templateInfo){
	string generatedFieldsBase64 = (string)templateInfo.Properties["GeneratedFieldsBase64."+viewModelData.Name];
	string generatedBandsBase64 = (string)templateInfo.Properties["GeneratedBandsBase64."+viewModelData.Name];
	string dataContext = GetLookUpPropertyName(parentViewModelData, viewModelData);
	string lookUpGridName = GetLookUpGridName(viewModelData);#>
		<dxlc:LayoutGroup DataContext="{Binding <#=dataContext#>}" dxlc:LayoutControl.TabHeader="<#=viewModelData.LookUpCollectionPropertyAssociationName#>">
            <dxg:GridControl Name="<#=lookUpGridName#>" ItemsSource="{Binding <#=viewModelData.CollectionPropertyName#>}"<#+if(viewModelData.HasEntityPropertyName()){#> CurrentItem="{Binding <#=viewModelData.EntityPropertyName#>}"<#+}#> ShowLoadingPanel="{Binding IsLoading}">
			<#+if(viewModelData.HasEntityEditProperty()) {#>
				<dxmvvm:Interaction.Behaviors>
					<dxmvvm:EventToCommand PassEventArgsToCommand="True" Command="{Binding EditCommand}" EventName="MouseDoubleClick">
						<dxmvvm:EventToCommand.EventArgsConverter>
							<dx:EventArgsToDataRowConverter/>
						</dxmvvm:EventToCommand.EventArgsConverter>
					</dxmvvm:EventToCommand>
				</dxmvvm:Interaction.Behaviors>
<#+}
if(!string.IsNullOrEmpty(generatedFieldsBase64)) {	
#>				<dxg:GridControl.Columns>
					<#=generatedFieldsBase64#>
				</dxg:GridControl.Columns>
<#+}#>
<#+if(!string.IsNullOrEmpty(generatedBandsBase64)) {	
#>				<dxg:GridControl.Bands>
					<#=generatedBandsBase64#>
				</dxg:GridControl.Bands>
<#+}#>
                <dxg:GridControl.TotalSummary>
                    <dxg:GridSummaryItem SummaryType="Count" Alignment="Right"/>
                </dxg:GridControl.TotalSummary>
                <dxg:GridControl.GroupSummary>
                    <dxg:GridSummaryItem SummaryType="Count"/>
                </dxg:GridControl.GroupSummary>
                <dxg:GridControl.View>
                    <dxg:TableView AllowEditing="False" ShowFixedTotalSummary="True" AllowPerPixelScrolling="True" ShowGroupPanel="False" ShowIndicator="False">
					    <dxg:TableView.RowCellMenuCustomizations>
<#+foreach(CommandInfo command in viewModelData.NonLayoutCommands) {	
#>				                  <dxb:BarButtonItem Content="<#=command.Caption#>" Command="{Binding View.DataContext.<#=command.CommandPropertyName#>}"<#+if(command.HasParameter()){#> CommandParameter="{Binding Row.Row}"<#+}#><#+if(command.HasGlyphs()){#> Glyph="<#=command.SmallGlyph#>"<#+}#> />
<#+}#>				    </dxg:TableView.RowCellMenuCustomizations>
                    </dxg:TableView>
                </dxg:GridControl.View>
            </dxg:GridControl>				
			<#+AddButtonsForLookUpTable(parentViewModelData, viewModelData, templateInfo);#>
		</dxlc:LayoutGroup>
<#+}
void AddButtonsForLookUpTable(EntityViewModelData parentViewModelData, LookUpCollectionViewModelData viewModelData, T4TemplateInfo templateInfo) {
	if(viewModelData.NonLayoutCommands.Length > 0) {
#>
			<dxlc:LayoutGroup Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Top" MinWidth="100">
<#+
	}	
	string lookUpTablePropertyName = GetLookUpPropertyName(parentViewModelData, viewModelData);
	foreach(CommandInfo command in viewModelData.NonLayoutCommands) {	
		string commandName = GetCommandName(command, viewModelData.EntityTypeName);
#>
				<Button Content="<#=command.Caption#>" Command="{Binding <#=command.CommandPropertyName#>}"<#+if(command.HasParameter()){#> CommandParameter="{Binding <#=command.ParameterPropertyName#>}"<#+}#> />
<#+
	}
	if(viewModelData.NonLayoutCommands.Length > 0) {
#>
			</dxlc:LayoutGroup>
<#+
	}
}

string GetCommandName(CommandInfo info, string entityTypeName){
	string str_command = "Command";
	string infoCommandPropertyName = info.CommandPropertyName;
	string shortName = infoCommandPropertyName.EndsWith(str_command) ? infoCommandPropertyName.Remove(infoCommandPropertyName.Length - str_command.Length) : null;
	if(string.IsNullOrEmpty(shortName))
		return infoCommandPropertyName+entityTypeName;
	return shortName+entityTypeName+str_command;
}
string GetLookUpGridName(LookUpCollectionViewModelData viewModelData){
	return viewModelData.LookUpCollectionPropertyAssociationName+"Grid";
}
string GetLookUpPropertyName(EntityViewModelData parentViewModelData, LookUpCollectionViewModelData viewModelData){
	return parentViewModelData.EntityTypeName+viewModelData.LookUpCollectionPropertyAssociationName + "Details";	
}
void PasteXamlNamespaces(XamlNamespaces xamlNamespaces) {
	string[] toAdd = new string[]{
		XmlNamespaceConstants.RibbonNamespaceDefinition,
		XmlNamespaceConstants.EditorsNamespaceDefinition,
		XmlNamespaceConstants.LayoutControlNamespaceDefinition,
		XmlNamespaceConstants.BarsNamespaceDefinition,
		XmlNamespaceConstants.UtilsNamespaceDefinition,
		XmlNamespaceConstants.GridNamespaceDefinition,
		XmlNamespaceConstants.MvvmNamespaceDefinition,
		XmlNamespaceConstants.WindowsUINamespaceDefinition
	};
	xamlNamespaces.AddDevExpressXamlNamespaces(toAdd);
	this.WriteLine(xamlNamespaces.GetXaml());
}#>
