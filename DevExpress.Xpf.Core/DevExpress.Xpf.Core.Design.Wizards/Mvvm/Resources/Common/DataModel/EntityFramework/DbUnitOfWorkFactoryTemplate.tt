<#@ template language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="DevExpress.Xpf.Core.Design.Wizards.Mvvm.EntityFramework" #>
<#@ import namespace="DevExpress.Xpf.Core.Design.Wizards.Mvvm" #>
<#@ import namespace="DevExpress.Design.Mvvm.EntityFramework" #>
<#@ import namespace="DevExpress.Design.Mvvm" #>
<#@ import namespace="DevExpress.Entity.Model" #>
<#
    T4TemplateInfo templateInfo = this.GetTemplateInfo();
    var usingList = templateInfo.UsingList;
    this.PasteUsingList(usingList);
	EntityModelData entityModel = templateInfo.Properties["EntityModelData"] as EntityModelData;
	var context = templateInfo.Properties[TemplatesConstants.STR_TemplateGenerationContext] as TemplateGenerationContext;
	var generateInstantFeedbackMode = TemplatesCodeGen.AlwaysGenerateFullFeaturedCommon || context == null || context.PlatformType != PlatformType.WinForms;
#>
using DevExpress.Mvvm;
using System.Collections;
using System.ComponentModel;
using DevExpress.Data.Linq;
using DevExpress.Data.Linq.Helpers;
using DevExpress.Data.Async.Helpers;
<#if(generateInstantFeedbackMode){#>
using DevExpress.Xpf.Core.ServerMode;
<#}#>

namespace <#=this.GetNamespace()#> {
<#
    this.PasteAliasList(usingList, entityModel.FullName);
#>
    class DbUnitOfWorkFactory<TUnitOfWork> : IUnitOfWorkFactory<TUnitOfWork> where TUnitOfWork : IUnitOfWork {
        Func<TUnitOfWork> createUnitOfWork;

        public DbUnitOfWorkFactory(Func<TUnitOfWork> createUnitOfWork) {
            this.createUnitOfWork = createUnitOfWork;
        }

        TUnitOfWork IUnitOfWorkFactory<TUnitOfWork>.CreateUnitOfWork() {
            return createUnitOfWork();
        }

        IInstantFeedbackSource<TProjection> IUnitOfWorkFactory<TUnitOfWork>.CreateInstantFeedbackSource<TEntity, TProjection, TPrimaryKey>(
            Func<TUnitOfWork, IRepository<TEntity, TPrimaryKey>> getRepositoryFunc,
            Func<IRepositoryQuery<TEntity>, IQueryable<TProjection>> projection) {
<#if(generateInstantFeedbackMode){#>
            var threadSafeProperties = new TypeInfoProxied(TypeDescriptor.GetProperties(typeof(TProjection)), null).UIDescriptors;
			if(projection == null) {
				projection = x => x as IQueryable<TProjection>;
			}
            var keyProperties = ExpressionHelper.GetKeyProperties(getRepositoryFunc(createUnitOfWork()).GetPrimaryKeyExpression);
            var keyExpression = keyProperties.Select(p => p.Name).Aggregate((l, r) => l + ";" + r);
            var source = new EntityInstantFeedbackSource((DevExpress.Data.Linq.GetQueryableEventArgs e) => e.QueryableSource = projection(getRepositoryFunc(createUnitOfWork()))) {
                KeyExpression = keyExpression
            };
            return new InstantFeedbackSource<TProjection>(source, threadSafeProperties);
<#} else {#>
			throw new NotImplementedException();
<#}#>
        }
    }
}