<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EFDataSourceStoredProcedures" xml:space="preserve">
    <value>Gets the collection of stored procedures provided by an EFDataSource.</value>
  </data>
  <data name="EFDataSourceConnection" xml:space="preserve">
    <value>Specifies the connection for an EFDataSource.</value>
  </data>
  <data name="ObjectDataSourceDataSource" xml:space="preserve">
    <value>Specifies the object data source.</value>
  </data>
  <data name="ObjectDataSourceDataMember" xml:space="preserve">
    <value>Specifies the data member of an object data source.</value>
  </data>
  <data name="ObjectDataSourceParameters" xml:space="preserve">
    <value>Provides access to the list of connection parameters.</value>
  </data>
  <data name="ObjectDataSourceConstructor" xml:space="preserve">
    <value>Specifies an object that enables an ObjectDataSource to access constructor parameters. </value>
  </data>
  <data name="CustomSqlQuerySql" xml:space="preserve">
    <value>Specifies the custom query string.</value>
  </data>
  <data name="MasterDetailInfoMasterQueryName" xml:space="preserve">
    <value>Specifies the master query name of the master-detail relation.</value>
  </data>
  <data name="MasterDetailInfoDetailQueryName" xml:space="preserve">
    <value>Specifies the detail query name of the master-detail relation.</value>
  </data>
  <data name="MasterDetailInfoKeyColumns" xml:space="preserve">
    <value>Provides access to the collection of key columns defined for the master-detail relation.</value>
  </data>
  <data name="MasterDetailInfoName" xml:space="preserve">
    <value>Specifies the relation name.</value>
  </data>
  <data name="MasterDetailInfoHasCustomName" xml:space="preserve">
    <value>Indicates whether or not the name of a master-detail relation has been specified.</value>
  </data>
  <data name="MasterDetailInfoCollectionOwner" xml:space="preserve">
    <value>Indicates the SQL data source to which the collection of master-detail relations belongs.</value>
  </data>
  <data name="RelationColumnInfoParentKeyColumn" xml:space="preserve">
    <value>Specifies the name of the parent key column in a master-detail relation.</value>
  </data>
  <data name="RelationColumnInfoNestedKeyColumn" xml:space="preserve">
    <value>Specifies the name of the nested key column in a master-detail relation.</value>
  </data>
  <data name="RelationColumnInfoConditionOperator" xml:space="preserve">
    <value>Specifies the condition applied to the current column.</value>
  </data>
  <data name="SqlDataConnectionConnectionString" xml:space="preserve">
    <value>Specifies the connection string of the SqlDataConnection.</value>
  </data>
  <data name="SqlDataConnectionConnectionParameters" xml:space="preserve">
    <value>Provides access to the data connection parameters of the SqlDataConnection.</value>
  </data>
  <data name="SqlDataConnectionIsConnected" xml:space="preserve">
    <value>Indicates whether or not the data connection is currently active.</value>
  </data>
  <data name="SqlDataSourceConnectionError" xml:space="preserve">
    <value>Fires after an attempt to establish a data connection has failed.</value>
  </data>
  <data name="SqlDataSourceConfigureDataConnection" xml:space="preserve">
    <value>Allows you to customize connection settings before connecting to a database.</value>
  </data>
  <data name="SqlDataSourceConnection" xml:space="preserve">
    <value>Provides access to the data connection settings of the SqlDataSource.</value>
  </data>
  <data name="SqlDataSourceConnectionName" xml:space="preserve">
    <value>Specifies the name of a data connection.</value>
  </data>
  <data name="SqlDataSourceConnectionParameters" xml:space="preserve">
    <value>Specifies the data connection settings of the SqlDataSource.</value>
  </data>
  <data name="SqlDataSourceQueries" xml:space="preserve">
    <value>Provides access to the collection of queries defined for the SqlDataSource.</value>
  </data>
  <data name="SqlDataSourceRelations" xml:space="preserve">
    <value>Provides access to the collection of master-detail relations of the SqlDataSource.</value>
  </data>
  <data name="SqlQueryParameters" xml:space="preserve">
    <value>Provides access to the collection of parameters defined for the SqlQuery.</value>
  </data>
  <data name="SqlQueryName" xml:space="preserve">
    <value>Specifies the query name.</value>
  </data>
  <data name="StoredProcQueryStoredProcName" xml:space="preserve">
    <value>Specifies the stored procedure to use in the query.</value>
  </data>
  <data name="TableQueryFilterString" xml:space="preserve">
    <value>Specifies the filter criteria to add to the SELECT statement of the TableQuery.</value>
  </data>
  <data name="TableQueryGroupFilterString" xml:space="preserve">
    <value>Gets or sets the filter criteria to add to the SELECT statement of the TableQuery containing grouped/aggregated columns.</value>
  </data>
  <data name="TableQueryTop" xml:space="preserve">
    <value>Gets or sets the number of rows returned in the a query result set.</value>
  </data>
  <data name="TableQuerySkip" xml:space="preserve">
    <value>Gets or sets the number of rows to skip in a returned query result set.</value>
  </data>
</root>