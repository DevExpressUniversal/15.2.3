<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Media;
using System.Collections.ObjectModel;
using DevExpress.Diagram.Core.Localization;
using DevExpress.Diagram.Core.Shapes.Native;

namespace DevExpress.Diagram.Core {
<#
Generate(Host.ResolvePath("./") + "Themes.xaml");
#>
	public static class DiagramThemes {
<#
IterateThemes(themeId => DefineTheme(themeId));
#>
	}
	internal static class ThemeRegistratorHelper {
		readonly static Dictionary<string, DiagramControlStringId> themeStringIdTable;

		static ThemeRegistratorHelper() {
			themeStringIdTable = new Dictionary<string, DiagramControlStringId>();
<#IterateThemes(themeId => { #>			themeStringIdTable.Add("<#=themeId#>", DiagramControlStringId.Themes_<#=themeId#>_Name);
<# });#>
		}

        public static DiagramControlStringId GetThemeStringId(string themeId) {
            return themeStringIdTable[themeId];
        }
	}
}
<#+
readonly List<string> themes = new List<string>();

void AddTheme(string name) {
	themes.Add(name);
}
void IterateThemes(Action<string> processTheme) {
	foreach(string name in themes) {
		processTheme(name);
	}
}
#>

<#+
void DefineTheme(string name) {#>
		public static DiagramTheme <#=name#>  { get { return ThemeRegistrator.GetTheme("<#=name#>"); } }
<#+}#>
<#+
void RegisterTheme(string name) {#>
			ThemeRegistrator.RegisterTheme(DiagramThemes.<#=name#>);
<#+}#>
<#+
void Generate(string path) {
    XmlDocument document = new XmlDocument();
    document.Load(path);
    XmlNode dictionaryNode = document.FirstChild;
    XmlNode theme = dictionaryNode.FirstChild;
    while(theme != null) {
		if(theme.NodeType == XmlNodeType.Element) {
			DefineTheme(theme);
		}
        theme = theme.NextSibling;
    }
}
void DefineTheme(XmlNode theme) {
    string themeKey = theme.Attributes["x:Key"].Value;
	MatchEvaluator evaluator = new MatchEvaluator(match => match.Groups[2].Value);
    string themeId = Regex.Replace(themeKey, "({ThemeKey )([A-z0-9]*)(})", evaluator);
	AddTheme(themeId);
}
#>